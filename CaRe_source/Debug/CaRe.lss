
CaRe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000310  00800100  000026ee  00002782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035f  00800410  00800410  00002a92  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00002a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001fe  00000000  00000000  00003718  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00003916  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000388  00000000  00000000  00003945  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000024e2  00000000  00000000  00003ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d37  00000000  00000000  000061af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002689  00000000  00000000  00006ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bd0  00000000  00000000  00009570  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000070ea  00000000  00000000  0000a140  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001bdf  00000000  00000000  0001122a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002c0  00000000  00000000  00012e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000030cb  00000000  00000000  000130c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__vector_1>
       8:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 02 04 	jmp	0x804	; 0x804 <__vector_4>
      14:	0c 94 0d 04 	jmp	0x81a	; 0x81a <__vector_5>
      18:	0c 94 18 04 	jmp	0x830	; 0x830 <__vector_6>
      1c:	0c 94 23 04 	jmp	0x846	; 0x846 <__vector_7>
      20:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__vector_8>
      24:	0c 94 39 04 	jmp	0x872	; 0x872 <__vector_9>
      28:	0c 94 44 04 	jmp	0x888	; 0x888 <__vector_10>
      2c:	0c 94 23 03 	jmp	0x646	; 0x646 <__vector_11>
      30:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__vector_12>
      34:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__vector_13>
      38:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__vector_14>
      3c:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__vector_15>
      40:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__vector_16>
      44:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__vector_17>
      48:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_18>
      4c:	0c 94 86 04 	jmp	0x90c	; 0x90c <__vector_19>
      50:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_20>
      54:	0c 94 17 02 	jmp	0x42e	; 0x42e <__vector_21>
      58:	0c 94 91 04 	jmp	0x922	; 0x922 <__vector_22>
      5c:	0c 94 9c 04 	jmp	0x938	; 0x938 <__vector_23>
      60:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__vector_24>
      64:	0c 94 b2 04 	jmp	0x964	; 0x964 <__vector_25>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ee       	ldi	r30, 0xEE	; 238
      7c:	f6 e2       	ldi	r31, 0x26	; 38
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 31       	cpi	r26, 0x10	; 16
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a0 e1       	ldi	r26, 0x10	; 16
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 36       	cpi	r26, 0x6F	; 111
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <main>
      9e:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__vector_default>

000000a6 <ADCStartRead>:
*  A subsequent call of ADCStartRead() will cause the ADC to continuously read data until ADCStopRead() is called.
*  The ISR will take the result of the ADC conversion and store it in the buffer set aside in globals.h
*/

void ADCStartRead(uint8_t adcChannel)	//call this to start ADC reading
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	1f 92       	push	r1
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xF0;						//clear out the lower nibble to remove any leftover settings from a previous channel 
      b2:	8c e7       	ldi	r24, 0x7C	; 124
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	2c e7       	ldi	r18, 0x7C	; 124
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	f9 01       	movw	r30, r18
      bc:	20 81       	ld	r18, Z
      be:	20 7f       	andi	r18, 0xF0	; 240
      c0:	fc 01       	movw	r30, r24
      c2:	20 83       	st	Z, r18
										//selection
	
	ADMUX |= (adcChannel&0x0F);			//set the lower nibble, clear the upper nibble of the passed variable to ensure that 
      c4:	8c e7       	ldi	r24, 0x7C	; 124
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	2c e7       	ldi	r18, 0x7C	; 124
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	f9 01       	movw	r30, r18
      ce:	20 81       	ld	r18, Z
      d0:	32 2f       	mov	r19, r18
      d2:	29 81       	ldd	r18, Y+1	; 0x01
      d4:	2f 70       	andi	r18, 0x0F	; 15
      d6:	23 2b       	or	r18, r19
      d8:	fc 01       	movw	r30, r24
      da:	20 83       	st	Z, r18
										//vital settings are preserved
										
	ADCSRA &= ~(1<<ADIFG);					//clear lingering interrupt flag
      dc:	8a e7       	ldi	r24, 0x7A	; 122
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	2a e7       	ldi	r18, 0x7A	; 122
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	f9 01       	movw	r30, r18
      e6:	20 81       	ld	r18, Z
      e8:	2f 7e       	andi	r18, 0xEF	; 239
      ea:	fc 01       	movw	r30, r24
      ec:	20 83       	st	Z, r18
	
	//ADCSRA |= (1<<ADC_EN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE);			//start conversion now, also set interrupt enable and ad_en to be sure we are going
	
	ADCSRA |= (1<<ADSC);
      ee:	8a e7       	ldi	r24, 0x7A	; 122
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	2a e7       	ldi	r18, 0x7A	; 122
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	f9 01       	movw	r30, r18
      f8:	20 81       	ld	r18, Z
      fa:	20 64       	ori	r18, 0x40	; 64
      fc:	fc 01       	movw	r30, r24
      fe:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADATE);
     100:	8a e7       	ldi	r24, 0x7A	; 122
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	2a e7       	ldi	r18, 0x7A	; 122
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	f9 01       	movw	r30, r18
     10a:	20 81       	ld	r18, Z
     10c:	20 62       	ori	r18, 0x20	; 32
     10e:	fc 01       	movw	r30, r24
     110:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADIE);
     112:	8a e7       	ldi	r24, 0x7A	; 122
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	2a e7       	ldi	r18, 0x7A	; 122
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	f9 01       	movw	r30, r18
     11c:	20 81       	ld	r18, Z
     11e:	28 60       	ori	r18, 0x08	; 8
     120:	fc 01       	movw	r30, r24
     122:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADC_EN);
     124:	8a e7       	ldi	r24, 0x7A	; 122
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	2a e7       	ldi	r18, 0x7A	; 122
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	f9 01       	movw	r30, r18
     12e:	20 81       	ld	r18, Z
     130:	20 68       	ori	r18, 0x80	; 128
     132:	fc 01       	movw	r30, r24
     134:	20 83       	st	Z, r18
	
	TCCR0B |= (1<<CS02);//enable timer that will autotrigger our sampling
     136:	85 e4       	ldi	r24, 0x45	; 69
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	25 e4       	ldi	r18, 0x45	; 69
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	f9 01       	movw	r30, r18
     140:	20 81       	ld	r18, Z
     142:	24 60       	ori	r18, 0x04	; 4
     144:	fc 01       	movw	r30, r24
     146:	20 83       	st	Z, r18
	
	return;
     148:	00 00       	nop
}
     14a:	0f 90       	pop	r0
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	08 95       	ret

00000152 <ADCStopRead>:

void ADCStopRead()						//call this to end all ADC reading
{
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &= ~((1<<ADC_EN) + (1<<ADIE) + (1<<ADATE) + (1<<ADSC) );			//turn off ADC alltogether, and disable the interrupt
     15a:	8a e7       	ldi	r24, 0x7A	; 122
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	2a e7       	ldi	r18, 0x7A	; 122
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	f9 01       	movw	r30, r18
     164:	20 81       	ld	r18, Z
     166:	27 71       	andi	r18, 0x17	; 23
     168:	fc 01       	movw	r30, r24
     16a:	20 83       	st	Z, r18
	
	TCCR0B &= ~(1<<CS02);
     16c:	85 e4       	ldi	r24, 0x45	; 69
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	25 e4       	ldi	r18, 0x45	; 69
     172:	30 e0       	ldi	r19, 0x00	; 0
     174:	f9 01       	movw	r30, r18
     176:	20 81       	ld	r18, Z
     178:	2b 7f       	andi	r18, 0xFB	; 251
     17a:	fc 01       	movw	r30, r24
     17c:	20 83       	st	Z, r18
	
	return;
     17e:	00 00       	nop
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <ADCInit>:

void ADCInit()							//call this to set the registers with the defined values above
{
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
		
	ADMUX = ADMUX_SETTING;				//explanations for these settings can be seen in the ADC_HAL.h file
     18e:	8c e7       	ldi	r24, 0x7C	; 124
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	20 e4       	ldi	r18, 0x40	; 64
     194:	fc 01       	movw	r30, r24
     196:	20 83       	st	Z, r18

	ADCSRA = ADCSRA_SETTING;
     198:	8a e7       	ldi	r24, 0x7A	; 122
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	2f ea       	ldi	r18, 0xAF	; 175
     19e:	fc 01       	movw	r30, r24
     1a0:	20 83       	st	Z, r18
	
	ADCSRB = ADCSRB_SETTING;
     1a2:	8b e7       	ldi	r24, 0x7B	; 123
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	23 e0       	ldi	r18, 0x03	; 3
     1a8:	fc 01       	movw	r30, r24
     1aa:	20 83       	st	Z, r18
	
	return;
     1ac:	00 00       	nop
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	08 95       	ret

000001b4 <turnOnAnalog>:
 *  Author: Mike
 */ 
#include "Macros.h"

void turnOnAnalog()
{
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<ANALOG); //Active low
     1bc:	85 e2       	ldi	r24, 0x25	; 37
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	25 e2       	ldi	r18, 0x25	; 37
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	f9 01       	movw	r30, r18
     1c6:	20 81       	ld	r18, Z
     1c8:	2b 7f       	andi	r18, 0xFB	; 251
     1ca:	fc 01       	movw	r30, r24
     1cc:	20 83       	st	Z, r18
}
     1ce:	df 91       	pop	r29
     1d0:	cf 91       	pop	r28
     1d2:	08 95       	ret

000001d4 <turnOnStatusLED>:
{
	PORTB |= (1<<ANALOG); //Active low
}

void turnOnStatusLED()
{
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	cd b7       	in	r28, 0x3d	; 61
     1da:	de b7       	in	r29, 0x3e	; 62
	PORTC |= (1<<STATUS_LED);	
     1dc:	88 e2       	ldi	r24, 0x28	; 40
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	28 e2       	ldi	r18, 0x28	; 40
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	f9 01       	movw	r30, r18
     1e6:	20 81       	ld	r18, Z
     1e8:	20 62       	ori	r18, 0x20	; 32
     1ea:	fc 01       	movw	r30, r24
     1ec:	20 83       	st	Z, r18
}
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <turnOnRespLED>:

void turnOnRespLED()
{
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
	PORTC |= (1<<RESP_LED);
     1fc:	88 e2       	ldi	r24, 0x28	; 40
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	28 e2       	ldi	r18, 0x28	; 40
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	f9 01       	movw	r30, r18
     206:	20 81       	ld	r18, Z
     208:	28 60       	ori	r18, 0x08	; 8
     20a:	fc 01       	movw	r30, r24
     20c:	20 83       	st	Z, r18
}
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <turnOnECGLED>:

void turnOnECGLED()
{
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
	PORTC |= (1<<ECG_LED);
     21c:	88 e2       	ldi	r24, 0x28	; 40
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	28 e2       	ldi	r18, 0x28	; 40
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	f9 01       	movw	r30, r18
     226:	20 81       	ld	r18, Z
     228:	20 61       	ori	r18, 0x10	; 16
     22a:	fc 01       	movw	r30, r24
     22c:	20 83       	st	Z, r18
}
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	08 95       	ret

00000234 <toggleStatusLED>:

void toggleStatusLED()
{
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
	PORTC ^= (1<<STATUS_LED);
     23c:	88 e2       	ldi	r24, 0x28	; 40
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	28 e2       	ldi	r18, 0x28	; 40
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	f9 01       	movw	r30, r18
     246:	30 81       	ld	r19, Z
     248:	20 e2       	ldi	r18, 0x20	; 32
     24a:	23 27       	eor	r18, r19
     24c:	fc 01       	movw	r30, r24
     24e:	20 83       	st	Z, r18
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	08 95       	ret

00000256 <toggleRespLED>:

void toggleRespLED()
{
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	cd b7       	in	r28, 0x3d	; 61
     25c:	de b7       	in	r29, 0x3e	; 62
	PORTC ^= (1<<RESP_LED);
     25e:	88 e2       	ldi	r24, 0x28	; 40
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	28 e2       	ldi	r18, 0x28	; 40
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	f9 01       	movw	r30, r18
     268:	30 81       	ld	r19, Z
     26a:	28 e0       	ldi	r18, 0x08	; 8
     26c:	23 27       	eor	r18, r19
     26e:	fc 01       	movw	r30, r24
     270:	20 83       	st	Z, r18
}
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <toggleECGLED>:

void toggleECGLED()
{
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
	PORTC ^= (1<<ECG_LED);
     280:	88 e2       	ldi	r24, 0x28	; 40
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	28 e2       	ldi	r18, 0x28	; 40
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	f9 01       	movw	r30, r18
     28a:	30 81       	ld	r19, Z
     28c:	20 e1       	ldi	r18, 0x10	; 16
     28e:	23 27       	eor	r18, r19
     290:	fc 01       	movw	r30, r24
     292:	20 83       	st	Z, r18
}
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	08 95       	ret

0000029a <turnOffStatusLED>:

void turnOffStatusLED()
{
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
	PORTC &= ~(1<<STATUS_LED);	
     2a2:	88 e2       	ldi	r24, 0x28	; 40
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	28 e2       	ldi	r18, 0x28	; 40
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	f9 01       	movw	r30, r18
     2ac:	20 81       	ld	r18, Z
     2ae:	2f 7d       	andi	r18, 0xDF	; 223
     2b0:	fc 01       	movw	r30, r24
     2b2:	20 83       	st	Z, r18
}
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <turnOnSpeaker>:
{
	PORTC &= ~(1<<ECG_LED);
}

void turnOnSpeaker()
{
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
	PORTD |= (1<<SPEAKER);
     2c2:	8b e2       	ldi	r24, 0x2B	; 43
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	2b e2       	ldi	r18, 0x2B	; 43
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	f9 01       	movw	r30, r18
     2cc:	20 81       	ld	r18, Z
     2ce:	28 60       	ori	r18, 0x08	; 8
     2d0:	fc 01       	movw	r30, r24
     2d2:	20 83       	st	Z, r18
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <toggleSpeaker>:

void toggleSpeaker()
{
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
	PORTD ^= (1<<SPEAKER);
     2e2:	8b e2       	ldi	r24, 0x2B	; 43
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	2b e2       	ldi	r18, 0x2B	; 43
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	f9 01       	movw	r30, r18
     2ec:	30 81       	ld	r19, Z
     2ee:	28 e0       	ldi	r18, 0x08	; 8
     2f0:	23 27       	eor	r18, r19
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	08 95       	ret

000002fc <turnOffSpeaker>:

void turnOffSpeaker()
{
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
	PORTD &= ~(1<<SPEAKER);
     304:	8b e2       	ldi	r24, 0x2B	; 43
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	2b e2       	ldi	r18, 0x2B	; 43
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	f9 01       	movw	r30, r18
     30e:	20 81       	ld	r18, Z
     310:	27 7f       	andi	r18, 0xF7	; 247
     312:	fc 01       	movw	r30, r24
     314:	20 83       	st	Z, r18
}
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <startBlinkStatusLED>:

void startBlinkStatusLED()
{
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
	turnOnStatusLED();
     324:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <turnOnStatusLED>
	blinkStatusLED.blinking = True;
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	80 93 a0 06 	sts	0x06A0, r24
	blinkStatusLED.period = 1;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	90 93 a4 06 	sts	0x06A4, r25
     336:	80 93 a3 06 	sts	0x06A3, r24
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <stopBlinkStatusLED>:

void stopBlinkStatusLED()
{
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
	turnOffStatusLED();
     348:	0e 94 4d 01 	call	0x29a	; 0x29a <turnOffStatusLED>
	blinkStatusLED.blinking = False;
     34c:	10 92 a0 06 	sts	0x06A0, r1
}
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	08 95       	ret

00000356 <startBlinkRespLED>:

void startBlinkRespLED()
{
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	cd b7       	in	r28, 0x3d	; 61
     35c:	de b7       	in	r29, 0x3e	; 62
	turnOnRespLED();
     35e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <turnOnRespLED>
	blinkRespLED.blinking = True;
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	80 93 96 06 	sts	0x0696, r24
	blinkRespLED.period = 1;
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	90 93 9a 06 	sts	0x069A, r25
     370:	80 93 99 06 	sts	0x0699, r24
}
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	08 95       	ret

0000037a <startBlinkECGLED>:
	turnOffRespLED();
	blinkRespLED.blinking = False;
}

void startBlinkECGLED()
{
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
	turnOnECGLED();
     382:	0e 94 0a 01 	call	0x214	; 0x214 <turnOnECGLED>
	blinkECGLED.blinking = True;
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	80 93 9b 06 	sts	0x069B, r24
	blinkECGLED.period = 1;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	90 93 9f 06 	sts	0x069F, r25
     394:	80 93 9e 06 	sts	0x069E, r24
}
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	08 95       	ret

0000039e <startAlarm>:
	turnOffSpeaker(); 
	blinkSpeaker.blinking = False;
}

void startAlarm() //identical to startBlinkSpeaker; consider removing
{
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
	turnOnSpeaker();
     3a6:	0e 94 5d 01 	call	0x2ba	; 0x2ba <turnOnSpeaker>
	blinkSpeaker.blinking = True;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	80 93 a5 06 	sts	0x06A5, r24
	blinkSpeaker.period = 1;
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	90 93 a9 06 	sts	0x06A9, r25
     3b8:	80 93 a8 06 	sts	0x06A8, r24
}
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	08 95       	ret

000003c2 <silenceAlarm>:
	while(i--);
	turnOffSpeaker();	
}

void silenceAlarm()
{
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
	turnOffSpeaker();
     3ca:	0e 94 7e 01 	call	0x2fc	; 0x2fc <turnOffSpeaker>
	silenceSpeaker.blinking = True;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	80 93 aa 06 	sts	0x06AA, r24
	silenceSpeaker.period = 15;
     3d4:	8f e0       	ldi	r24, 0x0F	; 15
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	90 93 ae 06 	sts	0x06AE, r25
     3dc:	80 93 ad 06 	sts	0x06AD, r24
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <readSwitch>:

uint8_t readSwitch()
{
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	00 d0       	rcall	.+0      	; 0x3ec <readSwitch+0x6>
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
	uint8_t result = 0;
     3f0:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t retVal;

	result |= (PINB)&((1<<PINB0)|(1<<PINB1));
     3f2:	83 e2       	ldi	r24, 0x23	; 35
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	fc 01       	movw	r30, r24
     3f8:	80 81       	ld	r24, Z
     3fa:	98 2f       	mov	r25, r24
     3fc:	93 70       	andi	r25, 0x03	; 3
     3fe:	8a 81       	ldd	r24, Y+2	; 0x02
     400:	89 2b       	or	r24, r25
     402:	8a 83       	std	Y+2, r24	; 0x02
	
	if(result == 0b01)
     404:	8a 81       	ldd	r24, Y+2	; 0x02
     406:	81 30       	cpi	r24, 0x01	; 1
     408:	11 f4       	brne	.+4      	; 0x40e <readSwitch+0x28>
	{
		retVal =  10;
     40a:	8a e0       	ldi	r24, 0x0A	; 10
     40c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(result == 0b00)
     40e:	8a 81       	ldd	r24, Y+2	; 0x02
     410:	88 23       	and	r24, r24
     412:	11 f4       	brne	.+4      	; 0x418 <readSwitch+0x32>
	{
		retVal = 15;
     414:	8f e0       	ldi	r24, 0x0F	; 15
     416:	89 83       	std	Y+1, r24	; 0x01
	}
	if(result == 0b10)
     418:	8a 81       	ldd	r24, Y+2	; 0x02
     41a:	82 30       	cpi	r24, 0x02	; 2
     41c:	11 f4       	brne	.+4      	; 0x422 <readSwitch+0x3c>
	{
		retVal = 20;
     41e:	84 e1       	ldi	r24, 0x14	; 20
     420:	89 83       	std	Y+1, r24	; 0x01
	}
	return retVal;
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <__vector_21>:
#include "ISR.h"

ISR(ADC_vect)//when an A/D conversion is completed, this ISR will be called
{
     42e:	1f 92       	push	r1
     430:	0f 92       	push	r0
     432:	00 90 5f 00 	lds	r0, 0x005F
     436:	0f 92       	push	r0
     438:	11 24       	eor	r1, r1
     43a:	2f 93       	push	r18
     43c:	3f 93       	push	r19
     43e:	8f 93       	push	r24
     440:	9f 93       	push	r25
     442:	ef 93       	push	r30
     444:	ff 93       	push	r31
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62

	
	ADCDataBuffer[ADCDataBufferHeadPtr] = ADCW;//read in data
     44e:	80 91 8e 06 	lds	r24, 0x068E
     452:	88 2f       	mov	r24, r24
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	28 e7       	ldi	r18, 0x78	; 120
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	f9 01       	movw	r30, r18
     45c:	20 81       	ld	r18, Z
     45e:	31 81       	ldd	r19, Z+1	; 0x01
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	83 5d       	subi	r24, 0xD3	; 211
     466:	98 4f       	sbci	r25, 0xF8	; 248
     468:	fc 01       	movw	r30, r24
     46a:	31 83       	std	Z+1, r19	; 0x01
     46c:	20 83       	st	Z, r18
	IncrementRingBufferHeadPtr(ADCDataBufferHeadPtr, MAXIMUM_ADC_DATA_POINTS, ADCDataBufferCount);//update the buffer
     46e:	80 91 8f 06 	lds	r24, 0x068F
     472:	8e 31       	cpi	r24, 0x1E	; 30
     474:	80 f4       	brcc	.+32     	; 0x496 <__vector_21+0x68>
     476:	80 91 8e 06 	lds	r24, 0x068E
     47a:	8f 5f       	subi	r24, 0xFF	; 255
     47c:	80 93 8e 06 	sts	0x068E, r24
     480:	80 91 8f 06 	lds	r24, 0x068F
     484:	8f 5f       	subi	r24, 0xFF	; 255
     486:	80 93 8f 06 	sts	0x068F, r24
     48a:	80 91 8e 06 	lds	r24, 0x068E
     48e:	8e 31       	cpi	r24, 0x1E	; 30
     490:	10 f0       	brcs	.+4      	; 0x496 <__vector_21+0x68>
     492:	10 92 8e 06 	sts	0x068E, r1
	
	if(ADCDataBufferCount >= ADC_RESULTS_TO_WAKE){
     496:	80 91 8f 06 	lds	r24, 0x068F
	}
	
	//toggleECGLED();

	
	TIFR0 |= (1<<OCF0A);
     49a:	85 e3       	ldi	r24, 0x35	; 53
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	25 e3       	ldi	r18, 0x35	; 53
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	f9 01       	movw	r30, r18
     4a4:	20 81       	ld	r18, Z
     4a6:	22 60       	ori	r18, 0x02	; 2
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 83       	st	Z, r18
	
	return;
     4ac:	00 00       	nop
}
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	ff 91       	pop	r31
     4b4:	ef 91       	pop	r30
     4b6:	9f 91       	pop	r25
     4b8:	8f 91       	pop	r24
     4ba:	3f 91       	pop	r19
     4bc:	2f 91       	pop	r18
     4be:	0f 90       	pop	r0
     4c0:	00 92 5f 00 	sts	0x005F, r0
     4c4:	0f 90       	pop	r0
     4c6:	1f 90       	pop	r1
     4c8:	18 95       	reti

000004ca <__vector_1>:

ISR(INT0_vect)
{
     4ca:	1f 92       	push	r1
     4cc:	0f 92       	push	r0
     4ce:	00 90 5f 00 	lds	r0, 0x005F
     4d2:	0f 92       	push	r0
     4d4:	11 24       	eor	r1, r1
     4d6:	2f 93       	push	r18
     4d8:	3f 93       	push	r19
     4da:	4f 93       	push	r20
     4dc:	5f 93       	push	r21
     4de:	6f 93       	push	r22
     4e0:	7f 93       	push	r23
     4e2:	8f 93       	push	r24
     4e4:	9f 93       	push	r25
     4e6:	af 93       	push	r26
     4e8:	bf 93       	push	r27
     4ea:	ef 93       	push	r30
     4ec:	ff 93       	push	r31
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
	pbPressed = True;
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	80 93 95 06 	sts	0x0695, r24
	if(mainState == Alarm)
     4fc:	80 91 8c 06 	lds	r24, 0x068C
     500:	84 30       	cpi	r24, 0x04	; 4
     502:	11 f4       	brne	.+4      	; 0x508 <__vector_1+0x3e>
	{
		silenceAlarm();	
     504:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <silenceAlarm>
	}
	EIFR &= ~(INTF0);//clear interrupt flag
     508:	8c e3       	ldi	r24, 0x3C	; 60
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	2c e3       	ldi	r18, 0x3C	; 60
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	f9 01       	movw	r30, r18
     512:	20 81       	ld	r18, Z
     514:	fc 01       	movw	r30, r24
     516:	20 83       	st	Z, r18
	return;
     518:	00 00       	nop
}
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	ff 91       	pop	r31
     520:	ef 91       	pop	r30
     522:	bf 91       	pop	r27
     524:	af 91       	pop	r26
     526:	9f 91       	pop	r25
     528:	8f 91       	pop	r24
     52a:	7f 91       	pop	r23
     52c:	6f 91       	pop	r22
     52e:	5f 91       	pop	r21
     530:	4f 91       	pop	r20
     532:	3f 91       	pop	r19
     534:	2f 91       	pop	r18
     536:	0f 90       	pop	r0
     538:	00 92 5f 00 	sts	0x005F, r0
     53c:	0f 90       	pop	r0
     53e:	1f 90       	pop	r1
     540:	18 95       	reti

00000542 <__vector_18>:

ISR(USART_RX_vect)
{
     542:	1f 92       	push	r1
     544:	0f 92       	push	r0
     546:	00 90 5f 00 	lds	r0, 0x005F
     54a:	0f 92       	push	r0
     54c:	11 24       	eor	r1, r1
     54e:	2f 93       	push	r18
     550:	3f 93       	push	r19
     552:	8f 93       	push	r24
     554:	9f 93       	push	r25
     556:	ef 93       	push	r30
     558:	ff 93       	push	r31
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
	//UCSR0A &= ~(1<<RXC0);
	uartRxBuff[uartRxBufferHeadPtr] = UDR0;//reading this clears the IFG
     562:	80 91 93 06 	lds	r24, 0x0693
     566:	88 2f       	mov	r24, r24
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	26 ec       	ldi	r18, 0xC6	; 198
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	f9 01       	movw	r30, r18
     570:	20 81       	ld	r18, Z
     572:	8c 5e       	subi	r24, 0xEC	; 236
     574:	98 4f       	sbci	r25, 0xF8	; 248
     576:	fc 01       	movw	r30, r24
     578:	20 83       	st	Z, r18
	IncrementRingBufferHeadPtr(uartRxBufferHeadPtr, UART_RX_BUFF_LENGTH, uartRxBufferCount);
     57a:	80 91 94 06 	lds	r24, 0x0694
     57e:	89 31       	cpi	r24, 0x19	; 25
     580:	80 f4       	brcc	.+32     	; 0x5a2 <__vector_18+0x60>
     582:	80 91 93 06 	lds	r24, 0x0693
     586:	8f 5f       	subi	r24, 0xFF	; 255
     588:	80 93 93 06 	sts	0x0693, r24
     58c:	80 91 94 06 	lds	r24, 0x0694
     590:	8f 5f       	subi	r24, 0xFF	; 255
     592:	80 93 94 06 	sts	0x0694, r24
     596:	80 91 93 06 	lds	r24, 0x0693
     59a:	89 31       	cpi	r24, 0x19	; 25
     59c:	10 f0       	brcs	.+4      	; 0x5a2 <__vector_18+0x60>
     59e:	10 92 93 06 	sts	0x0693, r1
	return;
     5a2:	00 00       	nop
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	ff 91       	pop	r31
     5aa:	ef 91       	pop	r30
     5ac:	9f 91       	pop	r25
     5ae:	8f 91       	pop	r24
     5b0:	3f 91       	pop	r19
     5b2:	2f 91       	pop	r18
     5b4:	0f 90       	pop	r0
     5b6:	00 92 5f 00 	sts	0x005F, r0
     5ba:	0f 90       	pop	r0
     5bc:	1f 90       	pop	r1
     5be:	18 95       	reti

000005c0 <__vector_20>:
ISR(USART_TX_vect)
{
     5c0:	1f 92       	push	r1
     5c2:	0f 92       	push	r0
     5c4:	00 90 5f 00 	lds	r0, 0x005F
     5c8:	0f 92       	push	r0
     5ca:	11 24       	eor	r1, r1
     5cc:	2f 93       	push	r18
     5ce:	3f 93       	push	r19
     5d0:	8f 93       	push	r24
     5d2:	9f 93       	push	r25
     5d4:	ef 93       	push	r30
     5d6:	ff 93       	push	r31
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
	//ifg cleared by executing this interrupt UCSR0A |= (1<<TXC0);//clear flag
	if(uartTxBufferCount)//send out next byte if there is one
     5e0:	80 91 92 06 	lds	r24, 0x0692
     5e4:	88 23       	and	r24, r24
     5e6:	01 f1       	breq	.+64     	; 0x628 <__vector_20+0x68>
	{
		UDR0 = uartTxBuff[uartTxBufferTailPtr];
     5e8:	86 ec       	ldi	r24, 0xC6	; 198
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	20 91 91 06 	lds	r18, 0x0691
     5f0:	22 2f       	mov	r18, r18
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	25 50       	subi	r18, 0x05	; 5
     5f6:	39 4f       	sbci	r19, 0xF9	; 249
     5f8:	f9 01       	movw	r30, r18
     5fa:	20 81       	ld	r18, Z
     5fc:	fc 01       	movw	r30, r24
     5fe:	20 83       	st	Z, r18
		IncrementRingBufferTailPtr(uartTxBufferTailPtr, UART_TX_BUFF_LENGTH, uartTxBufferCount);	
     600:	80 91 92 06 	lds	r24, 0x0692
     604:	88 23       	and	r24, r24
     606:	81 f0       	breq	.+32     	; 0x628 <__vector_20+0x68>
     608:	80 91 91 06 	lds	r24, 0x0691
     60c:	8f 5f       	subi	r24, 0xFF	; 255
     60e:	80 93 91 06 	sts	0x0691, r24
     612:	80 91 92 06 	lds	r24, 0x0692
     616:	81 50       	subi	r24, 0x01	; 1
     618:	80 93 92 06 	sts	0x0692, r24
     61c:	80 91 91 06 	lds	r24, 0x0691
     620:	89 31       	cpi	r24, 0x19	; 25
     622:	10 f0       	brcs	.+4      	; 0x628 <__vector_20+0x68>
     624:	10 92 91 06 	sts	0x0691, r1
	}
		
	return;
     628:	00 00       	nop
}
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	ff 91       	pop	r31
     630:	ef 91       	pop	r30
     632:	9f 91       	pop	r25
     634:	8f 91       	pop	r24
     636:	3f 91       	pop	r19
     638:	2f 91       	pop	r18
     63a:	0f 90       	pop	r0
     63c:	00 92 5f 00 	sts	0x005F, r0
     640:	0f 90       	pop	r0
     642:	1f 90       	pop	r1
     644:	18 95       	reti

00000646 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
     646:	1f 92       	push	r1
     648:	0f 92       	push	r0
     64a:	00 90 5f 00 	lds	r0, 0x005F
     64e:	0f 92       	push	r0
     650:	11 24       	eor	r1, r1
     652:	2f 93       	push	r18
     654:	3f 93       	push	r19
     656:	4f 93       	push	r20
     658:	5f 93       	push	r21
     65a:	6f 93       	push	r22
     65c:	7f 93       	push	r23
     65e:	8f 93       	push	r24
     660:	9f 93       	push	r25
     662:	af 93       	push	r26
     664:	bf 93       	push	r27
     666:	ef 93       	push	r30
     668:	ff 93       	push	r31
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
	if(blinkStatusLED.blinking == True)
     672:	80 91 a0 06 	lds	r24, 0x06A0
     676:	81 30       	cpi	r24, 0x01	; 1
     678:	d1 f4       	brne	.+52     	; 0x6ae <__vector_11+0x68>
	{
		if(blinkStatusLED.counter >= blinkStatusLED.period)
     67a:	20 91 a1 06 	lds	r18, 0x06A1
     67e:	30 91 a2 06 	lds	r19, 0x06A2
     682:	80 91 a3 06 	lds	r24, 0x06A3
     686:	90 91 a4 06 	lds	r25, 0x06A4
     68a:	28 17       	cp	r18, r24
     68c:	39 07       	cpc	r19, r25
     68e:	30 f0       	brcs	.+12     	; 0x69c <__vector_11+0x56>
		{
			toggleStatusLED();
     690:	0e 94 1a 01 	call	0x234	; 0x234 <toggleStatusLED>
			blinkStatusLED.counter = 0;
     694:	10 92 a2 06 	sts	0x06A2, r1
     698:	10 92 a1 06 	sts	0x06A1, r1
		}
		blinkStatusLED.counter++;
     69c:	80 91 a1 06 	lds	r24, 0x06A1
     6a0:	90 91 a2 06 	lds	r25, 0x06A2
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	90 93 a2 06 	sts	0x06A2, r25
     6aa:	80 93 a1 06 	sts	0x06A1, r24
	}
	
	if(blinkRespLED.blinking == True)
     6ae:	80 91 96 06 	lds	r24, 0x0696
     6b2:	81 30       	cpi	r24, 0x01	; 1
     6b4:	d1 f4       	brne	.+52     	; 0x6ea <__vector_11+0xa4>
	{
		if(blinkRespLED.counter >= blinkRespLED.period)
     6b6:	20 91 97 06 	lds	r18, 0x0697
     6ba:	30 91 98 06 	lds	r19, 0x0698
     6be:	80 91 99 06 	lds	r24, 0x0699
     6c2:	90 91 9a 06 	lds	r25, 0x069A
     6c6:	28 17       	cp	r18, r24
     6c8:	39 07       	cpc	r19, r25
     6ca:	30 f0       	brcs	.+12     	; 0x6d8 <__vector_11+0x92>
		{
			toggleRespLED();
     6cc:	0e 94 2b 01 	call	0x256	; 0x256 <toggleRespLED>
			blinkRespLED.counter = 0;
     6d0:	10 92 98 06 	sts	0x0698, r1
     6d4:	10 92 97 06 	sts	0x0697, r1
		}
		blinkRespLED.counter++;
     6d8:	80 91 97 06 	lds	r24, 0x0697
     6dc:	90 91 98 06 	lds	r25, 0x0698
     6e0:	01 96       	adiw	r24, 0x01	; 1
     6e2:	90 93 98 06 	sts	0x0698, r25
     6e6:	80 93 97 06 	sts	0x0697, r24
	}
	
	if(blinkECGLED.blinking == True)
     6ea:	80 91 9b 06 	lds	r24, 0x069B
     6ee:	81 30       	cpi	r24, 0x01	; 1
     6f0:	d1 f4       	brne	.+52     	; 0x726 <__vector_11+0xe0>
	{
		if(blinkECGLED.counter >= blinkECGLED.period)
     6f2:	20 91 9c 06 	lds	r18, 0x069C
     6f6:	30 91 9d 06 	lds	r19, 0x069D
     6fa:	80 91 9e 06 	lds	r24, 0x069E
     6fe:	90 91 9f 06 	lds	r25, 0x069F
     702:	28 17       	cp	r18, r24
     704:	39 07       	cpc	r19, r25
     706:	30 f0       	brcs	.+12     	; 0x714 <__vector_11+0xce>
		{
			toggleECGLED();
     708:	0e 94 3c 01 	call	0x278	; 0x278 <toggleECGLED>
			blinkECGLED.counter = 0;
     70c:	10 92 9d 06 	sts	0x069D, r1
     710:	10 92 9c 06 	sts	0x069C, r1
		}
		blinkECGLED.counter++;
     714:	80 91 9c 06 	lds	r24, 0x069C
     718:	90 91 9d 06 	lds	r25, 0x069D
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	90 93 9d 06 	sts	0x069D, r25
     722:	80 93 9c 06 	sts	0x069C, r24
	}
	
	if(silenceSpeaker.blinking == True) //Needs to be above blinkSpeaker
     726:	80 91 aa 06 	lds	r24, 0x06AA
     72a:	81 30       	cpi	r24, 0x01	; 1
     72c:	19 f5       	brne	.+70     	; 0x774 <__vector_11+0x12e>
	{
		turnOffSpeaker(); //silence speaker
     72e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <turnOffSpeaker>
		blinkSpeaker.blinking = False; //turn off speaker blinker
     732:	10 92 a5 06 	sts	0x06A5, r1
		if(silenceSpeaker.counter >= silenceSpeaker.period)
     736:	20 91 ab 06 	lds	r18, 0x06AB
     73a:	30 91 ac 06 	lds	r19, 0x06AC
     73e:	80 91 ad 06 	lds	r24, 0x06AD
     742:	90 91 ae 06 	lds	r25, 0x06AE
     746:	28 17       	cp	r18, r24
     748:	39 07       	cpc	r19, r25
     74a:	58 f0       	brcs	.+22     	; 0x762 <__vector_11+0x11c>
		{
			turnOnSpeaker(); //turn on speaker
     74c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <turnOnSpeaker>
			blinkSpeaker.blinking = True;
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	80 93 a5 06 	sts	0x06A5, r24
			silenceSpeaker.blinking = False;
     756:	10 92 aa 06 	sts	0x06AA, r1
			silenceSpeaker.counter = 0;
     75a:	10 92 ac 06 	sts	0x06AC, r1
     75e:	10 92 ab 06 	sts	0x06AB, r1
		}
		silenceSpeaker.counter++;
     762:	80 91 ab 06 	lds	r24, 0x06AB
     766:	90 91 ac 06 	lds	r25, 0x06AC
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	90 93 ac 06 	sts	0x06AC, r25
     770:	80 93 ab 06 	sts	0x06AB, r24
	}
	
	if(blinkSpeaker.blinking == True)
     774:	80 91 a5 06 	lds	r24, 0x06A5
     778:	81 30       	cpi	r24, 0x01	; 1
     77a:	d1 f4       	brne	.+52     	; 0x7b0 <__vector_11+0x16a>
	{
		if(blinkSpeaker.counter >= blinkSpeaker.period)
     77c:	20 91 a6 06 	lds	r18, 0x06A6
     780:	30 91 a7 06 	lds	r19, 0x06A7
     784:	80 91 a8 06 	lds	r24, 0x06A8
     788:	90 91 a9 06 	lds	r25, 0x06A9
     78c:	28 17       	cp	r18, r24
     78e:	39 07       	cpc	r19, r25
     790:	30 f0       	brcs	.+12     	; 0x79e <__vector_11+0x158>
		{
			toggleSpeaker();
     792:	0e 94 6d 01 	call	0x2da	; 0x2da <toggleSpeaker>
			blinkSpeaker.counter = 0;
     796:	10 92 a7 06 	sts	0x06A7, r1
     79a:	10 92 a6 06 	sts	0x06A6, r1
		}
		blinkSpeaker.counter++;
     79e:	80 91 a6 06 	lds	r24, 0x06A6
     7a2:	90 91 a7 06 	lds	r25, 0x06A7
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	90 93 a7 06 	sts	0x06A7, r25
     7ac:	80 93 a6 06 	sts	0x06A6, r24
	}
	

	
}
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	ff 91       	pop	r31
     7b6:	ef 91       	pop	r30
     7b8:	bf 91       	pop	r27
     7ba:	af 91       	pop	r26
     7bc:	9f 91       	pop	r25
     7be:	8f 91       	pop	r24
     7c0:	7f 91       	pop	r23
     7c2:	6f 91       	pop	r22
     7c4:	5f 91       	pop	r21
     7c6:	4f 91       	pop	r20
     7c8:	3f 91       	pop	r19
     7ca:	2f 91       	pop	r18
     7cc:	0f 90       	pop	r0
     7ce:	00 92 5f 00 	sts	0x005F, r0
     7d2:	0f 90       	pop	r0
     7d4:	1f 90       	pop	r1
     7d6:	18 95       	reti

000007d8 <__vector_12>:




ISR(TIMER1_COMPB_vect)
{
     7d8:	1f 92       	push	r1
     7da:	0f 92       	push	r0
     7dc:	00 90 5f 00 	lds	r0, 0x005F
     7e0:	0f 92       	push	r0
     7e2:	11 24       	eor	r1, r1
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
	while(1);
     7ec:	ff cf       	rjmp	.-2      	; 0x7ec <__vector_12+0x14>

000007ee <__vector_2>:
}

ISR(INT1_vect)
{
     7ee:	1f 92       	push	r1
     7f0:	0f 92       	push	r0
     7f2:	00 90 5f 00 	lds	r0, 0x005F
     7f6:	0f 92       	push	r0
     7f8:	11 24       	eor	r1, r1
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
	while(1);
     802:	ff cf       	rjmp	.-2      	; 0x802 <__vector_2+0x14>

00000804 <__vector_4>:
}

ISR(PCINT1_vect)
{
     804:	1f 92       	push	r1
     806:	0f 92       	push	r0
     808:	00 90 5f 00 	lds	r0, 0x005F
     80c:	0f 92       	push	r0
     80e:	11 24       	eor	r1, r1
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
	while(1);
     818:	ff cf       	rjmp	.-2      	; 0x818 <__vector_4+0x14>

0000081a <__vector_5>:
}
ISR(PCINT2_vect)
{
     81a:	1f 92       	push	r1
     81c:	0f 92       	push	r0
     81e:	00 90 5f 00 	lds	r0, 0x005F
     822:	0f 92       	push	r0
     824:	11 24       	eor	r1, r1
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
	while(1);
     82e:	ff cf       	rjmp	.-2      	; 0x82e <__vector_5+0x14>

00000830 <__vector_6>:
}

ISR(WDT_vect)
{
     830:	1f 92       	push	r1
     832:	0f 92       	push	r0
     834:	00 90 5f 00 	lds	r0, 0x005F
     838:	0f 92       	push	r0
     83a:	11 24       	eor	r1, r1
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
	while(1);
     844:	ff cf       	rjmp	.-2      	; 0x844 <__vector_6+0x14>

00000846 <__vector_7>:
}

ISR(TIMER2_COMPA_vect)
{
     846:	1f 92       	push	r1
     848:	0f 92       	push	r0
     84a:	00 90 5f 00 	lds	r0, 0x005F
     84e:	0f 92       	push	r0
     850:	11 24       	eor	r1, r1
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
	while(1);
     85a:	ff cf       	rjmp	.-2      	; 0x85a <__vector_7+0x14>

0000085c <__vector_8>:
}
ISR(TIMER2_COMPB_vect)
{
     85c:	1f 92       	push	r1
     85e:	0f 92       	push	r0
     860:	00 90 5f 00 	lds	r0, 0x005F
     864:	0f 92       	push	r0
     866:	11 24       	eor	r1, r1
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
	while(1);
     870:	ff cf       	rjmp	.-2      	; 0x870 <__vector_8+0x14>

00000872 <__vector_9>:
}
ISR(TIMER2_OVF_vect)
{
     872:	1f 92       	push	r1
     874:	0f 92       	push	r0
     876:	00 90 5f 00 	lds	r0, 0x005F
     87a:	0f 92       	push	r0
     87c:	11 24       	eor	r1, r1
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
	while(1);
     886:	ff cf       	rjmp	.-2      	; 0x886 <__vector_9+0x14>

00000888 <__vector_10>:
}
ISR(TIMER1_CAPT_vect)
{
     888:	1f 92       	push	r1
     88a:	0f 92       	push	r0
     88c:	00 90 5f 00 	lds	r0, 0x005F
     890:	0f 92       	push	r0
     892:	11 24       	eor	r1, r1
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
	while(1);
     89c:	ff cf       	rjmp	.-2      	; 0x89c <__vector_10+0x14>

0000089e <__vector_13>:
}


ISR(TIMER1_OVF_vect)
{
     89e:	1f 92       	push	r1
     8a0:	0f 92       	push	r0
     8a2:	00 90 5f 00 	lds	r0, 0x005F
     8a6:	0f 92       	push	r0
     8a8:	11 24       	eor	r1, r1
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62
	while(1);
     8b2:	ff cf       	rjmp	.-2      	; 0x8b2 <__vector_13+0x14>

000008b4 <__vector_14>:
}
ISR(TIMER0_COMPA_vect)
{
     8b4:	1f 92       	push	r1
     8b6:	0f 92       	push	r0
     8b8:	00 90 5f 00 	lds	r0, 0x005F
     8bc:	0f 92       	push	r0
     8be:	11 24       	eor	r1, r1
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
	while(1);
     8c8:	ff cf       	rjmp	.-2      	; 0x8c8 <__vector_14+0x14>

000008ca <__vector_15>:
}
ISR(TIMER0_COMPB_vect)
{
     8ca:	1f 92       	push	r1
     8cc:	0f 92       	push	r0
     8ce:	00 90 5f 00 	lds	r0, 0x005F
     8d2:	0f 92       	push	r0
     8d4:	11 24       	eor	r1, r1
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
	while(1);
     8de:	ff cf       	rjmp	.-2      	; 0x8de <__vector_15+0x14>

000008e0 <__vector_16>:
}
ISR(TIMER0_OVF_vect)
{
     8e0:	1f 92       	push	r1
     8e2:	0f 92       	push	r0
     8e4:	00 90 5f 00 	lds	r0, 0x005F
     8e8:	0f 92       	push	r0
     8ea:	11 24       	eor	r1, r1
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	cd b7       	in	r28, 0x3d	; 61
     8f2:	de b7       	in	r29, 0x3e	; 62
	while(1);
     8f4:	ff cf       	rjmp	.-2      	; 0x8f4 <__vector_16+0x14>

000008f6 <__vector_17>:
}
ISR(SPI_STC_vect)
{
     8f6:	1f 92       	push	r1
     8f8:	0f 92       	push	r0
     8fa:	00 90 5f 00 	lds	r0, 0x005F
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
	while(1);
     90a:	ff cf       	rjmp	.-2      	; 0x90a <__stack+0xb>

0000090c <__vector_19>:
}
ISR(USART_UDRE_vect)
{
     90c:	1f 92       	push	r1
     90e:	0f 92       	push	r0
     910:	00 90 5f 00 	lds	r0, 0x005F
     914:	0f 92       	push	r0
     916:	11 24       	eor	r1, r1
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
	while(1);
     920:	ff cf       	rjmp	.-2      	; 0x920 <__vector_19+0x14>

00000922 <__vector_22>:
}
ISR(EE_READY_vect)
{
     922:	1f 92       	push	r1
     924:	0f 92       	push	r0
     926:	00 90 5f 00 	lds	r0, 0x005F
     92a:	0f 92       	push	r0
     92c:	11 24       	eor	r1, r1
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
	while(1);
     936:	ff cf       	rjmp	.-2      	; 0x936 <__vector_22+0x14>

00000938 <__vector_23>:
}
ISR(ANALOG_COMP_vect)
{
     938:	1f 92       	push	r1
     93a:	0f 92       	push	r0
     93c:	00 90 5f 00 	lds	r0, 0x005F
     940:	0f 92       	push	r0
     942:	11 24       	eor	r1, r1
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
	while(1);
     94c:	ff cf       	rjmp	.-2      	; 0x94c <__vector_23+0x14>

0000094e <__vector_24>:
}
ISR(TWI_vect)
{
     94e:	1f 92       	push	r1
     950:	0f 92       	push	r0
     952:	00 90 5f 00 	lds	r0, 0x005F
     956:	0f 92       	push	r0
     958:	11 24       	eor	r1, r1
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
	while(1);
     962:	ff cf       	rjmp	.-2      	; 0x962 <__vector_24+0x14>

00000964 <__vector_25>:
}
ISR(SPM_READY_vect)
{
     964:	1f 92       	push	r1
     966:	0f 92       	push	r0
     968:	00 90 5f 00 	lds	r0, 0x005F
     96c:	0f 92       	push	r0
     96e:	11 24       	eor	r1, r1
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
	while(1);
     978:	ff cf       	rjmp	.-2      	; 0x978 <__vector_25+0x14>

0000097a <__vector_default>:
}
ISR(BADISR_vect)//catchall for debugging etc.
{
     97a:	1f 92       	push	r1
     97c:	0f 92       	push	r0
     97e:	00 90 5f 00 	lds	r0, 0x005F
     982:	0f 92       	push	r0
     984:	11 24       	eor	r1, r1
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
	asm("NOP");
     98e:	00 00       	nop
	return;
     990:	00 00       	nop
}
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	0f 90       	pop	r0
     998:	00 92 5f 00 	sts	0x005F, r0
     99c:	0f 90       	pop	r0
     99e:	1f 90       	pop	r1
     9a0:	18 95       	reti

000009a2 <RespFilt>:
 *  Author: Mike
 */ 
#include "Filt.h"

boolean RespFilt (uint16_t *rawData)
{		
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
     9aa:	28 97       	sbiw	r28, 0x08	; 8
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	cd bf       	out	0x3d, r28	; 61
     9b6:	98 87       	std	Y+8, r25	; 0x08
     9b8:	8f 83       	std	Y+7, r24	; 0x07
	static boolean isValid = False; //data is invalid if computed using unfilled memory buffer
	static uint8_t fillCount = 0; //count values are in filter memory
	static uint16_t RespMemPtr = 0; //Keep track of oldest value in filter memory
	uint32_t result; //Accumulator

	*(RespFiltMem + RespMemPtr) = *rawData; //Add new value to memory buffer
     9ba:	80 91 5a 05 	lds	r24, 0x055A
     9be:	90 91 5b 05 	lds	r25, 0x055B
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	84 5a       	subi	r24, 0xA4	; 164
     9c8:	9a 4f       	sbci	r25, 0xFA	; 250
     9ca:	2f 81       	ldd	r18, Y+7	; 0x07
     9cc:	38 85       	ldd	r19, Y+8	; 0x08
     9ce:	f9 01       	movw	r30, r18
     9d0:	20 81       	ld	r18, Z
     9d2:	31 81       	ldd	r19, Z+1	; 0x01
     9d4:	fc 01       	movw	r30, r24
     9d6:	31 83       	std	Z+1, r19	; 0x01
     9d8:	20 83       	st	Z, r18
	IncrementRingBufferHeadPtr(RespMemPtr, RESP_FILT_ORDER + 1, fillCount); 
     9da:	80 91 8a 06 	lds	r24, 0x068A
     9de:	87 39       	cpi	r24, 0x97	; 151
     9e0:	c8 f4       	brcc	.+50     	; 0xa14 <RespFilt+0x72>
     9e2:	80 91 5a 05 	lds	r24, 0x055A
     9e6:	90 91 5b 05 	lds	r25, 0x055B
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	90 93 5b 05 	sts	0x055B, r25
     9f0:	80 93 5a 05 	sts	0x055A, r24
     9f4:	80 91 8a 06 	lds	r24, 0x068A
     9f8:	8f 5f       	subi	r24, 0xFF	; 255
     9fa:	80 93 8a 06 	sts	0x068A, r24
     9fe:	80 91 5a 05 	lds	r24, 0x055A
     a02:	90 91 5b 05 	lds	r25, 0x055B
     a06:	87 39       	cpi	r24, 0x97	; 151
     a08:	91 05       	cpc	r25, r1
     a0a:	20 f0       	brcs	.+8      	; 0xa14 <RespFilt+0x72>
     a0c:	10 92 5b 05 	sts	0x055B, r1
     a10:	10 92 5a 05 	sts	0x055A, r1
	
	if(!isValid) //if buffer is still filling
     a14:	80 91 8b 06 	lds	r24, 0x068B
     a18:	88 23       	and	r24, r24
     a1a:	49 f4       	brne	.+18     	; 0xa2e <RespFilt+0x8c>
	{
		if(fillCount >= RESP_FILT_ORDER + 1)//check how full buffer is
     a1c:	80 91 8a 06 	lds	r24, 0x068A
     a20:	87 39       	cpi	r24, 0x97	; 151
     a22:	08 f4       	brcc	.+2      	; 0xa26 <RespFilt+0x84>
     a24:	7e c0       	rjmp	.+252    	; 0xb22 <RespFilt+0x180>
		{
			isValid = True;
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	80 93 8b 06 	sts	0x068B, r24
     a2c:	7a c0       	rjmp	.+244    	; 0xb22 <RespFilt+0x180>
		}
	}
	else
	{ //buffer is full; perform filtering algorithm
		
		result = 0; //zero accumulator
     a2e:	19 82       	std	Y+1, r1	; 0x01
     a30:	1a 82       	std	Y+2, r1	; 0x02
     a32:	1b 82       	std	Y+3, r1	; 0x03
     a34:	1c 82       	std	Y+4, r1	; 0x04
	
		for(int i = RESP_FILT_ORDER; i>=0; i--)
     a36:	86 e9       	ldi	r24, 0x96	; 150
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	9e 83       	std	Y+6, r25	; 0x06
     a3c:	8d 83       	std	Y+5, r24	; 0x05
     a3e:	45 c0       	rjmp	.+138    	; 0xaca <RespFilt+0x128>
		{
			result += (uint32_t)*(RespFiltCo + i)*((uint32_t)*(RespFiltMem + RespMemPtr));
     a40:	8d 81       	ldd	r24, Y+5	; 0x05
     a42:	9e 81       	ldd	r25, Y+6	; 0x06
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	8f 51       	subi	r24, 0x1F	; 31
     a4a:	9d 4f       	sbci	r25, 0xFD	; 253
     a4c:	fc 01       	movw	r30, r24
     a4e:	80 81       	ld	r24, Z
     a50:	91 81       	ldd	r25, Z+1	; 0x01
     a52:	9c 01       	movw	r18, r24
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	80 91 5a 05 	lds	r24, 0x055A
     a5c:	90 91 5b 05 	lds	r25, 0x055B
     a60:	88 0f       	add	r24, r24
     a62:	99 1f       	adc	r25, r25
     a64:	84 5a       	subi	r24, 0xA4	; 164
     a66:	9a 4f       	sbci	r25, 0xFA	; 250
     a68:	fc 01       	movw	r30, r24
     a6a:	80 81       	ld	r24, Z
     a6c:	91 81       	ldd	r25, Z+1	; 0x01
     a6e:	cc 01       	movw	r24, r24
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	bc 01       	movw	r22, r24
     a76:	cd 01       	movw	r24, r26
     a78:	0e 94 87 10 	call	0x210e	; 0x210e <__mulsi3>
     a7c:	dc 01       	movw	r26, r24
     a7e:	cb 01       	movw	r24, r22
     a80:	29 81       	ldd	r18, Y+1	; 0x01
     a82:	3a 81       	ldd	r19, Y+2	; 0x02
     a84:	4b 81       	ldd	r20, Y+3	; 0x03
     a86:	5c 81       	ldd	r21, Y+4	; 0x04
     a88:	82 0f       	add	r24, r18
     a8a:	93 1f       	adc	r25, r19
     a8c:	a4 1f       	adc	r26, r20
     a8e:	b5 1f       	adc	r27, r21
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	9a 83       	std	Y+2, r25	; 0x02
     a94:	ab 83       	std	Y+3, r26	; 0x03
     a96:	bc 83       	std	Y+4, r27	; 0x04
			IncrementRingBufferPtr(RespMemPtr, RESP_FILT_ORDER + 1); // TODO: either create dummy variable to satisfy fnctn req or find other way around this
     a98:	80 91 5a 05 	lds	r24, 0x055A
     a9c:	90 91 5b 05 	lds	r25, 0x055B
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	90 93 5b 05 	sts	0x055B, r25
     aa6:	80 93 5a 05 	sts	0x055A, r24
     aaa:	80 91 5a 05 	lds	r24, 0x055A
     aae:	90 91 5b 05 	lds	r25, 0x055B
     ab2:	87 39       	cpi	r24, 0x97	; 151
     ab4:	91 05       	cpc	r25, r1
     ab6:	20 f0       	brcs	.+8      	; 0xac0 <RespFilt+0x11e>
     ab8:	10 92 5b 05 	sts	0x055B, r1
     abc:	10 92 5a 05 	sts	0x055A, r1
	else
	{ //buffer is full; perform filtering algorithm
		
		result = 0; //zero accumulator
	
		for(int i = RESP_FILT_ORDER; i>=0; i--)
     ac0:	8d 81       	ldd	r24, Y+5	; 0x05
     ac2:	9e 81       	ldd	r25, Y+6	; 0x06
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	9e 83       	std	Y+6, r25	; 0x06
     ac8:	8d 83       	std	Y+5, r24	; 0x05
     aca:	8d 81       	ldd	r24, Y+5	; 0x05
     acc:	9e 81       	ldd	r25, Y+6	; 0x06
     ace:	99 23       	and	r25, r25
     ad0:	0c f0       	brlt	.+2      	; 0xad4 <RespFilt+0x132>
     ad2:	b6 cf       	rjmp	.-148    	; 0xa40 <RespFilt+0x9e>
		{
			result += (uint32_t)*(RespFiltCo + i)*((uint32_t)*(RespFiltMem + RespMemPtr));
			IncrementRingBufferPtr(RespMemPtr, RESP_FILT_ORDER + 1); // TODO: either create dummy variable to satisfy fnctn req or find other way around this
		}	
		IncrementRingBufferPtr(RespMemPtr, RESP_FILT_ORDER + 1);//increment once more after calculation to point to next spot in buffer for the next new data point
     ad4:	80 91 5a 05 	lds	r24, 0x055A
     ad8:	90 91 5b 05 	lds	r25, 0x055B
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	90 93 5b 05 	sts	0x055B, r25
     ae2:	80 93 5a 05 	sts	0x055A, r24
     ae6:	80 91 5a 05 	lds	r24, 0x055A
     aea:	90 91 5b 05 	lds	r25, 0x055B
     aee:	87 39       	cpi	r24, 0x97	; 151
     af0:	91 05       	cpc	r25, r1
     af2:	20 f0       	brcs	.+8      	; 0xafc <RespFilt+0x15a>
     af4:	10 92 5b 05 	sts	0x055B, r1
     af8:	10 92 5a 05 	sts	0x055A, r1
		
		*rawData = (uint16_t)(result >> 21) ; //downscale result for gain and cast to 16-bit
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	9a 81       	ldd	r25, Y+2	; 0x02
     b00:	ab 81       	ldd	r26, Y+3	; 0x03
     b02:	bc 81       	ldd	r27, Y+4	; 0x04
     b04:	07 2e       	mov	r0, r23
     b06:	75 e1       	ldi	r23, 0x15	; 21
     b08:	b6 95       	lsr	r27
     b0a:	a7 95       	ror	r26
     b0c:	97 95       	ror	r25
     b0e:	87 95       	ror	r24
     b10:	7a 95       	dec	r23
     b12:	d1 f7       	brne	.-12     	; 0xb08 <RespFilt+0x166>
     b14:	70 2d       	mov	r23, r0
     b16:	9c 01       	movw	r18, r24
     b18:	8f 81       	ldd	r24, Y+7	; 0x07
     b1a:	98 85       	ldd	r25, Y+8	; 0x08
     b1c:	fc 01       	movw	r30, r24
     b1e:	31 83       	std	Z+1, r19	; 0x01
     b20:	20 83       	st	Z, r18
		
	}
		return isValid; 
     b22:	80 91 8b 06 	lds	r24, 0x068B
}
     b26:	28 96       	adiw	r28, 0x08	; 8
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <ECGFilt>:

boolean ECGFilt (uint16_t *rawData)
{
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	28 97       	sbiw	r28, 0x08	; 8
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	98 87       	std	Y+8, r25	; 0x08
     b4e:	8f 83       	std	Y+7, r24	; 0x07
	static boolean isValid = False; //data is invalid if computed using unfilled memory buffer
	static uint8_t fillCount = 0; //count values are in filter memory
	int32_t result; //Accumulator
	static uint16_t ECGMemPtr = 0; //Used when filling the memory buffer with new ADC values
	
	*(ECGFiltMem + ECGMemPtr) = *rawData; //Add new value to memory buffer
     b50:	80 91 10 04 	lds	r24, 0x0410
     b54:	90 91 11 04 	lds	r25, 0x0411
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	8e 5e       	subi	r24, 0xEE	; 238
     b5e:	9b 4f       	sbci	r25, 0xFB	; 251
     b60:	2f 81       	ldd	r18, Y+7	; 0x07
     b62:	38 85       	ldd	r19, Y+8	; 0x08
     b64:	f9 01       	movw	r30, r18
     b66:	20 81       	ld	r18, Z
     b68:	31 81       	ldd	r19, Z+1	; 0x01
     b6a:	fc 01       	movw	r30, r24
     b6c:	31 83       	std	Z+1, r19	; 0x01
     b6e:	20 83       	st	Z, r18
	IncrementRingBufferHeadPtr(ECGMemPtr, ECG_FILT_ORDER + 1, fillCount); //increment fill pointer***Need to change IncRingBug function
     b70:	80 91 58 05 	lds	r24, 0x0558
     b74:	83 3a       	cpi	r24, 0xA3	; 163
     b76:	c8 f4       	brcc	.+50     	; 0xbaa <ECGFilt+0x72>
     b78:	80 91 10 04 	lds	r24, 0x0410
     b7c:	90 91 11 04 	lds	r25, 0x0411
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	90 93 11 04 	sts	0x0411, r25
     b86:	80 93 10 04 	sts	0x0410, r24
     b8a:	80 91 58 05 	lds	r24, 0x0558
     b8e:	8f 5f       	subi	r24, 0xFF	; 255
     b90:	80 93 58 05 	sts	0x0558, r24
     b94:	80 91 10 04 	lds	r24, 0x0410
     b98:	90 91 11 04 	lds	r25, 0x0411
     b9c:	83 3a       	cpi	r24, 0xA3	; 163
     b9e:	91 05       	cpc	r25, r1
     ba0:	20 f0       	brcs	.+8      	; 0xbaa <ECGFilt+0x72>
     ba2:	10 92 11 04 	sts	0x0411, r1
     ba6:	10 92 10 04 	sts	0x0410, r1
	
	if(!isValid) //if buffer is still filling
     baa:	80 91 59 05 	lds	r24, 0x0559
     bae:	88 23       	and	r24, r24
     bb0:	49 f4       	brne	.+18     	; 0xbc4 <ECGFilt+0x8c>
	{
		if(fillCount >= ECG_FILT_ORDER + 1)//check how full buffer is
     bb2:	80 91 58 05 	lds	r24, 0x0558
     bb6:	83 3a       	cpi	r24, 0xA3	; 163
     bb8:	08 f4       	brcc	.+2      	; 0xbbc <ECGFilt+0x84>
     bba:	8f c0       	rjmp	.+286    	; 0xcda <ECGFilt+0x1a2>
		{
			isValid = True;
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	80 93 59 05 	sts	0x0559, r24
     bc2:	8b c0       	rjmp	.+278    	; 0xcda <ECGFilt+0x1a2>
		}
	}
	else //buffer is full; perform filtering algorithm
	{
		result = 0; //zero accumulator
     bc4:	19 82       	std	Y+1, r1	; 0x01
     bc6:	1a 82       	std	Y+2, r1	; 0x02
     bc8:	1b 82       	std	Y+3, r1	; 0x03
     bca:	1c 82       	std	Y+4, r1	; 0x04
	
		for(int i = ECG_FILT_ORDER; i>=0; i--)
     bcc:	82 ea       	ldi	r24, 0xA2	; 162
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	9e 83       	std	Y+6, r25	; 0x06
     bd2:	8d 83       	std	Y+5, r24	; 0x05
     bd4:	48 c0       	rjmp	.+144    	; 0xc66 <ECGFilt+0x12e>
		{
			result += ((int32_t)*(ECGFiltCo + i))*((int32_t)*(ECGFiltMem + ECGMemPtr));
     bd6:	8d 81       	ldd	r24, Y+5	; 0x05
     bd8:	9e 81       	ldd	r25, Y+6	; 0x06
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	85 56       	subi	r24, 0x65	; 101
     be0:	9e 4f       	sbci	r25, 0xFE	; 254
     be2:	fc 01       	movw	r30, r24
     be4:	80 81       	ld	r24, Z
     be6:	91 81       	ldd	r25, Z+1	; 0x01
     be8:	9c 01       	movw	r18, r24
     bea:	44 27       	eor	r20, r20
     bec:	37 fd       	sbrc	r19, 7
     bee:	40 95       	com	r20
     bf0:	54 2f       	mov	r21, r20
     bf2:	80 91 10 04 	lds	r24, 0x0410
     bf6:	90 91 11 04 	lds	r25, 0x0411
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	8e 5e       	subi	r24, 0xEE	; 238
     c00:	9b 4f       	sbci	r25, 0xFB	; 251
     c02:	fc 01       	movw	r30, r24
     c04:	80 81       	ld	r24, Z
     c06:	91 81       	ldd	r25, Z+1	; 0x01
     c08:	aa 27       	eor	r26, r26
     c0a:	97 fd       	sbrc	r25, 7
     c0c:	a0 95       	com	r26
     c0e:	ba 2f       	mov	r27, r26
     c10:	bc 01       	movw	r22, r24
     c12:	cd 01       	movw	r24, r26
     c14:	0e 94 87 10 	call	0x210e	; 0x210e <__mulsi3>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	29 81       	ldd	r18, Y+1	; 0x01
     c1e:	3a 81       	ldd	r19, Y+2	; 0x02
     c20:	4b 81       	ldd	r20, Y+3	; 0x03
     c22:	5c 81       	ldd	r21, Y+4	; 0x04
     c24:	82 0f       	add	r24, r18
     c26:	93 1f       	adc	r25, r19
     c28:	a4 1f       	adc	r26, r20
     c2a:	b5 1f       	adc	r27, r21
     c2c:	89 83       	std	Y+1, r24	; 0x01
     c2e:	9a 83       	std	Y+2, r25	; 0x02
     c30:	ab 83       	std	Y+3, r26	; 0x03
     c32:	bc 83       	std	Y+4, r27	; 0x04
			IncrementRingBufferPtr(ECGMemPtr, ECG_FILT_ORDER + 1); //TODO: '' ''
     c34:	80 91 10 04 	lds	r24, 0x0410
     c38:	90 91 11 04 	lds	r25, 0x0411
     c3c:	01 96       	adiw	r24, 0x01	; 1
     c3e:	90 93 11 04 	sts	0x0411, r25
     c42:	80 93 10 04 	sts	0x0410, r24
     c46:	80 91 10 04 	lds	r24, 0x0410
     c4a:	90 91 11 04 	lds	r25, 0x0411
     c4e:	83 3a       	cpi	r24, 0xA3	; 163
     c50:	91 05       	cpc	r25, r1
     c52:	20 f0       	brcs	.+8      	; 0xc5c <ECGFilt+0x124>
     c54:	10 92 11 04 	sts	0x0411, r1
     c58:	10 92 10 04 	sts	0x0410, r1
	}
	else //buffer is full; perform filtering algorithm
	{
		result = 0; //zero accumulator
	
		for(int i = ECG_FILT_ORDER; i>=0; i--)
     c5c:	8d 81       	ldd	r24, Y+5	; 0x05
     c5e:	9e 81       	ldd	r25, Y+6	; 0x06
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	9e 83       	std	Y+6, r25	; 0x06
     c64:	8d 83       	std	Y+5, r24	; 0x05
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	99 23       	and	r25, r25
     c6c:	0c f0       	brlt	.+2      	; 0xc70 <ECGFilt+0x138>
     c6e:	b3 cf       	rjmp	.-154    	; 0xbd6 <ECGFilt+0x9e>
		{
			result += ((int32_t)*(ECGFiltCo + i))*((int32_t)*(ECGFiltMem + ECGMemPtr));
			IncrementRingBufferPtr(ECGMemPtr, ECG_FILT_ORDER + 1); //TODO: '' ''
		}
		
		IncrementRingBufferPtr(ECGMemPtr, ECG_FILT_ORDER+1);
     c70:	80 91 10 04 	lds	r24, 0x0410
     c74:	90 91 11 04 	lds	r25, 0x0411
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	90 93 11 04 	sts	0x0411, r25
     c7e:	80 93 10 04 	sts	0x0410, r24
     c82:	80 91 10 04 	lds	r24, 0x0410
     c86:	90 91 11 04 	lds	r25, 0x0411
     c8a:	83 3a       	cpi	r24, 0xA3	; 163
     c8c:	91 05       	cpc	r25, r1
     c8e:	20 f0       	brcs	.+8      	; 0xc98 <ECGFilt+0x160>
     c90:	10 92 11 04 	sts	0x0411, r1
     c94:	10 92 10 04 	sts	0x0410, r1
		
		if(result < 200) //rectify; thresh determined empirically; needs to be verified
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	9a 81       	ldd	r25, Y+2	; 0x02
     c9c:	ab 81       	ldd	r26, Y+3	; 0x03
     c9e:	bc 81       	ldd	r27, Y+4	; 0x04
     ca0:	88 3c       	cpi	r24, 0xC8	; 200
     ca2:	91 05       	cpc	r25, r1
     ca4:	a1 05       	cpc	r26, r1
     ca6:	b1 05       	cpc	r27, r1
     ca8:	24 f4       	brge	.+8      	; 0xcb2 <ECGFilt+0x17a>
		{
			result = 0;
     caa:	19 82       	std	Y+1, r1	; 0x01
     cac:	1a 82       	std	Y+2, r1	; 0x02
     cae:	1b 82       	std	Y+3, r1	; 0x03
     cb0:	1c 82       	std	Y+4, r1	; 0x04
		}
		
		*rawData = (uint16_t)((result>>18)+512);
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	9a 81       	ldd	r25, Y+2	; 0x02
     cb6:	ab 81       	ldd	r26, Y+3	; 0x03
     cb8:	bc 81       	ldd	r27, Y+4	; 0x04
     cba:	07 2e       	mov	r0, r23
     cbc:	72 e1       	ldi	r23, 0x12	; 18
     cbe:	b5 95       	asr	r27
     cc0:	a7 95       	ror	r26
     cc2:	97 95       	ror	r25
     cc4:	87 95       	ror	r24
     cc6:	7a 95       	dec	r23
     cc8:	d1 f7       	brne	.-12     	; 0xcbe <ECGFilt+0x186>
     cca:	70 2d       	mov	r23, r0
     ccc:	9c 01       	movw	r18, r24
     cce:	3e 5f       	subi	r19, 0xFE	; 254
     cd0:	8f 81       	ldd	r24, Y+7	; 0x07
     cd2:	98 85       	ldd	r25, Y+8	; 0x08
     cd4:	fc 01       	movw	r30, r24
     cd6:	31 83       	std	Z+1, r19	; 0x01
     cd8:	20 83       	st	Z, r18
	}	
	
	return isValid;
     cda:	80 91 59 05 	lds	r24, 0x0559
     cde:	28 96       	adiw	r28, 0x08	; 8
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	08 95       	ret

00000cf0 <main>:

#include "main.h"

int main(void)
{
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	68 97       	sbiw	r28, 0x18	; 24
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61

		
		
	}
#else
	uint16_t expectedMaximumBreath = 0;//these variables will store the maximum and minimum breath (on average) calculated during calibration
     d04:	1a 82       	std	Y+2, r1	; 0x02
     d06:	19 82       	std	Y+1, r1	; 0x01
	uint16_t expectedMinimumBreath = 0;
     d08:	1c 82       	std	Y+4, r1	; 0x04
     d0a:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t expectedMaximumECG = 0;
     d0c:	1e 82       	std	Y+6, r1	; 0x06
     d0e:	1d 82       	std	Y+5, r1	; 0x05
	uint16_t breathThreshold;
	uint16_t ECGThreshold;
    
	while(1)
    {
		switch(mainState)
     d10:	80 91 8c 06 	lds	r24, 0x068C
     d14:	88 2f       	mov	r24, r24
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	82 30       	cpi	r24, 0x02	; 2
     d1a:	91 05       	cpc	r25, r1
     d1c:	09 f4       	brne	.+2      	; 0xd20 <main+0x30>
     d1e:	53 c0       	rjmp	.+166    	; 0xdc6 <main+0xd6>
     d20:	83 30       	cpi	r24, 0x03	; 3
     d22:	91 05       	cpc	r25, r1
     d24:	34 f4       	brge	.+12     	; 0xd32 <main+0x42>
     d26:	00 97       	sbiw	r24, 0x00	; 0
     d28:	69 f0       	breq	.+26     	; 0xd44 <main+0x54>
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	91 05       	cpc	r25, r1
     d2e:	e9 f0       	breq	.+58     	; 0xd6a <main+0x7a>
     d30:	26 c7       	rjmp	.+3660   	; 0x1b7e <main+0xe8e>
     d32:	83 30       	cpi	r24, 0x03	; 3
     d34:	91 05       	cpc	r25, r1
     d36:	09 f4       	brne	.+2      	; 0xd3a <main+0x4a>
     d38:	bd c4       	rjmp	.+2426   	; 0x16b4 <main+0x9c4>
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	91 05       	cpc	r25, r1
     d3e:	09 f4       	brne	.+2      	; 0xd42 <main+0x52>
     d40:	18 c7       	rjmp	.+3632   	; 0x1b72 <main+0xe82>
     d42:	1d c7       	rjmp	.+3642   	; 0x1b7e <main+0xe8e>
		{
			case Init:
			{
				MasterInitialize();
     d44:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <MasterInitialize>
				int8_t i = 250;
     d48:	8a ef       	ldi	r24, 0xFA	; 250
     d4a:	8b 87       	std	Y+11, r24	; 0x0b
				while(i--);
     d4c:	00 00       	nop
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	9b 85       	ldd	r25, Y+11	; 0x0b
     d52:	99 23       	and	r25, r25
     d54:	09 f4       	brne	.+2      	; 0xd58 <main+0x68>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	9b 85       	ldd	r25, Y+11	; 0x0b
     d5a:	91 50       	subi	r25, 0x01	; 1
     d5c:	9b 87       	std	Y+11, r25	; 0x0b
     d5e:	88 23       	and	r24, r24
     d60:	b1 f7       	brne	.-20     	; 0xd4e <main+0x5e>
				mainState = WaitForPB;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	80 93 8c 06 	sts	0x068C, r24
			
			}
			break;
     d68:	0e c7       	rjmp	.+3612   	; 0x1b86 <main+0xe96>

			case WaitForPB:
			{
				if(pbPressed)
     d6a:	80 91 95 06 	lds	r24, 0x0695
     d6e:	88 23       	and	r24, r24
     d70:	09 f4       	brne	.+2      	; 0xd74 <main+0x84>
     d72:	08 c7       	rjmp	.+3600   	; 0x1b84 <main+0xe94>
				{
					mainState = Calibration;
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	80 93 8c 06 	sts	0x068C, r24
					respTimeThresh = readSwitch();
     d7a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <readSwitch>
     d7e:	80 93 00 01 	sts	0x0100, r24
					printf("a%u\n", respTimeThresh);
     d82:	80 91 00 01 	lds	r24, 0x0100
     d86:	88 2f       	mov	r24, r24
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	29 2f       	mov	r18, r25
     d8c:	2f 93       	push	r18
     d8e:	8f 93       	push	r24
     d90:	81 e4       	ldi	r24, 0x41	; 65
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	89 2f       	mov	r24, r25
     d96:	8f 93       	push	r24
     d98:	81 e4       	ldi	r24, 0x41	; 65
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	8f 93       	push	r24
     d9e:	0e 94 ae 10 	call	0x215c	; 0x215c <printf>
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
					SendString("Dur:", 4);
     daa:	64 e0       	ldi	r22, 0x04	; 4
     dac:	86 e4       	ldi	r24, 0x46	; 70
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <SendString>
					SendDecimalNumber(respTimeThresh);
     db4:	80 91 00 01 	lds	r24, 0x0100
     db8:	88 2f       	mov	r24, r24
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 67 0f 	call	0x1ece	; 0x1ece <SendDecimalNumber>
					turnOnAnalog();
     dc0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <turnOnAnalog>
					//TODO: freeze switch position here
				}
			}			
			break;
     dc4:	df c6       	rjmp	.+3518   	; 0x1b84 <main+0xe94>
			
			case Calibration:
			{
				uint8_t steps = 50;
     dc6:	82 e3       	ldi	r24, 0x32	; 50
     dc8:	8c 87       	std	Y+12, r24	; 0x0c
				uint16_t i;
				uint16_t maxRead;
				boolean singleStepping = False;
     dca:	19 8a       	std	Y+17, r1	; 0x11
				{
					uint16_t points[5];//data
					
					}recentECGMemory = {.points = {0x00, 0x00, 0x00, 0x00, 0x00}};
				
				startBlinkStatusLED();
     dcc:	0e 94 8e 01 	call	0x31c	; 0x31c <startBlinkStatusLED>

				ADCStartRead(0x02);//gain feedback channel
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	0e 94 53 00 	call	0xa6	; 0xa6 <ADCStartRead>
				SelectPot();
     dd6:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <SelectPot>
				DecreaseGain(100);
     dda:	84 e6       	ldi	r24, 0x64	; 100
     ddc:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DecreaseGain>
				IncreaseGain(49);//set to center point
     de0:	81 e3       	ldi	r24, 0x31	; 49
     de2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <IncreaseGain>
     de6:	01 c0       	rjmp	.+2      	; 0xdea <main+0xfa>
						singleStepping = True;
					}

					
										
				} 
     de8:	00 00       	nop
				DecreaseGain(100);
				IncreaseGain(49);//set to center point
				
				for(;;) 
				{
					steps /= 2;
     dea:	8c 85       	ldd	r24, Y+12	; 0x0c
     dec:	86 95       	lsr	r24
     dee:	8c 87       	std	Y+12, r24	; 0x0c
					if(!steps)//zero
     df0:	8c 85       	ldd	r24, Y+12	; 0x0c
     df2:	88 23       	and	r24, r24
     df4:	11 f4       	brne	.+4      	; 0xdfa <main+0x10a>
					{
						steps = 1;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	8c 87       	std	Y+12, r24	; 0x0c
					}
					maxRead = 0;
     dfa:	18 8a       	std	Y+16, r1	; 0x10
     dfc:	1f 86       	std	Y+15, r1	; 0x0f
					for(i = 0;i<2;)
     dfe:	1e 86       	std	Y+14, r1	; 0x0e
     e00:	1d 86       	std	Y+13, r1	; 0x0d
     e02:	3a c0       	rjmp	.+116    	; 0xe78 <main+0x188>
					{
						if(ADCDataBufferCount)
     e04:	80 91 8f 06 	lds	r24, 0x068F
     e08:	88 23       	and	r24, r24
     e0a:	b1 f1       	breq	.+108    	; 0xe78 <main+0x188>
						{
							i++;
     e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	9e 87       	std	Y+14, r25	; 0x0e
     e14:	8d 87       	std	Y+13, r24	; 0x0d
							if(ADCDataBuffer[ADCDataBufferTailPtr] > maxRead)
     e16:	80 91 8d 06 	lds	r24, 0x068D
     e1a:	88 2f       	mov	r24, r24
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	83 5d       	subi	r24, 0xD3	; 211
     e24:	98 4f       	sbci	r25, 0xF8	; 248
     e26:	fc 01       	movw	r30, r24
     e28:	20 81       	ld	r18, Z
     e2a:	31 81       	ldd	r19, Z+1	; 0x01
     e2c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e2e:	98 89       	ldd	r25, Y+16	; 0x10
     e30:	82 17       	cp	r24, r18
     e32:	93 07       	cpc	r25, r19
     e34:	68 f4       	brcc	.+26     	; 0xe50 <main+0x160>
							{
								maxRead = ADCDataBuffer[ADCDataBufferTailPtr];
     e36:	80 91 8d 06 	lds	r24, 0x068D
     e3a:	88 2f       	mov	r24, r24
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	83 5d       	subi	r24, 0xD3	; 211
     e44:	98 4f       	sbci	r25, 0xF8	; 248
     e46:	fc 01       	movw	r30, r24
     e48:	80 81       	ld	r24, Z
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	98 8b       	std	Y+16, r25	; 0x10
     e4e:	8f 87       	std	Y+15, r24	; 0x0f
							}
							IncrementRingBufferTailPtr(ADCDataBufferTailPtr, MAXIMUM_ADC_DATA_POINTS, ADCDataBufferCount);
     e50:	80 91 8f 06 	lds	r24, 0x068F
     e54:	88 23       	and	r24, r24
     e56:	81 f0       	breq	.+32     	; 0xe78 <main+0x188>
     e58:	80 91 8d 06 	lds	r24, 0x068D
     e5c:	8f 5f       	subi	r24, 0xFF	; 255
     e5e:	80 93 8d 06 	sts	0x068D, r24
     e62:	80 91 8f 06 	lds	r24, 0x068F
     e66:	81 50       	subi	r24, 0x01	; 1
     e68:	80 93 8f 06 	sts	0x068F, r24
     e6c:	80 91 8d 06 	lds	r24, 0x068D
     e70:	8e 31       	cpi	r24, 0x1E	; 30
     e72:	10 f0       	brcs	.+4      	; 0xe78 <main+0x188>
     e74:	10 92 8d 06 	sts	0x068D, r1
					if(!steps)//zero
					{
						steps = 1;
					}
					maxRead = 0;
					for(i = 0;i<2;)
     e78:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	91 05       	cpc	r25, r1
     e80:	08 f2       	brcs	.-126    	; 0xe04 <main+0x114>
								maxRead = ADCDataBuffer[ADCDataBufferTailPtr];
							}
							IncrementRingBufferTailPtr(ADCDataBufferTailPtr, MAXIMUM_ADC_DATA_POINTS, ADCDataBufferCount);
						}
					}
					if(maxRead >= 0x333)//0x333 is 80 percent saturation of the adc, we want our max to be around here
     e82:	8f 85       	ldd	r24, Y+15	; 0x0f
     e84:	98 89       	ldd	r25, Y+16	; 0x10
     e86:	83 33       	cpi	r24, 0x33	; 51
     e88:	f3 e0       	ldi	r31, 0x03	; 3
     e8a:	9f 07       	cpc	r25, r31
     e8c:	f0 f0       	brcs	.+60     	; 0xeca <main+0x1da>
					{
						
						DecreaseGain(steps);					
     e8e:	8c 85       	ldd	r24, Y+12	; 0x0c
     e90:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <DecreaseGain>
						LoadChar('d');
     e94:	84 e6       	ldi	r24, 0x64	; 100
     e96:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LoadChar>
						SendDecimalNumber(steps);
     e9a:	8c 85       	ldd	r24, Y+12	; 0x0c
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 67 0f 	call	0x1ece	; 0x1ece <SendDecimalNumber>
						LoadChar('\n');
     ea4:	8a e0       	ldi	r24, 0x0A	; 10
     ea6:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LoadChar>
						LoadChar('\r');
     eaa:	8d e0       	ldi	r24, 0x0D	; 13
     eac:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LoadChar>
						SendDecimalNumber(maxRead);
     eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb2:	98 89       	ldd	r25, Y+16	; 0x10
     eb4:	0e 94 67 0f 	call	0x1ece	; 0x1ece <SendDecimalNumber>
						LoadChar('\n');
     eb8:	8a e0       	ldi	r24, 0x0A	; 10
     eba:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LoadChar>
						LoadChar('\r');
     ebe:	8d e0       	ldi	r24, 0x0D	; 13
     ec0:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LoadChar>
						StartTx();
     ec4:	0e 94 2f 10 	call	0x205e	; 0x205e <StartTx>
     ec8:	1d c0       	rjmp	.+58     	; 0xf04 <main+0x214>
						
					}
					else
					{
						
						IncreaseGain(steps);
     eca:	8c 85       	ldd	r24, Y+12	; 0x0c
     ecc:	0e 94 56 0e 	call	0x1cac	; 0x1cac <IncreaseGain>
								
						LoadChar('i');
     ed0:	89 e6       	ldi	r24, 0x69	; 105
     ed2:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LoadChar>
						SendDecimalNumber(steps);
     ed6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 67 0f 	call	0x1ece	; 0x1ece <SendDecimalNumber>
						LoadChar('\n');
     ee0:	8a e0       	ldi	r24, 0x0A	; 10
     ee2:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LoadChar>
						LoadChar('\r');
     ee6:	8d e0       	ldi	r24, 0x0D	; 13
     ee8:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LoadChar>
						SendDecimalNumber(maxRead);
     eec:	8f 85       	ldd	r24, Y+15	; 0x0f
     eee:	98 89       	ldd	r25, Y+16	; 0x10
     ef0:	0e 94 67 0f 	call	0x1ece	; 0x1ece <SendDecimalNumber>
						LoadChar('\n');
     ef4:	8a e0       	ldi	r24, 0x0A	; 10
     ef6:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LoadChar>
						LoadChar('\r');
     efa:	8d e0       	ldi	r24, 0x0D	; 13
     efc:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LoadChar>
						StartTx();	
     f00:	0e 94 2f 10 	call	0x205e	; 0x205e <StartTx>
					}
					
					if(singleStepping)
     f04:	89 89       	ldd	r24, Y+17	; 0x11
     f06:	88 23       	and	r24, r24
     f08:	59 f0       	breq	.+22     	; 0xf20 <main+0x230>
					{
						mainState = Sampling;
     f0a:	83 e0       	ldi	r24, 0x03	; 3
     f0c:	80 93 8c 06 	sts	0x068C, r24
						DeselectPot();//freeze setting
     f10:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <DeselectPot>
						ADCStopRead();
     f14:	0e 94 a9 00 	call	0x152	; 0x152 <ADCStopRead>
						ADCStartRead(0x00);//start reading signal channel from now on
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	0e 94 53 00 	call	0xa6	; 0xa6 <ADCStartRead>
						break;
     f1e:	08 c0       	rjmp	.+16     	; 0xf30 <main+0x240>
					}
					if(steps == 1)
     f20:	8c 85       	ldd	r24, Y+12	; 0x0c
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	09 f0       	breq	.+2      	; 0xf28 <main+0x238>
     f26:	60 cf       	rjmp	.-320    	; 0xde8 <main+0xf8>
					{
						singleStepping = True;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	89 8b       	std	Y+17, r24	; 0x11
					}

					
										
				} 
     f2c:	5d cf       	rjmp	.-326    	; 0xde8 <main+0xf8>
							break;	
						}
						IncrementRingBufferTailPtr(ADCDataBufferTailPtr, MAXIMUM_ADC_DATA_POINTS, ADCDataBufferCount);
					}
		
				}
     f2e:	00 00       	nop
				//Spin until filter buffers are populated
				while(1)
				{
					uint16_t RespDataFill;
					uint16_t ECGDataFill;
					if(ADCDataBufferCount)
     f30:	80 91 8f 06 	lds	r24, 0x068F
     f34:	88 23       	and	r24, r24
     f36:	d9 f3       	breq	.-10     	; 0xf2e <main+0x23e>
					{	
						RespDataFill = ADCDataBuffer[ADCDataBufferTailPtr];
     f38:	80 91 8d 06 	lds	r24, 0x068D
     f3c:	88 2f       	mov	r24, r24
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	83 5d       	subi	r24, 0xD3	; 211
     f46:	98 4f       	sbci	r25, 0xF8	; 248
     f48:	fc 01       	movw	r30, r24
     f4a:	80 81       	ld	r24, Z
     f4c:	91 81       	ldd	r25, Z+1	; 0x01
     f4e:	9e 8b       	std	Y+22, r25	; 0x16
     f50:	8d 8b       	std	Y+21, r24	; 0x15
						ECGDataFill = RespDataFill;
     f52:	8d 89       	ldd	r24, Y+21	; 0x15
     f54:	9e 89       	ldd	r25, Y+22	; 0x16
     f56:	98 8f       	std	Y+24, r25	; 0x18
     f58:	8f 8b       	std	Y+23, r24	; 0x17
						
						if(RespFilt(&RespDataFill) && ECGFilt(&ECGDataFill))
     f5a:	ce 01       	movw	r24, r28
     f5c:	45 96       	adiw	r24, 0x15	; 21
     f5e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <RespFilt>
     f62:	88 23       	and	r24, r24
     f64:	11 f1       	breq	.+68     	; 0xfaa <main+0x2ba>
     f66:	ce 01       	movw	r24, r28
     f68:	47 96       	adiw	r24, 0x17	; 23
     f6a:	0e 94 9c 05 	call	0xb38	; 0xb38 <ECGFilt>
     f6e:	88 23       	and	r24, r24
     f70:	e1 f0       	breq	.+56     	; 0xfaa <main+0x2ba>
						{
							IncrementRingBufferTailPtr(ADCDataBufferTailPtr, MAXIMUM_ADC_DATA_POINTS, ADCDataBufferCount);
     f72:	80 91 8f 06 	lds	r24, 0x068F
     f76:	88 23       	and	r24, r24
     f78:	81 f0       	breq	.+32     	; 0xf9a <main+0x2aa>
     f7a:	80 91 8d 06 	lds	r24, 0x068D
     f7e:	8f 5f       	subi	r24, 0xFF	; 255
     f80:	80 93 8d 06 	sts	0x068D, r24
     f84:	80 91 8f 06 	lds	r24, 0x068F
     f88:	81 50       	subi	r24, 0x01	; 1
     f8a:	80 93 8f 06 	sts	0x068F, r24
     f8e:	80 91 8d 06 	lds	r24, 0x068D
     f92:	8e 31       	cpi	r24, 0x1E	; 30
     f94:	10 f0       	brcs	.+4      	; 0xf9a <main+0x2aa>
     f96:	10 92 8d 06 	sts	0x068D, r1
							SendString("Filt Buffers Filled", 19);
     f9a:	63 e1       	ldi	r22, 0x13	; 19
     f9c:	8b e4       	ldi	r24, 0x4B	; 75
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <SendString>
						}
						IncrementRingBufferTailPtr(ADCDataBufferTailPtr, MAXIMUM_ADC_DATA_POINTS, ADCDataBufferCount);
					}
		
				}
				for(i = 0;i<4500;)
     fa4:	1e 86       	std	Y+14, r1	; 0x0e
     fa6:	1d 86       	std	Y+13, r1	; 0x0d
     fa8:	d7 c2       	rjmp	.+1454   	; 0x1558 <main+0x868>
						{
							IncrementRingBufferTailPtr(ADCDataBufferTailPtr, MAXIMUM_ADC_DATA_POINTS, ADCDataBufferCount);
							SendString("Filt Buffers Filled", 19);
							break;	
						}
						IncrementRingBufferTailPtr(ADCDataBufferTailPtr, MAXIMUM_ADC_DATA_POINTS, ADCDataBufferCount);
     faa:	80 91 8f 06 	lds	r24, 0x068F
     fae:	88 23       	and	r24, r24
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <main+0x2c4>
     fb2:	bd cf       	rjmp	.-134    	; 0xf2e <main+0x23e>
     fb4:	80 91 8d 06 	lds	r24, 0x068D
     fb8:	8f 5f       	subi	r24, 0xFF	; 255
     fba:	80 93 8d 06 	sts	0x068D, r24
     fbe:	80 91 8f 06 	lds	r24, 0x068F
     fc2:	81 50       	subi	r24, 0x01	; 1
     fc4:	80 93 8f 06 	sts	0x068F, r24
     fc8:	80 91 8d 06 	lds	r24, 0x068D
     fcc:	8e 31       	cpi	r24, 0x1E	; 30
     fce:	08 f4       	brcc	.+2      	; 0xfd2 <main+0x2e2>
     fd0:	ae cf       	rjmp	.-164    	; 0xf2e <main+0x23e>
     fd2:	10 92 8d 06 	sts	0x068D, r1
					}
		
				}
     fd6:	ab cf       	rjmp	.-170    	; 0xf2e <main+0x23e>
				for(i = 0;i<4500;)
				{
					//SendString("inside Thresh Calc", 18);
					if(ADCDataBufferCount)
     fd8:	80 91 8f 06 	lds	r24, 0x068F
     fdc:	88 23       	and	r24, r24
     fde:	09 f4       	brne	.+2      	; 0xfe2 <main+0x2f2>
     fe0:	bb c2       	rjmp	.+1398   	; 0x1558 <main+0x868>
					{
						int8_t j;
						i++;
     fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe6:	01 96       	adiw	r24, 0x01	; 1
     fe8:	9e 87       	std	Y+14, r25	; 0x0e
     fea:	8d 87       	std	Y+13, r24	; 0x0d
						
						for(j=4; j>0; j--)
     fec:	84 e0       	ldi	r24, 0x04	; 4
     fee:	8a 8b       	std	Y+18, r24	; 0x12
     ff0:	33 c0       	rjmp	.+102    	; 0x1058 <main+0x368>
						{
							recentRespMemory.points[j] = recentRespMemory.points[j-1];//shift data points
     ff2:	8a 89       	ldd	r24, Y+18	; 0x12
     ff4:	99 27       	eor	r25, r25
     ff6:	87 fd       	sbrc	r24, 7
     ff8:	90 95       	com	r25
     ffa:	2a 89       	ldd	r18, Y+18	; 0x12
     ffc:	33 27       	eor	r19, r19
     ffe:	27 fd       	sbrc	r18, 7
    1000:	30 95       	com	r19
    1002:	21 50       	subi	r18, 0x01	; 1
    1004:	31 09       	sbc	r19, r1
    1006:	22 0f       	add	r18, r18
    1008:	33 1f       	adc	r19, r19
    100a:	21 55       	subi	r18, 0x51	; 81
    100c:	39 4f       	sbci	r19, 0xF9	; 249
    100e:	f9 01       	movw	r30, r18
    1010:	20 81       	ld	r18, Z
    1012:	31 81       	ldd	r19, Z+1	; 0x01
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	81 55       	subi	r24, 0x51	; 81
    101a:	99 4f       	sbci	r25, 0xF9	; 249
    101c:	fc 01       	movw	r30, r24
    101e:	31 83       	std	Z+1, r19	; 0x01
    1020:	20 83       	st	Z, r18
							recentECGMemory.points[j] = recentECGMemory.points[j-1];							
    1022:	8a 89       	ldd	r24, Y+18	; 0x12
    1024:	99 27       	eor	r25, r25
    1026:	87 fd       	sbrc	r24, 7
    1028:	90 95       	com	r25
    102a:	2a 89       	ldd	r18, Y+18	; 0x12
    102c:	33 27       	eor	r19, r19
    102e:	27 fd       	sbrc	r18, 7
    1030:	30 95       	com	r19
    1032:	21 50       	subi	r18, 0x01	; 1
    1034:	31 09       	sbc	r19, r1
    1036:	22 0f       	add	r18, r18
    1038:	33 1f       	adc	r19, r19
    103a:	27 54       	subi	r18, 0x47	; 71
    103c:	39 4f       	sbci	r19, 0xF9	; 249
    103e:	f9 01       	movw	r30, r18
    1040:	20 81       	ld	r18, Z
    1042:	31 81       	ldd	r19, Z+1	; 0x01
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	87 54       	subi	r24, 0x47	; 71
    104a:	99 4f       	sbci	r25, 0xF9	; 249
    104c:	fc 01       	movw	r30, r24
    104e:	31 83       	std	Z+1, r19	; 0x01
    1050:	20 83       	st	Z, r18
					if(ADCDataBufferCount)
					{
						int8_t j;
						i++;
						
						for(j=4; j>0; j--)
    1052:	8a 89       	ldd	r24, Y+18	; 0x12
    1054:	81 50       	subi	r24, 0x01	; 1
    1056:	8a 8b       	std	Y+18, r24	; 0x12
    1058:	8a 89       	ldd	r24, Y+18	; 0x12
    105a:	18 16       	cp	r1, r24
    105c:	54 f2       	brlt	.-108    	; 0xff2 <main+0x302>
						{
							recentRespMemory.points[j] = recentRespMemory.points[j-1];//shift data points
							recentECGMemory.points[j] = recentECGMemory.points[j-1];							
						}
						recentRespMemory.points[0] = ADCDataBuffer[ADCDataBufferTailPtr];
    105e:	80 91 8d 06 	lds	r24, 0x068D
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	83 5d       	subi	r24, 0xD3	; 211
    106c:	98 4f       	sbci	r25, 0xF8	; 248
    106e:	fc 01       	movw	r30, r24
    1070:	80 81       	ld	r24, Z
    1072:	91 81       	ldd	r25, Z+1	; 0x01
    1074:	90 93 b0 06 	sts	0x06B0, r25
    1078:	80 93 af 06 	sts	0x06AF, r24
						IncrementRingBufferTailPtr(ADCDataBufferTailPtr, MAXIMUM_ADC_DATA_POINTS, ADCDataBufferCount);
    107c:	80 91 8f 06 	lds	r24, 0x068F
    1080:	88 23       	and	r24, r24
    1082:	81 f0       	breq	.+32     	; 0x10a4 <main+0x3b4>
    1084:	80 91 8d 06 	lds	r24, 0x068D
    1088:	8f 5f       	subi	r24, 0xFF	; 255
    108a:	80 93 8d 06 	sts	0x068D, r24
    108e:	80 91 8f 06 	lds	r24, 0x068F
    1092:	81 50       	subi	r24, 0x01	; 1
    1094:	80 93 8f 06 	sts	0x068F, r24
    1098:	80 91 8d 06 	lds	r24, 0x068D
    109c:	8e 31       	cpi	r24, 0x1E	; 30
    109e:	10 f0       	brcs	.+4      	; 0x10a4 <main+0x3b4>
    10a0:	10 92 8d 06 	sts	0x068D, r1
						recentECGMemory.points[0] = recentRespMemory.points[0];
    10a4:	80 91 af 06 	lds	r24, 0x06AF
    10a8:	90 91 b0 06 	lds	r25, 0x06B0
    10ac:	90 93 ba 06 	sts	0x06BA, r25
    10b0:	80 93 b9 06 	sts	0x06B9, r24
					
						RespFilt(&recentRespMemory.points[0]);
    10b4:	8f ea       	ldi	r24, 0xAF	; 175
    10b6:	96 e0       	ldi	r25, 0x06	; 6
    10b8:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <RespFilt>
						ECGFilt(&recentECGMemory.points[0]);
    10bc:	89 eb       	ldi	r24, 0xB9	; 185
    10be:	96 e0       	ldi	r25, 0x06	; 6
    10c0:	0e 94 9c 05 	call	0xb38	; 0xb38 <ECGFilt>
						
						
						if(i >= 5 && (recentRespMemory.points[2]>=recentRespMemory.points[0]&&recentRespMemory.points[2]>=recentRespMemory.points[1]&&recentRespMemory.points[2]>=recentRespMemory.points[3]&&recentRespMemory.points[2]>=recentRespMemory.points[4]))
    10c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c8:	85 30       	cpi	r24, 0x05	; 5
    10ca:	91 05       	cpc	r25, r1
    10cc:	08 f4       	brcc	.+2      	; 0x10d0 <main+0x3e0>
    10ce:	be c0       	rjmp	.+380    	; 0x124c <main+0x55c>
    10d0:	20 91 b3 06 	lds	r18, 0x06B3
    10d4:	30 91 b4 06 	lds	r19, 0x06B4
    10d8:	80 91 af 06 	lds	r24, 0x06AF
    10dc:	90 91 b0 06 	lds	r25, 0x06B0
    10e0:	28 17       	cp	r18, r24
    10e2:	39 07       	cpc	r19, r25
    10e4:	08 f4       	brcc	.+2      	; 0x10e8 <main+0x3f8>
    10e6:	b2 c0       	rjmp	.+356    	; 0x124c <main+0x55c>
    10e8:	20 91 b3 06 	lds	r18, 0x06B3
    10ec:	30 91 b4 06 	lds	r19, 0x06B4
    10f0:	80 91 b1 06 	lds	r24, 0x06B1
    10f4:	90 91 b2 06 	lds	r25, 0x06B2
    10f8:	28 17       	cp	r18, r24
    10fa:	39 07       	cpc	r19, r25
    10fc:	08 f4       	brcc	.+2      	; 0x1100 <main+0x410>
    10fe:	a6 c0       	rjmp	.+332    	; 0x124c <main+0x55c>
    1100:	20 91 b3 06 	lds	r18, 0x06B3
    1104:	30 91 b4 06 	lds	r19, 0x06B4
    1108:	80 91 b5 06 	lds	r24, 0x06B5
    110c:	90 91 b6 06 	lds	r25, 0x06B6
    1110:	28 17       	cp	r18, r24
    1112:	39 07       	cpc	r19, r25
    1114:	08 f4       	brcc	.+2      	; 0x1118 <main+0x428>
    1116:	9a c0       	rjmp	.+308    	; 0x124c <main+0x55c>
    1118:	20 91 b3 06 	lds	r18, 0x06B3
    111c:	30 91 b4 06 	lds	r19, 0x06B4
    1120:	80 91 b7 06 	lds	r24, 0x06B7
    1124:	90 91 b8 06 	lds	r25, 0x06B8
    1128:	28 17       	cp	r18, r24
    112a:	39 07       	cpc	r19, r25
    112c:	08 f4       	brcc	.+2      	; 0x1130 <main+0x440>
    112e:	8e c0       	rjmp	.+284    	; 0x124c <main+0x55c>
						{
							if(maxRespPoints.initialPointer < 5)
    1130:	80 91 0e 01 	lds	r24, 0x010E
    1134:	85 30       	cpi	r24, 0x05	; 5
    1136:	d0 f5       	brcc	.+116    	; 0x11ac <main+0x4bc>
							{				
								maxRespPoints.points[maxRespPoints.initialPointer] = recentRespMemory.points[2];//store the point if we don't already have 5 points and increment the initializer
    1138:	80 91 0e 01 	lds	r24, 0x010E
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	20 91 b3 06 	lds	r18, 0x06B3
    1144:	30 91 b4 06 	lds	r19, 0x06B4
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	8f 5f       	subi	r24, 0xFF	; 255
    114e:	9e 4f       	sbci	r25, 0xFE	; 254
    1150:	fc 01       	movw	r30, r24
    1152:	31 83       	std	Z+1, r19	; 0x01
    1154:	20 83       	st	Z, r18
								if(maxRespPoints.points[maxRespPoints.initialPointer] < maxRespPoints.lowestMax.value)
    1156:	80 91 0e 01 	lds	r24, 0x010E
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	8f 5f       	subi	r24, 0xFF	; 255
    1164:	9e 4f       	sbci	r25, 0xFE	; 254
    1166:	fc 01       	movw	r30, r24
    1168:	20 81       	ld	r18, Z
    116a:	31 81       	ldd	r19, Z+1	; 0x01
    116c:	80 91 0b 01 	lds	r24, 0x010B
    1170:	90 91 0c 01 	lds	r25, 0x010C
    1174:	28 17       	cp	r18, r24
    1176:	39 07       	cpc	r19, r25
    1178:	98 f4       	brcc	.+38     	; 0x11a0 <main+0x4b0>
								{
									maxRespPoints.lowestMax.value = maxRespPoints.points[maxRespPoints.initialPointer];//remember the LOWEST maximum so we have a quick comparison value for new local maxes when the first five points have come in
    117a:	80 91 0e 01 	lds	r24, 0x010E
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	8f 5f       	subi	r24, 0xFF	; 255
    1188:	9e 4f       	sbci	r25, 0xFE	; 254
    118a:	fc 01       	movw	r30, r24
    118c:	80 81       	ld	r24, Z
    118e:	91 81       	ldd	r25, Z+1	; 0x01
    1190:	90 93 0c 01 	sts	0x010C, r25
    1194:	80 93 0b 01 	sts	0x010B, r24
									maxRespPoints.lowestMax.position = maxRespPoints.initialPointer;
    1198:	80 91 0e 01 	lds	r24, 0x010E
    119c:	80 93 0d 01 	sts	0x010D, r24
								}
								maxRespPoints.initialPointer++; 
    11a0:	80 91 0e 01 	lds	r24, 0x010E
    11a4:	8f 5f       	subi	r24, 0xFF	; 255
    11a6:	80 93 0e 01 	sts	0x010E, r24
    11aa:	50 c0       	rjmp	.+160    	; 0x124c <main+0x55c>
							}
							else
							{
								if(recentRespMemory.points[2] > maxRespPoints.lowestMax.value)
    11ac:	20 91 b3 06 	lds	r18, 0x06B3
    11b0:	30 91 b4 06 	lds	r19, 0x06B4
    11b4:	80 91 0b 01 	lds	r24, 0x010B
    11b8:	90 91 0c 01 	lds	r25, 0x010C
    11bc:	82 17       	cp	r24, r18
    11be:	93 07       	cpc	r25, r19
    11c0:	08 f0       	brcs	.+2      	; 0x11c4 <main+0x4d4>
    11c2:	44 c0       	rjmp	.+136    	; 0x124c <main+0x55c>
								{
									maxRespPoints.points[maxRespPoints.lowestMax.position] = recentRespMemory.points[2];//replace lowest point with new one
    11c4:	80 91 0d 01 	lds	r24, 0x010D
    11c8:	88 2f       	mov	r24, r24
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	20 91 b3 06 	lds	r18, 0x06B3
    11d0:	30 91 b4 06 	lds	r19, 0x06B4
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	8f 5f       	subi	r24, 0xFF	; 255
    11da:	9e 4f       	sbci	r25, 0xFE	; 254
    11dc:	fc 01       	movw	r30, r24
    11de:	31 83       	std	Z+1, r19	; 0x01
    11e0:	20 83       	st	Z, r18
									maxRespPoints.lowestMax.position = 0x00;
    11e2:	10 92 0d 01 	sts	0x010D, r1
									maxRespPoints.lowestMax.value = 0x3FF;//clear these values to be reset in the loop following
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	93 e0       	ldi	r25, 0x03	; 3
    11ea:	90 93 0c 01 	sts	0x010C, r25
    11ee:	80 93 0b 01 	sts	0x010B, r24
									for(j = 4; j>= 0; j--)
    11f2:	84 e0       	ldi	r24, 0x04	; 4
    11f4:	8a 8b       	std	Y+18, r24	; 0x12
    11f6:	27 c0       	rjmp	.+78     	; 0x1246 <main+0x556>
									{
										if(maxRespPoints.points[j] < maxRespPoints.lowestMax.value)
    11f8:	8a 89       	ldd	r24, Y+18	; 0x12
    11fa:	99 27       	eor	r25, r25
    11fc:	87 fd       	sbrc	r24, 7
    11fe:	90 95       	com	r25
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	8f 5f       	subi	r24, 0xFF	; 255
    1206:	9e 4f       	sbci	r25, 0xFE	; 254
    1208:	fc 01       	movw	r30, r24
    120a:	20 81       	ld	r18, Z
    120c:	31 81       	ldd	r19, Z+1	; 0x01
    120e:	80 91 0b 01 	lds	r24, 0x010B
    1212:	90 91 0c 01 	lds	r25, 0x010C
    1216:	28 17       	cp	r18, r24
    1218:	39 07       	cpc	r19, r25
    121a:	90 f4       	brcc	.+36     	; 0x1240 <main+0x550>
										{
											maxRespPoints.lowestMax.value = maxRespPoints.points[j];//record lowest
    121c:	8a 89       	ldd	r24, Y+18	; 0x12
    121e:	99 27       	eor	r25, r25
    1220:	87 fd       	sbrc	r24, 7
    1222:	90 95       	com	r25
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	8f 5f       	subi	r24, 0xFF	; 255
    122a:	9e 4f       	sbci	r25, 0xFE	; 254
    122c:	fc 01       	movw	r30, r24
    122e:	80 81       	ld	r24, Z
    1230:	91 81       	ldd	r25, Z+1	; 0x01
    1232:	90 93 0c 01 	sts	0x010C, r25
    1236:	80 93 0b 01 	sts	0x010B, r24
											maxRespPoints.lowestMax.position = j;
    123a:	8a 89       	ldd	r24, Y+18	; 0x12
    123c:	80 93 0d 01 	sts	0x010D, r24
								if(recentRespMemory.points[2] > maxRespPoints.lowestMax.value)
								{
									maxRespPoints.points[maxRespPoints.lowestMax.position] = recentRespMemory.points[2];//replace lowest point with new one
									maxRespPoints.lowestMax.position = 0x00;
									maxRespPoints.lowestMax.value = 0x3FF;//clear these values to be reset in the loop following
									for(j = 4; j>= 0; j--)
    1240:	8a 89       	ldd	r24, Y+18	; 0x12
    1242:	81 50       	subi	r24, 0x01	; 1
    1244:	8a 8b       	std	Y+18, r24	; 0x12
    1246:	8a 89       	ldd	r24, Y+18	; 0x12
    1248:	88 23       	and	r24, r24
    124a:	b4 f6       	brge	.-84     	; 0x11f8 <main+0x508>
									
								}
							}
							
						}
						if(i >= 5 && (recentRespMemory.points[2] <= recentRespMemory.points[0] && recentRespMemory.points[2] <= recentRespMemory.points[1] && recentRespMemory.points[2] <= recentRespMemory.points[3] && recentRespMemory.points[2] <= recentRespMemory.points[4]))
    124c:	8d 85       	ldd	r24, Y+13	; 0x0d
    124e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1250:	85 30       	cpi	r24, 0x05	; 5
    1252:	91 05       	cpc	r25, r1
    1254:	08 f4       	brcc	.+2      	; 0x1258 <main+0x568>
    1256:	bc c0       	rjmp	.+376    	; 0x13d0 <main+0x6e0>
    1258:	20 91 b3 06 	lds	r18, 0x06B3
    125c:	30 91 b4 06 	lds	r19, 0x06B4
    1260:	80 91 af 06 	lds	r24, 0x06AF
    1264:	90 91 b0 06 	lds	r25, 0x06B0
    1268:	82 17       	cp	r24, r18
    126a:	93 07       	cpc	r25, r19
    126c:	08 f4       	brcc	.+2      	; 0x1270 <main+0x580>
    126e:	b0 c0       	rjmp	.+352    	; 0x13d0 <main+0x6e0>
    1270:	20 91 b3 06 	lds	r18, 0x06B3
    1274:	30 91 b4 06 	lds	r19, 0x06B4
    1278:	80 91 b1 06 	lds	r24, 0x06B1
    127c:	90 91 b2 06 	lds	r25, 0x06B2
    1280:	82 17       	cp	r24, r18
    1282:	93 07       	cpc	r25, r19
    1284:	08 f4       	brcc	.+2      	; 0x1288 <main+0x598>
    1286:	a4 c0       	rjmp	.+328    	; 0x13d0 <main+0x6e0>
    1288:	20 91 b3 06 	lds	r18, 0x06B3
    128c:	30 91 b4 06 	lds	r19, 0x06B4
    1290:	80 91 b5 06 	lds	r24, 0x06B5
    1294:	90 91 b6 06 	lds	r25, 0x06B6
    1298:	82 17       	cp	r24, r18
    129a:	93 07       	cpc	r25, r19
    129c:	08 f4       	brcc	.+2      	; 0x12a0 <main+0x5b0>
    129e:	98 c0       	rjmp	.+304    	; 0x13d0 <main+0x6e0>
    12a0:	20 91 b3 06 	lds	r18, 0x06B3
    12a4:	30 91 b4 06 	lds	r19, 0x06B4
    12a8:	80 91 b7 06 	lds	r24, 0x06B7
    12ac:	90 91 b8 06 	lds	r25, 0x06B8
    12b0:	82 17       	cp	r24, r18
    12b2:	93 07       	cpc	r25, r19
    12b4:	08 f4       	brcc	.+2      	; 0x12b8 <main+0x5c8>
    12b6:	8c c0       	rjmp	.+280    	; 0x13d0 <main+0x6e0>
						{
							if(minRespPoints.initialPointer < 5)
    12b8:	80 91 d0 06 	lds	r24, 0x06D0
    12bc:	85 30       	cpi	r24, 0x05	; 5
    12be:	d0 f5       	brcc	.+116    	; 0x1334 <main+0x644>
							{	
								minRespPoints.points[minRespPoints.initialPointer] = recentRespMemory.points[2];//store the point if we don't already have 5 points and increment the initializer
    12c0:	80 91 d0 06 	lds	r24, 0x06D0
    12c4:	88 2f       	mov	r24, r24
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	20 91 b3 06 	lds	r18, 0x06B3
    12cc:	30 91 b4 06 	lds	r19, 0x06B4
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	8d 53       	subi	r24, 0x3D	; 61
    12d6:	99 4f       	sbci	r25, 0xF9	; 249
    12d8:	fc 01       	movw	r30, r24
    12da:	31 83       	std	Z+1, r19	; 0x01
    12dc:	20 83       	st	Z, r18
								if(minRespPoints.points[minRespPoints.initialPointer] > minRespPoints.highestMin.value)
    12de:	80 91 d0 06 	lds	r24, 0x06D0
    12e2:	88 2f       	mov	r24, r24
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	8d 53       	subi	r24, 0x3D	; 61
    12ec:	99 4f       	sbci	r25, 0xF9	; 249
    12ee:	fc 01       	movw	r30, r24
    12f0:	20 81       	ld	r18, Z
    12f2:	31 81       	ldd	r19, Z+1	; 0x01
    12f4:	80 91 cd 06 	lds	r24, 0x06CD
    12f8:	90 91 ce 06 	lds	r25, 0x06CE
    12fc:	82 17       	cp	r24, r18
    12fe:	93 07       	cpc	r25, r19
    1300:	98 f4       	brcc	.+38     	; 0x1328 <main+0x638>
								{
									minRespPoints.highestMin.value = minRespPoints.points[minRespPoints.initialPointer];//remember the HIGHEST minimum so we have a quick comparison value for new local MIns when the first five points have come in
    1302:	80 91 d0 06 	lds	r24, 0x06D0
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	8d 53       	subi	r24, 0x3D	; 61
    1310:	99 4f       	sbci	r25, 0xF9	; 249
    1312:	fc 01       	movw	r30, r24
    1314:	80 81       	ld	r24, Z
    1316:	91 81       	ldd	r25, Z+1	; 0x01
    1318:	90 93 ce 06 	sts	0x06CE, r25
    131c:	80 93 cd 06 	sts	0x06CD, r24
									minRespPoints.highestMin.position = minRespPoints.initialPointer;								
    1320:	80 91 d0 06 	lds	r24, 0x06D0
    1324:	80 93 cf 06 	sts	0x06CF, r24
								}
								minRespPoints.initialPointer++;
    1328:	80 91 d0 06 	lds	r24, 0x06D0
    132c:	8f 5f       	subi	r24, 0xFF	; 255
    132e:	80 93 d0 06 	sts	0x06D0, r24
    1332:	4e c0       	rjmp	.+156    	; 0x13d0 <main+0x6e0>
							}
							else
							{
								if(recentRespMemory.points[2] < minRespPoints.highestMin.value)
    1334:	20 91 b3 06 	lds	r18, 0x06B3
    1338:	30 91 b4 06 	lds	r19, 0x06B4
    133c:	80 91 cd 06 	lds	r24, 0x06CD
    1340:	90 91 ce 06 	lds	r25, 0x06CE
    1344:	28 17       	cp	r18, r24
    1346:	39 07       	cpc	r19, r25
    1348:	08 f0       	brcs	.+2      	; 0x134c <main+0x65c>
    134a:	42 c0       	rjmp	.+132    	; 0x13d0 <main+0x6e0>
								{
									minRespPoints.points[minRespPoints.highestMin.position] = recentRespMemory.points[2];//replace lowest point with new one
    134c:	80 91 cf 06 	lds	r24, 0x06CF
    1350:	88 2f       	mov	r24, r24
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	20 91 b3 06 	lds	r18, 0x06B3
    1358:	30 91 b4 06 	lds	r19, 0x06B4
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	8d 53       	subi	r24, 0x3D	; 61
    1362:	99 4f       	sbci	r25, 0xF9	; 249
    1364:	fc 01       	movw	r30, r24
    1366:	31 83       	std	Z+1, r19	; 0x01
    1368:	20 83       	st	Z, r18
									minRespPoints.highestMin.position = 0x00;
    136a:	10 92 cf 06 	sts	0x06CF, r1
									minRespPoints.highestMin.value = 0x00;//clear these values to be reset in the loop following
    136e:	10 92 ce 06 	sts	0x06CE, r1
    1372:	10 92 cd 06 	sts	0x06CD, r1
									for(j = 4; j>= 0; j--)
    1376:	84 e0       	ldi	r24, 0x04	; 4
    1378:	8a 8b       	std	Y+18, r24	; 0x12
    137a:	27 c0       	rjmp	.+78     	; 0x13ca <main+0x6da>
									{
										if(minRespPoints.points[j] > minRespPoints.highestMin.value)
    137c:	8a 89       	ldd	r24, Y+18	; 0x12
    137e:	99 27       	eor	r25, r25
    1380:	87 fd       	sbrc	r24, 7
    1382:	90 95       	com	r25
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	8d 53       	subi	r24, 0x3D	; 61
    138a:	99 4f       	sbci	r25, 0xF9	; 249
    138c:	fc 01       	movw	r30, r24
    138e:	20 81       	ld	r18, Z
    1390:	31 81       	ldd	r19, Z+1	; 0x01
    1392:	80 91 cd 06 	lds	r24, 0x06CD
    1396:	90 91 ce 06 	lds	r25, 0x06CE
    139a:	82 17       	cp	r24, r18
    139c:	93 07       	cpc	r25, r19
    139e:	90 f4       	brcc	.+36     	; 0x13c4 <main+0x6d4>
										{
											minRespPoints.highestMin.value = minRespPoints.points[j];//record lowest
    13a0:	8a 89       	ldd	r24, Y+18	; 0x12
    13a2:	99 27       	eor	r25, r25
    13a4:	87 fd       	sbrc	r24, 7
    13a6:	90 95       	com	r25
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	8d 53       	subi	r24, 0x3D	; 61
    13ae:	99 4f       	sbci	r25, 0xF9	; 249
    13b0:	fc 01       	movw	r30, r24
    13b2:	80 81       	ld	r24, Z
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	90 93 ce 06 	sts	0x06CE, r25
    13ba:	80 93 cd 06 	sts	0x06CD, r24
											minRespPoints.highestMin.position = j;
    13be:	8a 89       	ldd	r24, Y+18	; 0x12
    13c0:	80 93 cf 06 	sts	0x06CF, r24
								if(recentRespMemory.points[2] < minRespPoints.highestMin.value)
								{
									minRespPoints.points[minRespPoints.highestMin.position] = recentRespMemory.points[2];//replace lowest point with new one
									minRespPoints.highestMin.position = 0x00;
									minRespPoints.highestMin.value = 0x00;//clear these values to be reset in the loop following
									for(j = 4; j>= 0; j--)
    13c4:	8a 89       	ldd	r24, Y+18	; 0x12
    13c6:	81 50       	subi	r24, 0x01	; 1
    13c8:	8a 8b       	std	Y+18, r24	; 0x12
    13ca:	8a 89       	ldd	r24, Y+18	; 0x12
    13cc:	88 23       	and	r24, r24
    13ce:	b4 f6       	brge	.-84     	; 0x137c <main+0x68c>
									}
									
								}
							};	
						}
						if(i >= 5 && (recentECGMemory.points[2]>=recentECGMemory.points[0]&&recentECGMemory.points[2]>=recentECGMemory.points[1]&&recentECGMemory.points[2]>=recentECGMemory.points[3]&&recentECGMemory.points[2]>=recentECGMemory.points[4]))
    13d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d4:	85 30       	cpi	r24, 0x05	; 5
    13d6:	91 05       	cpc	r25, r1
    13d8:	08 f4       	brcc	.+2      	; 0x13dc <main+0x6ec>
    13da:	be c0       	rjmp	.+380    	; 0x1558 <main+0x868>
    13dc:	20 91 bd 06 	lds	r18, 0x06BD
    13e0:	30 91 be 06 	lds	r19, 0x06BE
    13e4:	80 91 b9 06 	lds	r24, 0x06B9
    13e8:	90 91 ba 06 	lds	r25, 0x06BA
    13ec:	28 17       	cp	r18, r24
    13ee:	39 07       	cpc	r19, r25
    13f0:	08 f4       	brcc	.+2      	; 0x13f4 <main+0x704>
    13f2:	b2 c0       	rjmp	.+356    	; 0x1558 <main+0x868>
    13f4:	20 91 bd 06 	lds	r18, 0x06BD
    13f8:	30 91 be 06 	lds	r19, 0x06BE
    13fc:	80 91 bb 06 	lds	r24, 0x06BB
    1400:	90 91 bc 06 	lds	r25, 0x06BC
    1404:	28 17       	cp	r18, r24
    1406:	39 07       	cpc	r19, r25
    1408:	08 f4       	brcc	.+2      	; 0x140c <main+0x71c>
    140a:	a6 c0       	rjmp	.+332    	; 0x1558 <main+0x868>
    140c:	20 91 bd 06 	lds	r18, 0x06BD
    1410:	30 91 be 06 	lds	r19, 0x06BE
    1414:	80 91 bf 06 	lds	r24, 0x06BF
    1418:	90 91 c0 06 	lds	r25, 0x06C0
    141c:	28 17       	cp	r18, r24
    141e:	39 07       	cpc	r19, r25
    1420:	08 f4       	brcc	.+2      	; 0x1424 <main+0x734>
    1422:	9a c0       	rjmp	.+308    	; 0x1558 <main+0x868>
    1424:	20 91 bd 06 	lds	r18, 0x06BD
    1428:	30 91 be 06 	lds	r19, 0x06BE
    142c:	80 91 c1 06 	lds	r24, 0x06C1
    1430:	90 91 c2 06 	lds	r25, 0x06C2
    1434:	28 17       	cp	r18, r24
    1436:	39 07       	cpc	r19, r25
    1438:	08 f4       	brcc	.+2      	; 0x143c <main+0x74c>
    143a:	8e c0       	rjmp	.+284    	; 0x1558 <main+0x868>
						{
							if(maxECGPoints.initialPointer < 5)
    143c:	80 91 1c 01 	lds	r24, 0x011C
    1440:	85 30       	cpi	r24, 0x05	; 5
    1442:	d0 f5       	brcc	.+116    	; 0x14b8 <main+0x7c8>
							{
								maxECGPoints.points[maxECGPoints.initialPointer] = recentECGMemory.points[2];//store the point if we don't already have 5 points and increment the initializer
    1444:	80 91 1c 01 	lds	r24, 0x011C
    1448:	88 2f       	mov	r24, r24
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	20 91 bd 06 	lds	r18, 0x06BD
    1450:	30 91 be 06 	lds	r19, 0x06BE
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	81 5f       	subi	r24, 0xF1	; 241
    145a:	9e 4f       	sbci	r25, 0xFE	; 254
    145c:	fc 01       	movw	r30, r24
    145e:	31 83       	std	Z+1, r19	; 0x01
    1460:	20 83       	st	Z, r18
								if(maxECGPoints.points[maxECGPoints.initialPointer] < maxECGPoints.lowestMax.value)
    1462:	80 91 1c 01 	lds	r24, 0x011C
    1466:	88 2f       	mov	r24, r24
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	81 5f       	subi	r24, 0xF1	; 241
    1470:	9e 4f       	sbci	r25, 0xFE	; 254
    1472:	fc 01       	movw	r30, r24
    1474:	20 81       	ld	r18, Z
    1476:	31 81       	ldd	r19, Z+1	; 0x01
    1478:	80 91 19 01 	lds	r24, 0x0119
    147c:	90 91 1a 01 	lds	r25, 0x011A
    1480:	28 17       	cp	r18, r24
    1482:	39 07       	cpc	r19, r25
    1484:	98 f4       	brcc	.+38     	; 0x14ac <main+0x7bc>
								{
									maxECGPoints.lowestMax.value = maxECGPoints.points[maxECGPoints.initialPointer];//remember the LOWEST maximum so we have a quick comparison value for new local maxes when the first five points have come in
    1486:	80 91 1c 01 	lds	r24, 0x011C
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	81 5f       	subi	r24, 0xF1	; 241
    1494:	9e 4f       	sbci	r25, 0xFE	; 254
    1496:	fc 01       	movw	r30, r24
    1498:	80 81       	ld	r24, Z
    149a:	91 81       	ldd	r25, Z+1	; 0x01
    149c:	90 93 1a 01 	sts	0x011A, r25
    14a0:	80 93 19 01 	sts	0x0119, r24
									maxECGPoints.lowestMax.position = maxECGPoints.initialPointer;
    14a4:	80 91 1c 01 	lds	r24, 0x011C
    14a8:	80 93 1b 01 	sts	0x011B, r24
								}

								maxECGPoints.initialPointer++;
    14ac:	80 91 1c 01 	lds	r24, 0x011C
    14b0:	8f 5f       	subi	r24, 0xFF	; 255
    14b2:	80 93 1c 01 	sts	0x011C, r24
    14b6:	50 c0       	rjmp	.+160    	; 0x1558 <main+0x868>
							}
							else
							{	
								if(recentECGMemory.points[2] > maxECGPoints.lowestMax.value)
    14b8:	20 91 bd 06 	lds	r18, 0x06BD
    14bc:	30 91 be 06 	lds	r19, 0x06BE
    14c0:	80 91 19 01 	lds	r24, 0x0119
    14c4:	90 91 1a 01 	lds	r25, 0x011A
    14c8:	82 17       	cp	r24, r18
    14ca:	93 07       	cpc	r25, r19
    14cc:	08 f0       	brcs	.+2      	; 0x14d0 <main+0x7e0>
    14ce:	44 c0       	rjmp	.+136    	; 0x1558 <main+0x868>
								{
									maxECGPoints.points[maxECGPoints.lowestMax.position] = recentECGMemory.points[2];//replace lowest point with new one
    14d0:	80 91 1b 01 	lds	r24, 0x011B
    14d4:	88 2f       	mov	r24, r24
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	20 91 bd 06 	lds	r18, 0x06BD
    14dc:	30 91 be 06 	lds	r19, 0x06BE
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	81 5f       	subi	r24, 0xF1	; 241
    14e6:	9e 4f       	sbci	r25, 0xFE	; 254
    14e8:	fc 01       	movw	r30, r24
    14ea:	31 83       	std	Z+1, r19	; 0x01
    14ec:	20 83       	st	Z, r18
									maxECGPoints.lowestMax.position = 0x00;
    14ee:	10 92 1b 01 	sts	0x011B, r1
									maxECGPoints.lowestMax.value = 0x3FF;//clear these values to be reset in the loop following
    14f2:	8f ef       	ldi	r24, 0xFF	; 255
    14f4:	93 e0       	ldi	r25, 0x03	; 3
    14f6:	90 93 1a 01 	sts	0x011A, r25
    14fa:	80 93 19 01 	sts	0x0119, r24
									for(j = 4; j>= 0; j--)
    14fe:	84 e0       	ldi	r24, 0x04	; 4
    1500:	8a 8b       	std	Y+18, r24	; 0x12
    1502:	27 c0       	rjmp	.+78     	; 0x1552 <main+0x862>
									{
										if(maxECGPoints.points[j] < maxECGPoints.lowestMax.value)
    1504:	8a 89       	ldd	r24, Y+18	; 0x12
    1506:	99 27       	eor	r25, r25
    1508:	87 fd       	sbrc	r24, 7
    150a:	90 95       	com	r25
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	81 5f       	subi	r24, 0xF1	; 241
    1512:	9e 4f       	sbci	r25, 0xFE	; 254
    1514:	fc 01       	movw	r30, r24
    1516:	20 81       	ld	r18, Z
    1518:	31 81       	ldd	r19, Z+1	; 0x01
    151a:	80 91 19 01 	lds	r24, 0x0119
    151e:	90 91 1a 01 	lds	r25, 0x011A
    1522:	28 17       	cp	r18, r24
    1524:	39 07       	cpc	r19, r25
    1526:	90 f4       	brcc	.+36     	; 0x154c <main+0x85c>
										{
											maxECGPoints.lowestMax.value = maxECGPoints.points[j];//record lowest
    1528:	8a 89       	ldd	r24, Y+18	; 0x12
    152a:	99 27       	eor	r25, r25
    152c:	87 fd       	sbrc	r24, 7
    152e:	90 95       	com	r25
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	81 5f       	subi	r24, 0xF1	; 241
    1536:	9e 4f       	sbci	r25, 0xFE	; 254
    1538:	fc 01       	movw	r30, r24
    153a:	80 81       	ld	r24, Z
    153c:	91 81       	ldd	r25, Z+1	; 0x01
    153e:	90 93 1a 01 	sts	0x011A, r25
    1542:	80 93 19 01 	sts	0x0119, r24
											maxECGPoints.lowestMax.position = j;	
    1546:	8a 89       	ldd	r24, Y+18	; 0x12
    1548:	80 93 1b 01 	sts	0x011B, r24
								if(recentECGMemory.points[2] > maxECGPoints.lowestMax.value)
								{
									maxECGPoints.points[maxECGPoints.lowestMax.position] = recentECGMemory.points[2];//replace lowest point with new one
									maxECGPoints.lowestMax.position = 0x00;
									maxECGPoints.lowestMax.value = 0x3FF;//clear these values to be reset in the loop following
									for(j = 4; j>= 0; j--)
    154c:	8a 89       	ldd	r24, Y+18	; 0x12
    154e:	81 50       	subi	r24, 0x01	; 1
    1550:	8a 8b       	std	Y+18, r24	; 0x12
    1552:	8a 89       	ldd	r24, Y+18	; 0x12
    1554:	88 23       	and	r24, r24
    1556:	b4 f6       	brge	.-84     	; 0x1504 <main+0x814>
						}
						IncrementRingBufferTailPtr(ADCDataBufferTailPtr, MAXIMUM_ADC_DATA_POINTS, ADCDataBufferCount);
					}
		
				}
				for(i = 0;i<4500;)
    1558:	8d 85       	ldd	r24, Y+13	; 0x0d
    155a:	9e 85       	ldd	r25, Y+14	; 0x0e
    155c:	84 39       	cpi	r24, 0x94	; 148
    155e:	f1 e1       	ldi	r31, 0x11	; 17
    1560:	9f 07       	cpc	r25, r31
    1562:	08 f4       	brcc	.+2      	; 0x1566 <main+0x876>
    1564:	39 cd       	rjmp	.-1422   	; 0xfd8 <main+0x2e8>
								}
							}	
						}
					}
				}
				for(i=0;i<5;i++)
    1566:	1e 86       	std	Y+14, r1	; 0x0e
    1568:	1d 86       	std	Y+13, r1	; 0x0d
    156a:	32 c0       	rjmp	.+100    	; 0x15d0 <main+0x8e0>
				{
					expectedMinimumBreath += minRespPoints.points[i];
    156c:	8d 85       	ldd	r24, Y+13	; 0x0d
    156e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	8d 53       	subi	r24, 0x3D	; 61
    1576:	99 4f       	sbci	r25, 0xF9	; 249
    1578:	fc 01       	movw	r30, r24
    157a:	80 81       	ld	r24, Z
    157c:	91 81       	ldd	r25, Z+1	; 0x01
    157e:	2b 81       	ldd	r18, Y+3	; 0x03
    1580:	3c 81       	ldd	r19, Y+4	; 0x04
    1582:	82 0f       	add	r24, r18
    1584:	93 1f       	adc	r25, r19
    1586:	9c 83       	std	Y+4, r25	; 0x04
    1588:	8b 83       	std	Y+3, r24	; 0x03
					expectedMaximumBreath += maxRespPoints.points[i];
    158a:	8d 85       	ldd	r24, Y+13	; 0x0d
    158c:	9e 85       	ldd	r25, Y+14	; 0x0e
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	8f 5f       	subi	r24, 0xFF	; 255
    1594:	9e 4f       	sbci	r25, 0xFE	; 254
    1596:	fc 01       	movw	r30, r24
    1598:	80 81       	ld	r24, Z
    159a:	91 81       	ldd	r25, Z+1	; 0x01
    159c:	29 81       	ldd	r18, Y+1	; 0x01
    159e:	3a 81       	ldd	r19, Y+2	; 0x02
    15a0:	82 0f       	add	r24, r18
    15a2:	93 1f       	adc	r25, r19
    15a4:	9a 83       	std	Y+2, r25	; 0x02
    15a6:	89 83       	std	Y+1, r24	; 0x01
					expectedMaximumECG += maxECGPoints.points[i];
    15a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	81 5f       	subi	r24, 0xF1	; 241
    15b2:	9e 4f       	sbci	r25, 0xFE	; 254
    15b4:	fc 01       	movw	r30, r24
    15b6:	80 81       	ld	r24, Z
    15b8:	91 81       	ldd	r25, Z+1	; 0x01
    15ba:	2d 81       	ldd	r18, Y+5	; 0x05
    15bc:	3e 81       	ldd	r19, Y+6	; 0x06
    15be:	82 0f       	add	r24, r18
    15c0:	93 1f       	adc	r25, r19
    15c2:	9e 83       	std	Y+6, r25	; 0x06
    15c4:	8d 83       	std	Y+5, r24	; 0x05
								}
							}	
						}
					}
				}
				for(i=0;i<5;i++)
    15c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ca:	01 96       	adiw	r24, 0x01	; 1
    15cc:	9e 87       	std	Y+14, r25	; 0x0e
    15ce:	8d 87       	std	Y+13, r24	; 0x0d
    15d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d4:	85 30       	cpi	r24, 0x05	; 5
    15d6:	91 05       	cpc	r25, r1
    15d8:	48 f2       	brcs	.-110    	; 0x156c <main+0x87c>
					expectedMinimumBreath += minRespPoints.points[i];
					expectedMaximumBreath += maxRespPoints.points[i];
					expectedMaximumECG += maxECGPoints.points[i];
				}
					
				expectedMinimumBreath /= 5;//after this point, the max/min breath values have been calculated as an average of 5 points that were most maximum or minimum
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	9c 81       	ldd	r25, Y+4	; 0x04
    15de:	9c 01       	movw	r18, r24
    15e0:	ad ec       	ldi	r26, 0xCD	; 205
    15e2:	bc ec       	ldi	r27, 0xCC	; 204
    15e4:	0e 94 97 10 	call	0x212e	; 0x212e <__umulhisi3>
    15e8:	96 95       	lsr	r25
    15ea:	87 95       	ror	r24
    15ec:	96 95       	lsr	r25
    15ee:	87 95       	ror	r24
    15f0:	9c 83       	std	Y+4, r25	; 0x04
    15f2:	8b 83       	std	Y+3, r24	; 0x03
				expectedMaximumBreath /= 5;
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	9a 81       	ldd	r25, Y+2	; 0x02
    15f8:	9c 01       	movw	r18, r24
    15fa:	ad ec       	ldi	r26, 0xCD	; 205
    15fc:	bc ec       	ldi	r27, 0xCC	; 204
    15fe:	0e 94 97 10 	call	0x212e	; 0x212e <__umulhisi3>
    1602:	96 95       	lsr	r25
    1604:	87 95       	ror	r24
    1606:	96 95       	lsr	r25
    1608:	87 95       	ror	r24
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	89 83       	std	Y+1, r24	; 0x01
				expectedMaximumECG /= 5;
    160e:	8d 81       	ldd	r24, Y+5	; 0x05
    1610:	9e 81       	ldd	r25, Y+6	; 0x06
    1612:	9c 01       	movw	r18, r24
    1614:	ad ec       	ldi	r26, 0xCD	; 205
    1616:	bc ec       	ldi	r27, 0xCC	; 204
    1618:	0e 94 97 10 	call	0x212e	; 0x212e <__umulhisi3>
    161c:	96 95       	lsr	r25
    161e:	87 95       	ror	r24
    1620:	96 95       	lsr	r25
    1622:	87 95       	ror	r24
    1624:	9e 83       	std	Y+6, r25	; 0x06
    1626:	8d 83       	std	Y+5, r24	; 0x05
				ECGThreshold = (expectedMaximumECG*PERCENTAGE_CALIBRATED_ECG_THRESHOLD)/100;
    1628:	2d 81       	ldd	r18, Y+5	; 0x05
    162a:	3e 81       	ldd	r19, Y+6	; 0x06
    162c:	41 e2       	ldi	r20, 0x21	; 33
    162e:	42 9f       	mul	r20, r18
    1630:	c0 01       	movw	r24, r0
    1632:	43 9f       	mul	r20, r19
    1634:	90 0d       	add	r25, r0
    1636:	11 24       	eor	r1, r1
    1638:	96 95       	lsr	r25
    163a:	87 95       	ror	r24
    163c:	96 95       	lsr	r25
    163e:	87 95       	ror	r24
    1640:	9c 01       	movw	r18, r24
    1642:	ab e7       	ldi	r26, 0x7B	; 123
    1644:	b4 e1       	ldi	r27, 0x14	; 20
    1646:	0e 94 97 10 	call	0x212e	; 0x212e <__umulhisi3>
    164a:	96 95       	lsr	r25
    164c:	87 95       	ror	r24
    164e:	9a 87       	std	Y+10, r25	; 0x0a
    1650:	89 87       	std	Y+9, r24	; 0x09
				breathThreshold = ((expectedMaximumBreath-expectedMinimumBreath)*PERCENTAGE_CALIBRATED_BREATH_THRESHOLD)/100; //TODO: determine why calc thresh is lower than expected when signal has large amplitude
    1652:	29 81       	ldd	r18, Y+1	; 0x01
    1654:	3a 81       	ldd	r19, Y+2	; 0x02
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	28 1b       	sub	r18, r24
    165c:	39 0b       	sbc	r19, r25
    165e:	4b e4       	ldi	r20, 0x4B	; 75
    1660:	42 9f       	mul	r20, r18
    1662:	c0 01       	movw	r24, r0
    1664:	43 9f       	mul	r20, r19
    1666:	90 0d       	add	r25, r0
    1668:	11 24       	eor	r1, r1
    166a:	96 95       	lsr	r25
    166c:	87 95       	ror	r24
    166e:	96 95       	lsr	r25
    1670:	87 95       	ror	r24
    1672:	9c 01       	movw	r18, r24
    1674:	ab e7       	ldi	r26, 0x7B	; 123
    1676:	b4 e1       	ldi	r27, 0x14	; 20
    1678:	0e 94 97 10 	call	0x212e	; 0x212e <__umulhisi3>
    167c:	96 95       	lsr	r25
    167e:	87 95       	ror	r24
    1680:	98 87       	std	Y+8, r25	; 0x08
    1682:	8f 83       	std	Y+7, r24	; 0x07
				printf("t%u\n%u\n", breathThreshold, ECGThreshold);
    1684:	8a 85       	ldd	r24, Y+10	; 0x0a
    1686:	8f 93       	push	r24
    1688:	89 85       	ldd	r24, Y+9	; 0x09
    168a:	8f 93       	push	r24
    168c:	88 85       	ldd	r24, Y+8	; 0x08
    168e:	8f 93       	push	r24
    1690:	8f 81       	ldd	r24, Y+7	; 0x07
    1692:	8f 93       	push	r24
    1694:	8f e5       	ldi	r24, 0x5F	; 95
    1696:	91 e0       	ldi	r25, 0x01	; 1
    1698:	89 2f       	mov	r24, r25
    169a:	8f 93       	push	r24
    169c:	8f e5       	ldi	r24, 0x5F	; 95
    169e:	91 e0       	ldi	r25, 0x01	; 1
    16a0:	8f 93       	push	r24
    16a2:	0e 94 ae 10 	call	0x215c	; 0x215c <printf>
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
			}

			
			break;
    16b2:	69 c2       	rjmp	.+1234   	; 0x1b86 <main+0xe96>
						uint8_t all;
					}flags;
				}respBuffer = {.maximum = {.location = 0, .value = 0}, .minimum = {.location = 0, .value = 0xFFFF}, .flags = {.flag = {.extremeUpdated = False, .resetMaxMin = True}}}, 
				 ECGBuffer = {.maximum = {.location = 0, .value = 0}, .minimum = {.location = 0, .value = 0}, .flags = {.flag = {.extremeUpdated = False, .resetMaxMin = True}}};	
				//SendString("Samp", 4);
				stopBlinkStatusLED();
    16b4:	0e 94 a0 01 	call	0x340	; 0x340 <stopBlinkStatusLED>
				turnOnStatusLED();
    16b8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <turnOnStatusLED>
				uint8_t breaths = 0;
    16bc:	1c 8a       	std	Y+20, r1	; 0x14
				uint8_t pCount = 0;
    16be:	1b 8a       	std	Y+19, r1	; 0x13
				while(ADCDataBufferCount)
    16c0:	51 c2       	rjmp	.+1186   	; 0x1b64 <main+0xe74>
				{
					//Add newest value to buffers
					respBuffer.newPoint = ADCDataBuffer[ADCDataBufferTailPtr];
    16c2:	80 91 8d 06 	lds	r24, 0x068D
    16c6:	88 2f       	mov	r24, r24
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	83 5d       	subi	r24, 0xD3	; 211
    16d0:	98 4f       	sbci	r25, 0xF8	; 248
    16d2:	fc 01       	movw	r30, r24
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	90 93 1e 01 	sts	0x011E, r25
    16dc:	80 93 1d 01 	sts	0x011D, r24
					IncrementRingBufferTailPtr(ADCDataBufferTailPtr, MAXIMUM_ADC_DATA_POINTS, ADCDataBufferCount);
    16e0:	80 91 8f 06 	lds	r24, 0x068F
    16e4:	88 23       	and	r24, r24
    16e6:	81 f0       	breq	.+32     	; 0x1708 <main+0xa18>
    16e8:	80 91 8d 06 	lds	r24, 0x068D
    16ec:	8f 5f       	subi	r24, 0xFF	; 255
    16ee:	80 93 8d 06 	sts	0x068D, r24
    16f2:	80 91 8f 06 	lds	r24, 0x068F
    16f6:	81 50       	subi	r24, 0x01	; 1
    16f8:	80 93 8f 06 	sts	0x068F, r24
    16fc:	80 91 8d 06 	lds	r24, 0x068D
    1700:	8e 31       	cpi	r24, 0x1E	; 30
    1702:	10 f0       	brcs	.+4      	; 0x1708 <main+0xa18>
    1704:	10 92 8d 06 	sts	0x068D, r1
					ECGBuffer.newPoint = respBuffer.newPoint;
    1708:	80 91 1d 01 	lds	r24, 0x011D
    170c:	90 91 1e 01 	lds	r25, 0x011E
    1710:	90 93 29 01 	sts	0x0129, r25
    1714:	80 93 28 01 	sts	0x0128, r24
					
					//Filter Data
					RespFilt(&respBuffer.newPoint);					
    1718:	8d e1       	ldi	r24, 0x1D	; 29
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <RespFilt>
					ECGFilt(&ECGBuffer.newPoint);
    1720:	88 e2       	ldi	r24, 0x28	; 40
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	0e 94 9c 05 	call	0xb38	; 0xb38 <ECGFilt>
					
					if(pCount == 2)
    1728:	8b 89       	ldd	r24, Y+19	; 0x13
    172a:	82 30       	cpi	r24, 0x02	; 2
    172c:	09 f0       	breq	.+2      	; 0x1730 <main+0xa40>
    172e:	49 c0       	rjmp	.+146    	; 0x17c2 <main+0xad2>
					{
						printf("r%u\n%u\n%u\n",respBuffer.newPoint,ECGBuffer.newPoint, ADCDataBuffer[ADCDataBufferTailPtr]);
    1730:	80 91 8d 06 	lds	r24, 0x068D
    1734:	88 2f       	mov	r24, r24
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	83 5d       	subi	r24, 0xD3	; 211
    173e:	98 4f       	sbci	r25, 0xF8	; 248
    1740:	fc 01       	movw	r30, r24
    1742:	40 81       	ld	r20, Z
    1744:	51 81       	ldd	r21, Z+1	; 0x01
    1746:	20 91 28 01 	lds	r18, 0x0128
    174a:	30 91 29 01 	lds	r19, 0x0129
    174e:	80 91 1d 01 	lds	r24, 0x011D
    1752:	90 91 1e 01 	lds	r25, 0x011E
    1756:	65 2f       	mov	r22, r21
    1758:	6f 93       	push	r22
    175a:	4f 93       	push	r20
    175c:	43 2f       	mov	r20, r19
    175e:	4f 93       	push	r20
    1760:	2f 93       	push	r18
    1762:	29 2f       	mov	r18, r25
    1764:	2f 93       	push	r18
    1766:	8f 93       	push	r24
    1768:	87 e6       	ldi	r24, 0x67	; 103
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	89 2f       	mov	r24, r25
    176e:	8f 93       	push	r24
    1770:	87 e6       	ldi	r24, 0x67	; 103
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	8f 93       	push	r24
    1776:	0e 94 ae 10 	call	0x215c	; 0x215c <printf>
    177a:	4d b7       	in	r20, 0x3d	; 61
    177c:	5e b7       	in	r21, 0x3e	; 62
    177e:	48 5f       	subi	r20, 0xF8	; 248
    1780:	5f 4f       	sbci	r21, 0xFF	; 255
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
						printf("mh%u\n",vitalCounts.heartRate.sum >> 4);
    178c:	80 91 f6 06 	lds	r24, 0x06F6
    1790:	90 91 f7 06 	lds	r25, 0x06F7
    1794:	92 95       	swap	r25
    1796:	82 95       	swap	r24
    1798:	8f 70       	andi	r24, 0x0F	; 15
    179a:	89 27       	eor	r24, r25
    179c:	9f 70       	andi	r25, 0x0F	; 15
    179e:	89 27       	eor	r24, r25
    17a0:	29 2f       	mov	r18, r25
    17a2:	2f 93       	push	r18
    17a4:	8f 93       	push	r24
    17a6:	82 e7       	ldi	r24, 0x72	; 114
    17a8:	91 e0       	ldi	r25, 0x01	; 1
    17aa:	89 2f       	mov	r24, r25
    17ac:	8f 93       	push	r24
    17ae:	82 e7       	ldi	r24, 0x72	; 114
    17b0:	91 e0       	ldi	r25, 0x01	; 1
    17b2:	8f 93       	push	r24
    17b4:	0e 94 ae 10 	call	0x215c	; 0x215c <printf>
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
						

						pCount = 0;
    17c0:	1b 8a       	std	Y+19, r1	; 0x13
					}
					pCount++;
    17c2:	8b 89       	ldd	r24, Y+19	; 0x13
    17c4:	8f 5f       	subi	r24, 0xFF	; 255
    17c6:	8b 8b       	std	Y+19, r24	; 0x13
					/******
					*Following is the breath detection code
					*
					*s
					******/		
					respBuffer.maximum.location++;	
    17c8:	80 91 1f 01 	lds	r24, 0x011F
    17cc:	90 91 20 01 	lds	r25, 0x0120
    17d0:	01 96       	adiw	r24, 0x01	; 1
    17d2:	90 93 20 01 	sts	0x0120, r25
    17d6:	80 93 1f 01 	sts	0x011F, r24
					respBuffer.minimum.location++;						
    17da:	80 91 23 01 	lds	r24, 0x0123
    17de:	90 91 24 01 	lds	r25, 0x0124
    17e2:	01 96       	adiw	r24, 0x01	; 1
    17e4:	90 93 24 01 	sts	0x0124, r25
    17e8:	80 93 23 01 	sts	0x0123, r24
					if(respBuffer.maximum.location >= SAMPLE_POINTS_TO_REMEMBER)//if one of our max/mins has expired, we need to reset it here to the current point
    17ec:	80 91 1f 01 	lds	r24, 0x011F
    17f0:	90 91 20 01 	lds	r25, 0x0120
    17f4:	80 3b       	cpi	r24, 0xB0	; 176
    17f6:	54 e0       	ldi	r21, 0x04	; 4
    17f8:	95 07       	cpc	r25, r21
    17fa:	88 f0       	brcs	.+34     	; 0x181e <main+0xb2e>
					{
						respBuffer.maximum.value = respBuffer.newPoint;
    17fc:	80 91 1d 01 	lds	r24, 0x011D
    1800:	90 91 1e 01 	lds	r25, 0x011E
    1804:	90 93 22 01 	sts	0x0122, r25
    1808:	80 93 21 01 	sts	0x0121, r24
						respBuffer.maximum.location = 0;
    180c:	10 92 20 01 	sts	0x0120, r1
    1810:	10 92 1f 01 	sts	0x011F, r1
						respBuffer.flags.flag.extremeUpdated = True;
    1814:	80 91 27 01 	lds	r24, 0x0127
    1818:	81 60       	ori	r24, 0x01	; 1
    181a:	80 93 27 01 	sts	0x0127, r24
					}
					if(respBuffer.minimum.location >= SAMPLE_POINTS_TO_REMEMBER)
    181e:	80 91 23 01 	lds	r24, 0x0123
    1822:	90 91 24 01 	lds	r25, 0x0124
    1826:	80 3b       	cpi	r24, 0xB0	; 176
    1828:	e4 e0       	ldi	r30, 0x04	; 4
    182a:	9e 07       	cpc	r25, r30
    182c:	88 f0       	brcs	.+34     	; 0x1850 <main+0xb60>
					{
						respBuffer.minimum.value = respBuffer.newPoint;
    182e:	80 91 1d 01 	lds	r24, 0x011D
    1832:	90 91 1e 01 	lds	r25, 0x011E
    1836:	90 93 26 01 	sts	0x0126, r25
    183a:	80 93 25 01 	sts	0x0125, r24
						respBuffer.minimum.location = 0;
    183e:	10 92 24 01 	sts	0x0124, r1
    1842:	10 92 23 01 	sts	0x0123, r1
						respBuffer.flags.flag.extremeUpdated = True;
    1846:	80 91 27 01 	lds	r24, 0x0127
    184a:	81 60       	ori	r24, 0x01	; 1
    184c:	80 93 27 01 	sts	0x0127, r24
					}
						
					if(respBuffer.flags.flag.resetMaxMin)
    1850:	80 91 27 01 	lds	r24, 0x0127
    1854:	82 70       	andi	r24, 0x02	; 2
    1856:	88 23       	and	r24, r24
    1858:	e9 f0       	breq	.+58     	; 0x1894 <main+0xba4>
					{
						respBuffer.maximum.value = respBuffer.newPoint;
    185a:	80 91 1d 01 	lds	r24, 0x011D
    185e:	90 91 1e 01 	lds	r25, 0x011E
    1862:	90 93 22 01 	sts	0x0122, r25
    1866:	80 93 21 01 	sts	0x0121, r24
						respBuffer.minimum.value = respBuffer.newPoint;
    186a:	80 91 1d 01 	lds	r24, 0x011D
    186e:	90 91 1e 01 	lds	r25, 0x011E
    1872:	90 93 26 01 	sts	0x0126, r25
    1876:	80 93 25 01 	sts	0x0125, r24
						respBuffer.maximum.location = 0;
    187a:	10 92 20 01 	sts	0x0120, r1
    187e:	10 92 1f 01 	sts	0x011F, r1
						respBuffer.minimum.location = 0;
    1882:	10 92 24 01 	sts	0x0124, r1
    1886:	10 92 23 01 	sts	0x0123, r1
						respBuffer.flags.flag.resetMaxMin = False;				
    188a:	80 91 27 01 	lds	r24, 0x0127
    188e:	8d 7f       	andi	r24, 0xFD	; 253
    1890:	80 93 27 01 	sts	0x0127, r24
					}
					if(respBuffer.newPoint > respBuffer.maximum.value)//replace max/min with new point if it exceeds
    1894:	20 91 1d 01 	lds	r18, 0x011D
    1898:	30 91 1e 01 	lds	r19, 0x011E
    189c:	80 91 21 01 	lds	r24, 0x0121
    18a0:	90 91 22 01 	lds	r25, 0x0122
    18a4:	82 17       	cp	r24, r18
    18a6:	93 07       	cpc	r25, r19
    18a8:	88 f4       	brcc	.+34     	; 0x18cc <main+0xbdc>
					{
						respBuffer.maximum.value = respBuffer.newPoint;
    18aa:	80 91 1d 01 	lds	r24, 0x011D
    18ae:	90 91 1e 01 	lds	r25, 0x011E
    18b2:	90 93 22 01 	sts	0x0122, r25
    18b6:	80 93 21 01 	sts	0x0121, r24
						respBuffer.maximum.location = 0;
    18ba:	10 92 20 01 	sts	0x0120, r1
    18be:	10 92 1f 01 	sts	0x011F, r1
						respBuffer.flags.flag.extremeUpdated = True;
    18c2:	80 91 27 01 	lds	r24, 0x0127
    18c6:	81 60       	ori	r24, 0x01	; 1
    18c8:	80 93 27 01 	sts	0x0127, r24
					}
					if(respBuffer.newPoint < respBuffer.minimum.value)
    18cc:	20 91 1d 01 	lds	r18, 0x011D
    18d0:	30 91 1e 01 	lds	r19, 0x011E
    18d4:	80 91 25 01 	lds	r24, 0x0125
    18d8:	90 91 26 01 	lds	r25, 0x0126
    18dc:	28 17       	cp	r18, r24
    18de:	39 07       	cpc	r19, r25
    18e0:	88 f4       	brcc	.+34     	; 0x1904 <main+0xc14>
					{
						respBuffer.minimum.value = respBuffer.newPoint;
    18e2:	80 91 1d 01 	lds	r24, 0x011D
    18e6:	90 91 1e 01 	lds	r25, 0x011E
    18ea:	90 93 26 01 	sts	0x0126, r25
    18ee:	80 93 25 01 	sts	0x0125, r24
						respBuffer.minimum.location = 0;
    18f2:	10 92 24 01 	sts	0x0124, r1
    18f6:	10 92 23 01 	sts	0x0123, r1
						respBuffer.flags.flag.extremeUpdated = True;
    18fa:	80 91 27 01 	lds	r24, 0x0127
    18fe:	81 60       	ori	r24, 0x01	; 1
    1900:	80 93 27 01 	sts	0x0127, r24
					}
					if(respBuffer.flags.flag.extremeUpdated)//max or min was changed, calculate if we now reach threshold
    1904:	80 91 27 01 	lds	r24, 0x0127
    1908:	81 70       	andi	r24, 0x01	; 1
    190a:	88 23       	and	r24, r24
    190c:	e9 f0       	breq	.+58     	; 0x1948 <main+0xc58>
					{
						if(respBuffer.maximum.value - respBuffer.minimum.value >= breathThreshold) //TODO: initialize threshold above
    190e:	20 91 21 01 	lds	r18, 0x0121
    1912:	30 91 22 01 	lds	r19, 0x0122
    1916:	80 91 25 01 	lds	r24, 0x0125
    191a:	90 91 26 01 	lds	r25, 0x0126
    191e:	28 1b       	sub	r18, r24
    1920:	39 0b       	sbc	r19, r25
    1922:	8f 81       	ldd	r24, Y+7	; 0x07
    1924:	98 85       	ldd	r25, Y+8	; 0x08
    1926:	28 17       	cp	r18, r24
    1928:	39 07       	cpc	r19, r25
    192a:	48 f0       	brcs	.+18     	; 0x193e <main+0xc4e>
						{
							//we have a full breath here, reset and clear prior data
							respBuffer.flags.flag.resetMaxMin = True;
    192c:	80 91 27 01 	lds	r24, 0x0127
    1930:	82 60       	ori	r24, 0x02	; 2
    1932:	80 93 27 01 	sts	0x0127, r24
							vitalCounts.apneaCount = 0;//reset counter to 0
    1936:	10 92 d2 06 	sts	0x06D2, r1
    193a:	10 92 d1 06 	sts	0x06D1, r1
						}
						
						respBuffer.flags.flag.extremeUpdated = False;
    193e:	80 91 27 01 	lds	r24, 0x0127
    1942:	8e 7f       	andi	r24, 0xFE	; 254
    1944:	80 93 27 01 	sts	0x0127, r24
					}
					vitalCounts.apneaCount++;
    1948:	80 91 d1 06 	lds	r24, 0x06D1
    194c:	90 91 d2 06 	lds	r25, 0x06D2
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	90 93 d2 06 	sts	0x06D2, r25
    1956:	80 93 d1 06 	sts	0x06D1, r24
					printf("mb%u\n", vitalCounts.apneaCount);
    195a:	80 91 d1 06 	lds	r24, 0x06D1
    195e:	90 91 d2 06 	lds	r25, 0x06D2
    1962:	29 2f       	mov	r18, r25
    1964:	2f 93       	push	r18
    1966:	8f 93       	push	r24
    1968:	88 e7       	ldi	r24, 0x78	; 120
    196a:	91 e0       	ldi	r25, 0x01	; 1
    196c:	89 2f       	mov	r24, r25
    196e:	8f 93       	push	r24
    1970:	88 e7       	ldi	r24, 0x78	; 120
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	8f 93       	push	r24
    1976:	0e 94 ae 10 	call	0x215c	; 0x215c <printf>
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
					if(vitalCounts.apneaCount >= respTimeThresh*300)
    1982:	20 91 d1 06 	lds	r18, 0x06D1
    1986:	30 91 d2 06 	lds	r19, 0x06D2
    198a:	80 91 00 01 	lds	r24, 0x0100
    198e:	68 2f       	mov	r22, r24
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	4c e2       	ldi	r20, 0x2C	; 44
    1994:	51 e0       	ldi	r21, 0x01	; 1
    1996:	64 9f       	mul	r22, r20
    1998:	c0 01       	movw	r24, r0
    199a:	65 9f       	mul	r22, r21
    199c:	90 0d       	add	r25, r0
    199e:	74 9f       	mul	r23, r20
    19a0:	90 0d       	add	r25, r0
    19a2:	11 24       	eor	r1, r1
    19a4:	28 17       	cp	r18, r24
    19a6:	39 07       	cpc	r19, r25
    19a8:	40 f0       	brcs	.+16     	; 0x19ba <main+0xcca>
					{
						startBlinkRespLED();
    19aa:	0e 94 ab 01 	call	0x356	; 0x356 <startBlinkRespLED>
						startAlarm();
    19ae:	0e 94 cf 01 	call	0x39e	; 0x39e <startAlarm>
						mainState = Alarm;
    19b2:	84 e0       	ldi	r24, 0x04	; 4
    19b4:	80 93 8c 06 	sts	0x068C, r24
						break;		
    19b8:	db c0       	rjmp	.+438    	; 0x1b70 <main+0xe80>
					}
					/*
					* following is the heartbeat detection code:
					*/
					if((ECGBuffer.newPoint >= ECGThreshold))
    19ba:	20 91 28 01 	lds	r18, 0x0128
    19be:	30 91 29 01 	lds	r19, 0x0129
    19c2:	89 85       	ldd	r24, Y+9	; 0x09
    19c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c6:	28 17       	cp	r18, r24
    19c8:	39 07       	cpc	r19, r25
    19ca:	08 f4       	brcc	.+2      	; 0x19ce <main+0xcde>
    19cc:	ad c0       	rjmp	.+346    	; 0x1b28 <main+0xe38>
					{	
						
						if(vitalCounts.heartBeatCount)
    19ce:	80 91 d3 06 	lds	r24, 0x06D3
    19d2:	90 91 d4 06 	lds	r25, 0x06D4
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	09 f4       	brne	.+2      	; 0x19dc <main+0xcec>
    19da:	c4 c0       	rjmp	.+392    	; 0x1b64 <main+0xe74>
						{//if this evaluates true this is the first trigger for this heartbeat
							
							//vitalCounts.heartRate.circularPointer++;
							//vitalCounts.heartRate.beatPeriod[vitalCounts.heartRate.circularPointer] = vitalCounts.heartBeatCount;
							IncrementRingBufferPtr(vitalCounts.heartRate.circularPointer, 16);
    19dc:	80 91 f5 06 	lds	r24, 0x06F5
    19e0:	8f 5f       	subi	r24, 0xFF	; 255
    19e2:	80 93 f5 06 	sts	0x06F5, r24
    19e6:	80 91 f5 06 	lds	r24, 0x06F5
    19ea:	80 31       	cpi	r24, 0x10	; 16
    19ec:	10 f0       	brcs	.+4      	; 0x19f2 <main+0xd02>
    19ee:	10 92 f5 06 	sts	0x06F5, r1
							if(vitalCounts.heartRate.totalSamples == 16) 
    19f2:	80 91 f8 06 	lds	r24, 0x06F8
    19f6:	80 31       	cpi	r24, 0x10	; 16
    19f8:	09 f0       	breq	.+2      	; 0x19fc <main+0xd0c>
    19fa:	67 c0       	rjmp	.+206    	; 0x1aca <main+0xdda>
							{
								if(vitalCounts.heartBeatCount > 30)//prevents ''double-beats'' from dropping mean
    19fc:	80 91 d3 06 	lds	r24, 0x06D3
    1a00:	90 91 d4 06 	lds	r25, 0x06D4
    1a04:	8f 31       	cpi	r24, 0x1F	; 31
    1a06:	91 05       	cpc	r25, r1
    1a08:	08 f4       	brcc	.+2      	; 0x1a0c <main+0xd1c>
    1a0a:	89 c0       	rjmp	.+274    	; 0x1b1e <main+0xe2e>
								{	
									
		
									vitalCounts.heartRate.sum -= (vitalCounts.heartRate.beatPeriod[vitalCounts.heartRate.circularPointer] + 30); //30 to account for QRS width
    1a0c:	20 91 f6 06 	lds	r18, 0x06F6
    1a10:	30 91 f7 06 	lds	r19, 0x06F7
    1a14:	80 91 f5 06 	lds	r24, 0x06F5
    1a18:	88 2f       	mov	r24, r24
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	02 96       	adiw	r24, 0x02	; 2
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	8f 52       	subi	r24, 0x2F	; 47
    1a24:	99 4f       	sbci	r25, 0xF9	; 249
    1a26:	fc 01       	movw	r30, r24
    1a28:	80 81       	ld	r24, Z
    1a2a:	91 81       	ldd	r25, Z+1	; 0x01
    1a2c:	a9 01       	movw	r20, r18
    1a2e:	48 1b       	sub	r20, r24
    1a30:	59 0b       	sbc	r21, r25
    1a32:	ca 01       	movw	r24, r20
    1a34:	4e 97       	sbiw	r24, 0x1e	; 30
    1a36:	90 93 f7 06 	sts	0x06F7, r25
    1a3a:	80 93 f6 06 	sts	0x06F6, r24
									vitalCounts.heartRate.sum += (vitalCounts.heartBeatCount+30);//30 to account for QRS width
    1a3e:	20 91 f6 06 	lds	r18, 0x06F6
    1a42:	30 91 f7 06 	lds	r19, 0x06F7
    1a46:	80 91 d3 06 	lds	r24, 0x06D3
    1a4a:	90 91 d4 06 	lds	r25, 0x06D4
    1a4e:	82 0f       	add	r24, r18
    1a50:	93 1f       	adc	r25, r19
    1a52:	4e 96       	adiw	r24, 0x1e	; 30
    1a54:	90 93 f7 06 	sts	0x06F7, r25
    1a58:	80 93 f6 06 	sts	0x06F6, r24
									vitalCounts.heartRate.beatPeriod[vitalCounts.heartRate.circularPointer] = vitalCounts.heartBeatCount;
    1a5c:	80 91 f5 06 	lds	r24, 0x06F5
    1a60:	88 2f       	mov	r24, r24
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	20 91 d3 06 	lds	r18, 0x06D3
    1a68:	30 91 d4 06 	lds	r19, 0x06D4
    1a6c:	02 96       	adiw	r24, 0x02	; 2
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	8f 52       	subi	r24, 0x2F	; 47
    1a74:	99 4f       	sbci	r25, 0xF9	; 249
    1a76:	fc 01       	movw	r30, r24
    1a78:	31 83       	std	Z+1, r19	; 0x01
    1a7a:	20 83       	st	Z, r18

									if((vitalCounts.heartRate.sum >> 4)>= SLOW_HEART_RATE_PERIOD)
    1a7c:	80 91 f6 06 	lds	r24, 0x06F6
    1a80:	90 91 f7 06 	lds	r25, 0x06F7
    1a84:	92 95       	swap	r25
    1a86:	82 95       	swap	r24
    1a88:	8f 70       	andi	r24, 0x0F	; 15
    1a8a:	89 27       	eor	r24, r25
    1a8c:	9f 70       	andi	r25, 0x0F	; 15
    1a8e:	89 27       	eor	r24, r25
    1a90:	82 3c       	cpi	r24, 0xC2	; 194
    1a92:	f1 e0       	ldi	r31, 0x01	; 1
    1a94:	9f 07       	cpc	r25, r31
    1a96:	b0 f0       	brcs	.+44     	; 0x1ac4 <main+0xdd4>
									{
										vitalCounts.heartRate.totalSlowHeartBeats++;
    1a98:	80 91 f9 06 	lds	r24, 0x06F9
    1a9c:	8f 5f       	subi	r24, 0xFF	; 255
    1a9e:	80 93 f9 06 	sts	0x06F9, r24
										if(vitalCounts.heartRate.totalSlowHeartBeats >= NUMBER_OF_TOO_SLOW_HEARTBEATS)
    1aa2:	80 91 f9 06 	lds	r24, 0x06F9
    1aa6:	85 30       	cpi	r24, 0x05	; 5
    1aa8:	d0 f1       	brcs	.+116    	; 0x1b1e <main+0xe2e>

										{
											SendString("Low HB", 6);
    1aaa:	66 e0       	ldi	r22, 0x06	; 6
    1aac:	8e e7       	ldi	r24, 0x7E	; 126
    1aae:	91 e0       	ldi	r25, 0x01	; 1
    1ab0:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <SendString>
											startBlinkECGLED();
    1ab4:	0e 94 bd 01 	call	0x37a	; 0x37a <startBlinkECGLED>
											startAlarm();
    1ab8:	0e 94 cf 01 	call	0x39e	; 0x39e <startAlarm>
											mainState = Alarm;
    1abc:	84 e0       	ldi	r24, 0x04	; 4
    1abe:	80 93 8c 06 	sts	0x068C, r24
											break;//leave this state immediately, do not wait to crunch rest of ADC values
    1ac2:	56 c0       	rjmp	.+172    	; 0x1b70 <main+0xe80>
										}	
									
									}
									else
									{
										vitalCounts.heartRate.totalSlowHeartBeats = 0;
    1ac4:	10 92 f9 06 	sts	0x06F9, r1
    1ac8:	2a c0       	rjmp	.+84     	; 0x1b1e <main+0xe2e>
									}
								}
							}
							else
							{
								if(vitalCounts.heartBeatCount > 100)
    1aca:	80 91 d3 06 	lds	r24, 0x06D3
    1ace:	90 91 d4 06 	lds	r25, 0x06D4
    1ad2:	85 36       	cpi	r24, 0x65	; 101
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	18 f1       	brcs	.+70     	; 0x1b1e <main+0xe2e>
								{
									vitalCounts.heartRate.beatPeriod[vitalCounts.heartRate.circularPointer] = vitalCounts.heartBeatCount;
    1ad8:	80 91 f5 06 	lds	r24, 0x06F5
    1adc:	88 2f       	mov	r24, r24
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	20 91 d3 06 	lds	r18, 0x06D3
    1ae4:	30 91 d4 06 	lds	r19, 0x06D4
    1ae8:	02 96       	adiw	r24, 0x02	; 2
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	8f 52       	subi	r24, 0x2F	; 47
    1af0:	99 4f       	sbci	r25, 0xF9	; 249
    1af2:	fc 01       	movw	r30, r24
    1af4:	31 83       	std	Z+1, r19	; 0x01
    1af6:	20 83       	st	Z, r18
									vitalCounts.heartRate.sum += vitalCounts.heartBeatCount;
    1af8:	20 91 f6 06 	lds	r18, 0x06F6
    1afc:	30 91 f7 06 	lds	r19, 0x06F7
    1b00:	80 91 d3 06 	lds	r24, 0x06D3
    1b04:	90 91 d4 06 	lds	r25, 0x06D4
    1b08:	82 0f       	add	r24, r18
    1b0a:	93 1f       	adc	r25, r19
    1b0c:	90 93 f7 06 	sts	0x06F7, r25
    1b10:	80 93 f6 06 	sts	0x06F6, r24
									vitalCounts.heartRate.totalSamples++;									
    1b14:	80 91 f8 06 	lds	r24, 0x06F8
    1b18:	8f 5f       	subi	r24, 0xFF	; 255
    1b1a:	80 93 f8 06 	sts	0x06F8, r24
								}

							}
							vitalCounts.heartBeatCount = 0;
    1b1e:	10 92 d4 06 	sts	0x06D4, r1
    1b22:	10 92 d3 06 	sts	0x06D3, r1
    1b26:	1e c0       	rjmp	.+60     	; 0x1b64 <main+0xe74>
							//we already counted this peak we are just not back below the threshold yet
						}
					}
					else
					{
						vitalCounts.heartBeatCount++;
    1b28:	80 91 d3 06 	lds	r24, 0x06D3
    1b2c:	90 91 d4 06 	lds	r25, 0x06D4
    1b30:	01 96       	adiw	r24, 0x01	; 1
    1b32:	90 93 d4 06 	sts	0x06D4, r25
    1b36:	80 93 d3 06 	sts	0x06D3, r24
						
						if(vitalCounts.heartBeatCount >= NO_HEART_RATE_PERIOD)
    1b3a:	80 91 d3 06 	lds	r24, 0x06D3
    1b3e:	90 91 d4 06 	lds	r25, 0x06D4
    1b42:	8c 3d       	cpi	r24, 0xDC	; 220
    1b44:	f5 e0       	ldi	r31, 0x05	; 5
    1b46:	9f 07       	cpc	r25, r31
    1b48:	68 f0       	brcs	.+26     	; 0x1b64 <main+0xe74>
						{
							SendString("No HB", 5);
    1b4a:	65 e0       	ldi	r22, 0x05	; 5
    1b4c:	85 e8       	ldi	r24, 0x85	; 133
    1b4e:	91 e0       	ldi	r25, 0x01	; 1
    1b50:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <SendString>
							turnOnECGLED();
    1b54:	0e 94 0a 01 	call	0x214	; 0x214 <turnOnECGLED>
							startAlarm();
    1b58:	0e 94 cf 01 	call	0x39e	; 0x39e <startAlarm>
							mainState = Alarm;
    1b5c:	84 e0       	ldi	r24, 0x04	; 4
    1b5e:	80 93 8c 06 	sts	0x068C, r24
							break;			
    1b62:	06 c0       	rjmp	.+12     	; 0x1b70 <main+0xe80>
				//SendString("Samp", 4);
				stopBlinkStatusLED();
				turnOnStatusLED();
				uint8_t breaths = 0;
				uint8_t pCount = 0;
				while(ADCDataBufferCount)
    1b64:	80 91 8f 06 	lds	r24, 0x068F
    1b68:	88 23       	and	r24, r24
    1b6a:	09 f0       	breq	.+2      	; 0x1b6e <main+0xe7e>
    1b6c:	aa cd       	rjmp	.-1196   	; 0x16c2 <main+0x9d2>
					}
														
				}
					
			}
			break;
    1b6e:	0b c0       	rjmp	.+22     	; 0x1b86 <main+0xe96>
    1b70:	0a c0       	rjmp	.+20     	; 0x1b86 <main+0xe96>
			
			case Alarm:
			{
				//
				SendString("Alarm", 5);
    1b72:	65 e0       	ldi	r22, 0x05	; 5
    1b74:	8b e8       	ldi	r24, 0x8B	; 139
    1b76:	91 e0       	ldi	r25, 0x01	; 1
    1b78:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <SendString>
			}
			break;
    1b7c:	04 c0       	rjmp	.+8      	; 0x1b86 <main+0xe96>
			
			default://error, should always have a state, decide how to handle this
			{
				mainState = Init;//we should set off a different alarm here instead of simply starting over
    1b7e:	10 92 8c 06 	sts	0x068C, r1
			}
			break;
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <main+0xe96>
					SendDecimalNumber(respTimeThresh);
					turnOnAnalog();
					//TODO: freeze switch position here
				}
			}			
			break;
    1b84:	00 00       	nop
			}
			break;
		}
		
	
    }
    1b86:	c4 c8       	rjmp	.-3704   	; 0xd10 <main+0x20>

00001b88 <MasterInitialize>:

//fuses left to default for now pending crystal availability
#include "Init.h"

void MasterInitialize()//called on startup, will call the port setup etc. as well as find the appropriate setting for the pot
{
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
	cli();//disable interrupts
    1b90:	f8 94       	cli
	
	ADCInit();
    1b92:	0e 94 c3 00 	call	0x186	; 0x186 <ADCInit>
	
	PortInit();//these init values (clock and port) are taken directly from our old code
    1b96:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <PortInit>
	
	ClockInit();
    1b9a:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <ClockInit>
	
	SerialInit();
    1b9e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SerialInit>
		
	sei();//enable interrupts
    1ba2:	78 94       	sei
	
	return;
    1ba4:	00 00       	nop
}
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	08 95       	ret

00001bac <PortInit>:

void PortInit()
{
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
	PORTB = (0<<PORTB7)|(0<<PORTB6)|(0<<PORTB5)|(0<<PORTB4)|(0<<PORTB3)|(1<<PORTB2)|(0<<PORTB1)|(0<<PORTB0); //GPIO
    1bb4:	85 e2       	ldi	r24, 0x25	; 37
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	24 e0       	ldi	r18, 0x04	; 4
    1bba:	fc 01       	movw	r30, r24
    1bbc:	20 83       	st	Z, r18
	DDRB = (1<<DDB7)|(1<<DDB6)|(1<<DDB5)|(1<<DDB4)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
    1bbe:	84 e2       	ldi	r24, 0x24	; 36
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	2f ef       	ldi	r18, 0xFF	; 255
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	20 83       	st	Z, r18
		
	PORTC = (0<<PORTC6)|(0<<PORTC5)|(0<<PORTC4)|(0<<PORTC3)|(0<<PORTC2)|(0<<PORTC1)|(0<<PORTC0); //no portc.7
    1bc8:	88 e2       	ldi	r24, 0x28	; 40
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	fc 01       	movw	r30, r24
    1bce:	10 82       	st	Z, r1
	DDRC = (0<<DDC6)|(1<<DDC5)|(1<<DDC4)|(1<<DDC3)|(0<<DDC2)|(0<<DDC1)|(0<<DDC0);
    1bd0:	87 e2       	ldi	r24, 0x27	; 39
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	28 e3       	ldi	r18, 0x38	; 56
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	20 83       	st	Z, r18
		
	PORTD = (0<<PORTD7)|(0<<PORTD6)|(0<<PORTD5)|(0<<PORTD4)|(0<<PORTD3)|(0<<PORTD2)|(0<<PORTD1)|(0<<PORTD0);
    1bda:	8b e2       	ldi	r24, 0x2B	; 43
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	fc 01       	movw	r30, r24
    1be0:	10 82       	st	Z, r1
	DDRD = (1<<DDD7)|(1<<DDD6)|(1<<DDD5)|(1<<DDD4)|(1<<DDD3)|(0<<DDD2)|(1<<DDD1)|(0<<DDD0);
    1be2:	8a e2       	ldi	r24, 0x2A	; 42
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	2a ef       	ldi	r18, 0xFA	; 250
    1be8:	fc 01       	movw	r30, r24
    1bea:	20 83       	st	Z, r18
	
	EICRA = (0<<ISC11)|(0<<ISC10)|(1<<ISC01)|(1<<ISC00);//rising edge interrupt on int0
    1bec:	89 e6       	ldi	r24, 0x69	; 105
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	23 e0       	ldi	r18, 0x03	; 3
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);//enable Interrupt 0
    1bf6:	8d e3       	ldi	r24, 0x3D	; 61
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	21 e0       	ldi	r18, 0x01	; 1
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	20 83       	st	Z, r18
	PCICR = 0x00;
    1c00:	88 e6       	ldi	r24, 0x68	; 104
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	fc 01       	movw	r30, r24
    1c06:	10 82       	st	Z, r1
	
	return;
    1c08:	00 00       	nop
}
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	08 95       	ret

00001c10 <ClockInit>:

void ClockInit()
{
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
	// Clock value: 62.500 kHz
	// Mode: CTC top=OCR0A
	// OC0A output: Disconnected
	// OC0B output: Disconnected
	// Timer Period: 3.344 ms
	TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (1<<WGM01) | (0<<WGM00);
    1c18:	84 e4       	ldi	r24, 0x44	; 68
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	22 e0       	ldi	r18, 0x02	; 2
    1c1e:	fc 01       	movw	r30, r24
    1c20:	20 83       	st	Z, r18
	TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00); //Disabled at startup->Enagled in ADCStartRead()
    1c22:	85 e4       	ldi	r24, 0x45	; 69
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	fc 01       	movw	r30, r24
    1c28:	10 82       	st	Z, r1
	TCNT0=0x00;
    1c2a:	86 e4       	ldi	r24, 0x46	; 70
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	fc 01       	movw	r30, r24
    1c30:	10 82       	st	Z, r1
	OCR0A=0xD0;
    1c32:	87 e4       	ldi	r24, 0x47	; 71
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	20 ed       	ldi	r18, 0xD0	; 208
    1c38:	fc 01       	movw	r30, r24
    1c3a:	20 83       	st	Z, r18
	OCR0B=0x00;
    1c3c:	88 e4       	ldi	r24, 0x48	; 72
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	fc 01       	movw	r30, r24
    1c42:	10 82       	st	Z, r1
	// Timer Period: 1 s
	// Timer1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
    1c44:	80 e8       	ldi	r24, 0x80	; 128
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	fc 01       	movw	r30, r24
    1c4a:	10 82       	st	Z, r1
	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
    1c4c:	81 e8       	ldi	r24, 0x81	; 129
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	2c e0       	ldi	r18, 0x0C	; 12
    1c52:	fc 01       	movw	r30, r24
    1c54:	20 83       	st	Z, r18
	TCNT1H=0x00;
    1c56:	85 e8       	ldi	r24, 0x85	; 133
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	10 82       	st	Z, r1
	TCNT1L=0x00;
    1c5e:	84 e8       	ldi	r24, 0x84	; 132
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	fc 01       	movw	r30, r24
    1c64:	10 82       	st	Z, r1
	ICR1H=0x00;
    1c66:	87 e8       	ldi	r24, 0x87	; 135
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	10 82       	st	Z, r1
	ICR1L=0x00;
    1c6e:	86 e8       	ldi	r24, 0x86	; 134
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	fc 01       	movw	r30, r24
    1c74:	10 82       	st	Z, r1
	OCR1AH=0xF4;
    1c76:	89 e8       	ldi	r24, 0x89	; 137
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	24 ef       	ldi	r18, 0xF4	; 244
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	20 83       	st	Z, r18
	OCR1AL=0x24;
    1c80:	88 e8       	ldi	r24, 0x88	; 136
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	24 e2       	ldi	r18, 0x24	; 36
    1c86:	fc 01       	movw	r30, r24
    1c88:	20 83       	st	Z, r18
	OCR1BH=0x00;
    1c8a:	8b e8       	ldi	r24, 0x8B	; 139
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	fc 01       	movw	r30, r24
    1c90:	10 82       	st	Z, r1
	OCR1BL=0x00;
    1c92:	8a e8       	ldi	r24, 0x8A	; 138
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	fc 01       	movw	r30, r24
    1c98:	10 82       	st	Z, r1
	
	// Timer/Counter 1 Interrupt(s) initialization
	TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (1<<OCIE1A) | (0<<TOIE1);
    1c9a:	8f e6       	ldi	r24, 0x6F	; 111
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	22 e0       	ldi	r18, 0x02	; 2
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	20 83       	st	Z, r18
	
	TIMSK1 = (1<<OCIE1A);//20Hz interrupt enabled
	
	TIMSK2 = 0x00;
*/
	return;
    1ca4:	00 00       	nop
}
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	08 95       	ret

00001cac <IncreaseGain>:
#include "Pot_HAL.h"

void IncreaseGain(uint8_t amount)
{
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <IncreaseGain+0x6>
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i;
	SELECT_INCREMENT;
    1cb8:	8b e2       	ldi	r24, 0x2B	; 43
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	2b e2       	ldi	r18, 0x2B	; 43
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	f9 01       	movw	r30, r18
    1cc2:	20 81       	ld	r18, Z
    1cc4:	20 68       	ori	r18, 0x80	; 128
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	20 83       	st	Z, r18
	for(i=amount;i>0;i--)
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    1cce:	17 c0       	rjmp	.+46     	; 0x1cfe <IncreaseGain+0x52>
	{
		INCREMENT_POT;
    1cd0:	8b e2       	ldi	r24, 0x2B	; 43
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	2b e2       	ldi	r18, 0x2B	; 43
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	f9 01       	movw	r30, r18
    1cda:	30 81       	ld	r19, Z
    1cdc:	20 e4       	ldi	r18, 0x40	; 64
    1cde:	23 27       	eor	r18, r19
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	20 83       	st	Z, r18
    1ce4:	8b e2       	ldi	r24, 0x2B	; 43
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	2b e2       	ldi	r18, 0x2B	; 43
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	f9 01       	movw	r30, r18
    1cee:	30 81       	ld	r19, Z
    1cf0:	20 e4       	ldi	r18, 0x40	; 64
    1cf2:	23 27       	eor	r18, r19
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	20 83       	st	Z, r18

void IncreaseGain(uint8_t amount)
{
	uint8_t i;
	SELECT_INCREMENT;
	for(i=amount;i>0;i--)
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	81 50       	subi	r24, 0x01	; 1
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	88 23       	and	r24, r24
    1d02:	31 f7       	brne	.-52     	; 0x1cd0 <IncreaseGain+0x24>
	{
		INCREMENT_POT;
	}
	return;
    1d04:	00 00       	nop
}
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	08 95       	ret

00001d10 <DecreaseGain>:

void DecreaseGain(uint8_t amount)
{
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <DecreaseGain+0x6>
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i;
	SELECT_DECREMENT;
    1d1c:	8b e2       	ldi	r24, 0x2B	; 43
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	2b e2       	ldi	r18, 0x2B	; 43
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	f9 01       	movw	r30, r18
    1d26:	20 81       	ld	r18, Z
    1d28:	2f 77       	andi	r18, 0x7F	; 127
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	20 83       	st	Z, r18
	for(i=amount;i>0;i--)
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	17 c0       	rjmp	.+46     	; 0x1d62 <DecreaseGain+0x52>
	{
		INCREMENT_POT;
    1d34:	8b e2       	ldi	r24, 0x2B	; 43
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	2b e2       	ldi	r18, 0x2B	; 43
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	f9 01       	movw	r30, r18
    1d3e:	30 81       	ld	r19, Z
    1d40:	20 e4       	ldi	r18, 0x40	; 64
    1d42:	23 27       	eor	r18, r19
    1d44:	fc 01       	movw	r30, r24
    1d46:	20 83       	st	Z, r18
    1d48:	8b e2       	ldi	r24, 0x2B	; 43
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	2b e2       	ldi	r18, 0x2B	; 43
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	f9 01       	movw	r30, r18
    1d52:	30 81       	ld	r19, Z
    1d54:	20 e4       	ldi	r18, 0x40	; 64
    1d56:	23 27       	eor	r18, r19
    1d58:	fc 01       	movw	r30, r24
    1d5a:	20 83       	st	Z, r18

void DecreaseGain(uint8_t amount)
{
	uint8_t i;
	SELECT_DECREMENT;
	for(i=amount;i>0;i--)
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	81 50       	subi	r24, 0x01	; 1
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	88 23       	and	r24, r24
    1d66:	31 f7       	brne	.-52     	; 0x1d34 <DecreaseGain+0x24>
	{
		INCREMENT_POT;
	}
	return;
    1d68:	00 00       	nop
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	08 95       	ret

00001d74 <DeselectPot>:

void DeselectPot()
{
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
	
	DESELECT_POT;
    1d7c:	8b e2       	ldi	r24, 0x2B	; 43
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	2b e2       	ldi	r18, 0x2B	; 43
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	f9 01       	movw	r30, r18
    1d86:	20 81       	ld	r18, Z
    1d88:	20 62       	ori	r18, 0x20	; 32
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	20 83       	st	Z, r18
	return;
    1d8e:	00 00       	nop
}
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	08 95       	ret

00001d96 <SelectPot>:

void SelectPot()
{
    1d96:	cf 93       	push	r28
    1d98:	df 93       	push	r29
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
	SELECT_POT;
    1d9e:	8b e2       	ldi	r24, 0x2B	; 43
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	2b e2       	ldi	r18, 0x2B	; 43
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	f9 01       	movw	r30, r18
    1da8:	20 81       	ld	r18, Z
    1daa:	2f 7d       	andi	r18, 0xDF	; 223
    1dac:	fc 01       	movw	r30, r24
    1dae:	20 83       	st	Z, r18
	return;	
    1db0:	00 00       	nop
}
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	08 95       	ret

00001db8 <SerialInit>:
#include "Serial_HAL.h"


	
void SerialInit()
{
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
	//no parity
	#define F_OSC		16000000
	#define BAUD		115200
	#define UBBR_VALUE	16//(uint16_t)(F_OSC/(8*BAUD) - 1)	//page179
	//for information on USART, see pages 197 - 200 of the data sheet
	UBRR0H = (uint8_t)((UBBR_VALUE)>>8);
    1dc0:	85 ec       	ldi	r24, 0xC5	; 197
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	10 82       	st	Z, r1
	UBRR0L = (uint8_t)(UBBR_VALUE);
    1dc8:	84 ec       	ldi	r24, 0xC4	; 196
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	20 e1       	ldi	r18, 0x10	; 16
    1dce:	fc 01       	movw	r30, r24
    1dd0:	20 83       	st	Z, r18
	
	UCSR0A = (1<<U2X0);
    1dd2:	80 ec       	ldi	r24, 0xC0	; 192
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	22 e0       	ldi	r18, 0x02	; 2
    1dd8:	fc 01       	movw	r30, r24
    1dda:	20 83       	st	Z, r18
	UCSR0B = (1<<RXCIE0)|(1<<TXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    1ddc:	81 ec       	ldi	r24, 0xC1	; 193
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	28 ed       	ldi	r18, 0xD8	; 216
    1de2:	fc 01       	movw	r30, r24
    1de4:	20 83       	st	Z, r18
	stdout = &mystdout;
    1de6:	83 e3       	ldi	r24, 0x33	; 51
    1de8:	91 e0       	ldi	r25, 0x01	; 1
    1dea:	90 93 6c 07 	sts	0x076C, r25
    1dee:	80 93 6b 07 	sts	0x076B, r24
	//UCSR0C default values select what we want 
	
	return;
    1df2:	00 00       	nop
}
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	08 95       	ret

00001dfa <LoadChar>:
boolean LoadChar(uint8_t character)
{
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <LoadChar+0x6>
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	8a 83       	std	Y+2, r24	; 0x02
	boolean retVal = True;//set false if an error occurs
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	89 83       	std	Y+1, r24	; 0x01
	
	if(uartTxBufferCount < UART_TX_BUFF_LENGTH)
    1e0a:	80 91 92 06 	lds	r24, 0x0692
    1e0e:	89 31       	cpi	r24, 0x19	; 25
    1e10:	f0 f4       	brcc	.+60     	; 0x1e4e <LoadChar+0x54>
	{
		uartTxBuff[uartTxBufferHeadPtr] = character;
    1e12:	80 91 90 06 	lds	r24, 0x0690
    1e16:	88 2f       	mov	r24, r24
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	85 50       	subi	r24, 0x05	; 5
    1e1c:	99 4f       	sbci	r25, 0xF9	; 249
    1e1e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e20:	fc 01       	movw	r30, r24
    1e22:	20 83       	st	Z, r18
		IncrementRingBufferHeadPtr(uartTxBufferHeadPtr, UART_TX_BUFF_LENGTH, uartTxBufferCount);
    1e24:	80 91 92 06 	lds	r24, 0x0692
    1e28:	89 31       	cpi	r24, 0x19	; 25
    1e2a:	90 f4       	brcc	.+36     	; 0x1e50 <LoadChar+0x56>
    1e2c:	80 91 90 06 	lds	r24, 0x0690
    1e30:	8f 5f       	subi	r24, 0xFF	; 255
    1e32:	80 93 90 06 	sts	0x0690, r24
    1e36:	80 91 92 06 	lds	r24, 0x0692
    1e3a:	8f 5f       	subi	r24, 0xFF	; 255
    1e3c:	80 93 92 06 	sts	0x0692, r24
    1e40:	80 91 90 06 	lds	r24, 0x0690
    1e44:	89 31       	cpi	r24, 0x19	; 25
    1e46:	20 f0       	brcs	.+8      	; 0x1e50 <LoadChar+0x56>
    1e48:	10 92 90 06 	sts	0x0690, r1
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <LoadChar+0x56>
	}
	else //buffer full, do not overflow
	{
		retVal = False;
    1e4e:	19 82       	std	Y+1, r1	; 0x01
	}
	return retVal;
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	08 95       	ret

00001e5c <SendString>:
	}
	return retVal;
}

void SendString(char str[], uint8_t length)
{
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <SendString+0x6>
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <SendString+0x8>
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	9b 83       	std	Y+3, r25	; 0x03
    1e6a:	8a 83       	std	Y+2, r24	; 0x02
    1e6c:	6c 83       	std	Y+4, r22	; 0x04
	int8_t i;

	LoadChar('\n');
    1e6e:	8a e0       	ldi	r24, 0x0A	; 10
    1e70:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LoadChar>
	LoadChar('\r');
    1e74:	8d e0       	ldi	r24, 0x0D	; 13
    1e76:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LoadChar>
	for(i=0; i<length; i++)
    1e7a:	19 82       	std	Y+1, r1	; 0x01
    1e7c:	11 c0       	rjmp	.+34     	; 0x1ea0 <SendString+0x44>
	{
		if(!LoadChar(str[i]))
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	99 27       	eor	r25, r25
    1e82:	87 fd       	sbrc	r24, 7
    1e84:	90 95       	com	r25
    1e86:	2a 81       	ldd	r18, Y+2	; 0x02
    1e88:	3b 81       	ldd	r19, Y+3	; 0x03
    1e8a:	82 0f       	add	r24, r18
    1e8c:	93 1f       	adc	r25, r19
    1e8e:	fc 01       	movw	r30, r24
    1e90:	80 81       	ld	r24, Z
    1e92:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LoadChar>
    1e96:	88 23       	and	r24, r24
    1e98:	79 f0       	breq	.+30     	; 0x1eb8 <SendString+0x5c>
{
	int8_t i;

	LoadChar('\n');
	LoadChar('\r');
	for(i=0; i<length; i++)
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	8f 5f       	subi	r24, 0xFF	; 255
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	33 27       	eor	r19, r19
    1ea6:	27 fd       	sbrc	r18, 7
    1ea8:	30 95       	com	r19
    1eaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	28 17       	cp	r18, r24
    1eb2:	39 07       	cpc	r19, r25
    1eb4:	24 f3       	brlt	.-56     	; 0x1e7e <SendString+0x22>
    1eb6:	01 c0       	rjmp	.+2      	; 0x1eba <SendString+0x5e>
	{
		if(!LoadChar(str[i]))
		{
			break;//buffer too full
    1eb8:	00 00       	nop
		}
	}
	StartTx();
    1eba:	0e 94 2f 10 	call	0x205e	; 0x205e <StartTx>
	return;
    1ebe:	00 00       	nop
}
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	df 91       	pop	r29
    1eca:	cf 91       	pop	r28
    1ecc:	08 95       	ret

00001ece <SendDecimalNumber>:


void SendDecimalNumber(uint16_t num)
{
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	60 97       	sbiw	r28, 0x10	; 16
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	98 8b       	std	Y+16, r25	; 0x10
    1ee4:	8f 87       	std	Y+15, r24	; 0x0f
	const uint8_t decimalConversion[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
    1ee6:	8a e0       	ldi	r24, 0x0A	; 10
    1ee8:	e1 e9       	ldi	r30, 0x91	; 145
    1eea:	f1 e0       	ldi	r31, 0x01	; 1
    1eec:	de 01       	movw	r26, r28
    1eee:	15 96       	adiw	r26, 0x05	; 5
    1ef0:	01 90       	ld	r0, Z+
    1ef2:	0d 92       	st	X+, r0
    1ef4:	8a 95       	dec	r24
    1ef6:	e1 f7       	brne	.-8      	; 0x1ef0 <SendDecimalNumber+0x22>
	uint8_t hundreds;
	uint8_t tens;
	uint8_t ones;
	
	
	thousands = num/1000;
    1ef8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1efa:	98 89       	ldd	r25, Y+16	; 0x10
    1efc:	96 95       	lsr	r25
    1efe:	87 95       	ror	r24
    1f00:	96 95       	lsr	r25
    1f02:	87 95       	ror	r24
    1f04:	96 95       	lsr	r25
    1f06:	87 95       	ror	r24
    1f08:	9c 01       	movw	r18, r24
    1f0a:	a5 ec       	ldi	r26, 0xC5	; 197
    1f0c:	b0 e2       	ldi	r27, 0x20	; 32
    1f0e:	0e 94 97 10 	call	0x212e	; 0x212e <__umulhisi3>
    1f12:	92 95       	swap	r25
    1f14:	82 95       	swap	r24
    1f16:	8f 70       	andi	r24, 0x0F	; 15
    1f18:	89 27       	eor	r24, r25
    1f1a:	9f 70       	andi	r25, 0x0F	; 15
    1f1c:	89 27       	eor	r24, r25
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	hundreds = (num-(thousands*1000))/100;
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	48 2f       	mov	r20, r24
    1f24:	50 e0       	ldi	r21, 0x00	; 0
    1f26:	28 e1       	ldi	r18, 0x18	; 24
    1f28:	3c ef       	ldi	r19, 0xFC	; 252
    1f2a:	42 9f       	mul	r20, r18
    1f2c:	c0 01       	movw	r24, r0
    1f2e:	43 9f       	mul	r20, r19
    1f30:	90 0d       	add	r25, r0
    1f32:	52 9f       	mul	r21, r18
    1f34:	90 0d       	add	r25, r0
    1f36:	11 24       	eor	r1, r1
    1f38:	9c 01       	movw	r18, r24
    1f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3c:	98 89       	ldd	r25, Y+16	; 0x10
    1f3e:	82 0f       	add	r24, r18
    1f40:	93 1f       	adc	r25, r19
    1f42:	96 95       	lsr	r25
    1f44:	87 95       	ror	r24
    1f46:	96 95       	lsr	r25
    1f48:	87 95       	ror	r24
    1f4a:	9c 01       	movw	r18, r24
    1f4c:	ab e7       	ldi	r26, 0x7B	; 123
    1f4e:	b4 e1       	ldi	r27, 0x14	; 20
    1f50:	0e 94 97 10 	call	0x212e	; 0x212e <__umulhisi3>
    1f54:	96 95       	lsr	r25
    1f56:	87 95       	ror	r24
    1f58:	8a 83       	std	Y+2, r24	; 0x02
	tens = (num -(thousands*1000)-(hundreds*100))/10;
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	48 2f       	mov	r20, r24
    1f5e:	50 e0       	ldi	r21, 0x00	; 0
    1f60:	28 e1       	ldi	r18, 0x18	; 24
    1f62:	3c ef       	ldi	r19, 0xFC	; 252
    1f64:	42 9f       	mul	r20, r18
    1f66:	c0 01       	movw	r24, r0
    1f68:	43 9f       	mul	r20, r19
    1f6a:	90 0d       	add	r25, r0
    1f6c:	52 9f       	mul	r21, r18
    1f6e:	90 0d       	add	r25, r0
    1f70:	11 24       	eor	r1, r1
    1f72:	9c 01       	movw	r18, r24
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	48 2f       	mov	r20, r24
    1f78:	50 e0       	ldi	r21, 0x00	; 0
    1f7a:	6c e9       	ldi	r22, 0x9C	; 156
    1f7c:	64 03       	mulsu	r22, r20
    1f7e:	c0 01       	movw	r24, r0
    1f80:	65 9f       	mul	r22, r21
    1f82:	90 0d       	add	r25, r0
    1f84:	11 24       	eor	r1, r1
    1f86:	28 0f       	add	r18, r24
    1f88:	39 1f       	adc	r19, r25
    1f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f8c:	98 89       	ldd	r25, Y+16	; 0x10
    1f8e:	82 0f       	add	r24, r18
    1f90:	93 1f       	adc	r25, r19
    1f92:	9c 01       	movw	r18, r24
    1f94:	ad ec       	ldi	r26, 0xCD	; 205
    1f96:	bc ec       	ldi	r27, 0xCC	; 204
    1f98:	0e 94 97 10 	call	0x212e	; 0x212e <__umulhisi3>
    1f9c:	96 95       	lsr	r25
    1f9e:	87 95       	ror	r24
    1fa0:	96 95       	lsr	r25
    1fa2:	87 95       	ror	r24
    1fa4:	96 95       	lsr	r25
    1fa6:	87 95       	ror	r24
    1fa8:	8b 83       	std	Y+3, r24	; 0x03
	ones = num - thousands*1000 - hundreds*100 - tens*10;
    1faa:	99 81       	ldd	r25, Y+1	; 0x01
    1fac:	88 e1       	ldi	r24, 0x18	; 24
    1fae:	98 9f       	mul	r25, r24
    1fb0:	90 2d       	mov	r25, r0
    1fb2:	11 24       	eor	r1, r1
    1fb4:	2a 81       	ldd	r18, Y+2	; 0x02
    1fb6:	8c e9       	ldi	r24, 0x9C	; 156
    1fb8:	28 9f       	mul	r18, r24
    1fba:	80 2d       	mov	r24, r0
    1fbc:	11 24       	eor	r1, r1
    1fbe:	98 0f       	add	r25, r24
    1fc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc2:	98 0f       	add	r25, r24
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	88 0f       	add	r24, r24
    1fc8:	28 2f       	mov	r18, r24
    1fca:	22 0f       	add	r18, r18
    1fcc:	22 0f       	add	r18, r18
    1fce:	82 0f       	add	r24, r18
    1fd0:	81 95       	neg	r24
    1fd2:	89 0f       	add	r24, r25
    1fd4:	8c 83       	std	Y+4, r24	; 0x04

	if(thousands)
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	88 23       	and	r24, r24
    1fda:	61 f0       	breq	.+24     	; 0x1ff4 <SendDecimalNumber+0x126>
	{
		LoadChar(decimalConversion[thousands]);
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	88 2f       	mov	r24, r24
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	9e 01       	movw	r18, r28
    1fe4:	2b 5f       	subi	r18, 0xFB	; 251
    1fe6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe8:	82 0f       	add	r24, r18
    1fea:	93 1f       	adc	r25, r19
    1fec:	fc 01       	movw	r30, r24
    1fee:	80 81       	ld	r24, Z
    1ff0:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LoadChar>
	}
	
	if(hundreds)
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	88 23       	and	r24, r24
    1ff8:	61 f0       	breq	.+24     	; 0x2012 <SendDecimalNumber+0x144>
	{
		LoadChar(decimalConversion[hundreds]);
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	88 2f       	mov	r24, r24
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	9e 01       	movw	r18, r28
    2002:	2b 5f       	subi	r18, 0xFB	; 251
    2004:	3f 4f       	sbci	r19, 0xFF	; 255
    2006:	82 0f       	add	r24, r18
    2008:	93 1f       	adc	r25, r19
    200a:	fc 01       	movw	r30, r24
    200c:	80 81       	ld	r24, Z
    200e:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LoadChar>
	}
	if(tens)
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	88 23       	and	r24, r24
    2016:	61 f0       	breq	.+24     	; 0x2030 <SendDecimalNumber+0x162>
	{
		LoadChar(decimalConversion[tens]);
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	88 2f       	mov	r24, r24
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	9e 01       	movw	r18, r28
    2020:	2b 5f       	subi	r18, 0xFB	; 251
    2022:	3f 4f       	sbci	r19, 0xFF	; 255
    2024:	82 0f       	add	r24, r18
    2026:	93 1f       	adc	r25, r19
    2028:	fc 01       	movw	r30, r24
    202a:	80 81       	ld	r24, Z
    202c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LoadChar>
	}
	LoadChar(decimalConversion[ones]);
    2030:	8c 81       	ldd	r24, Y+4	; 0x04
    2032:	88 2f       	mov	r24, r24
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9e 01       	movw	r18, r28
    2038:	2b 5f       	subi	r18, 0xFB	; 251
    203a:	3f 4f       	sbci	r19, 0xFF	; 255
    203c:	82 0f       	add	r24, r18
    203e:	93 1f       	adc	r25, r19
    2040:	fc 01       	movw	r30, r24
    2042:	80 81       	ld	r24, Z
    2044:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LoadChar>
	
	StartTx();	
    2048:	0e 94 2f 10 	call	0x205e	; 0x205e <StartTx>
	return;
}
    204c:	60 96       	adiw	r28, 0x10	; 16
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
    2058:	df 91       	pop	r29
    205a:	cf 91       	pop	r28
    205c:	08 95       	ret

0000205e <StartTx>:
void StartTx()
{	
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
	if(uartTxBufferCount)
    2066:	80 91 92 06 	lds	r24, 0x0692
    206a:	88 23       	and	r24, r24
    206c:	59 f1       	breq	.+86     	; 0x20c4 <StartTx+0x66>
	{
		while ( !( UCSR0A & (1<<UDRE0)) ){
    206e:	00 00       	nop
    2070:	80 ec       	ldi	r24, 0xC0	; 192
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	fc 01       	movw	r30, r24
    2076:	80 81       	ld	r24, Z
    2078:	88 2f       	mov	r24, r24
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	80 72       	andi	r24, 0x20	; 32
    207e:	99 27       	eor	r25, r25
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	b1 f3       	breq	.-20     	; 0x2070 <StartTx+0x12>
		}
		UDR0 = uartTxBuff[uartTxBufferTailPtr];
    2084:	86 ec       	ldi	r24, 0xC6	; 198
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	20 91 91 06 	lds	r18, 0x0691
    208c:	22 2f       	mov	r18, r18
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	25 50       	subi	r18, 0x05	; 5
    2092:	39 4f       	sbci	r19, 0xF9	; 249
    2094:	f9 01       	movw	r30, r18
    2096:	20 81       	ld	r18, Z
    2098:	fc 01       	movw	r30, r24
    209a:	20 83       	st	Z, r18
		IncrementRingBufferTailPtr(uartTxBufferTailPtr, UART_TX_BUFF_LENGTH, uartTxBufferCount);
    209c:	80 91 92 06 	lds	r24, 0x0692
    20a0:	88 23       	and	r24, r24
    20a2:	81 f0       	breq	.+32     	; 0x20c4 <StartTx+0x66>
    20a4:	80 91 91 06 	lds	r24, 0x0691
    20a8:	8f 5f       	subi	r24, 0xFF	; 255
    20aa:	80 93 91 06 	sts	0x0691, r24
    20ae:	80 91 92 06 	lds	r24, 0x0692
    20b2:	81 50       	subi	r24, 0x01	; 1
    20b4:	80 93 92 06 	sts	0x0692, r24
    20b8:	80 91 91 06 	lds	r24, 0x0691
    20bc:	89 31       	cpi	r24, 0x19	; 25
    20be:	10 f0       	brcs	.+4      	; 0x20c4 <StartTx+0x66>
    20c0:	10 92 91 06 	sts	0x0691, r1
	}
	return;
    20c4:	00 00       	nop
}
    20c6:	df 91       	pop	r29
    20c8:	cf 91       	pop	r28
    20ca:	08 95       	ret

000020cc <uart_putchar>:

static int uart_putchar(char c, FILE  *stream){
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	00 d0       	rcall	.+0      	; 0x20d2 <uart_putchar+0x6>
    20d2:	1f 92       	push	r1
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	7b 83       	std	Y+3, r23	; 0x03
    20dc:	6a 83       	std	Y+2, r22	; 0x02
	while ( !( UCSR0A & (1<<UDRE0)) ){
    20de:	00 00       	nop
    20e0:	80 ec       	ldi	r24, 0xC0	; 192
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	fc 01       	movw	r30, r24
    20e6:	80 81       	ld	r24, Z
    20e8:	88 2f       	mov	r24, r24
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	80 72       	andi	r24, 0x20	; 32
    20ee:	99 27       	eor	r25, r25
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	b1 f3       	breq	.-20     	; 0x20e0 <uart_putchar+0x14>
	}
	UDR0 = c;
    20f4:	86 ec       	ldi	r24, 0xC6	; 198
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	29 81       	ldd	r18, Y+1	; 0x01
    20fa:	fc 01       	movw	r30, r24
    20fc:	20 83       	st	Z, r18
	return 0;
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
}
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	df 91       	pop	r29
    210a:	cf 91       	pop	r28
    210c:	08 95       	ret

0000210e <__mulsi3>:
    210e:	db 01       	movw	r26, r22
    2110:	8f 93       	push	r24
    2112:	9f 93       	push	r25
    2114:	0e 94 a3 10 	call	0x2146	; 0x2146 <__muluhisi3>
    2118:	bf 91       	pop	r27
    211a:	af 91       	pop	r26
    211c:	a2 9f       	mul	r26, r18
    211e:	80 0d       	add	r24, r0
    2120:	91 1d       	adc	r25, r1
    2122:	a3 9f       	mul	r26, r19
    2124:	90 0d       	add	r25, r0
    2126:	b2 9f       	mul	r27, r18
    2128:	90 0d       	add	r25, r0
    212a:	11 24       	eor	r1, r1
    212c:	08 95       	ret

0000212e <__umulhisi3>:
    212e:	a2 9f       	mul	r26, r18
    2130:	b0 01       	movw	r22, r0
    2132:	b3 9f       	mul	r27, r19
    2134:	c0 01       	movw	r24, r0
    2136:	a3 9f       	mul	r26, r19
    2138:	01 d0       	rcall	.+2      	; 0x213c <__umulhisi3+0xe>
    213a:	b2 9f       	mul	r27, r18
    213c:	70 0d       	add	r23, r0
    213e:	81 1d       	adc	r24, r1
    2140:	11 24       	eor	r1, r1
    2142:	91 1d       	adc	r25, r1
    2144:	08 95       	ret

00002146 <__muluhisi3>:
    2146:	0e 94 97 10 	call	0x212e	; 0x212e <__umulhisi3>
    214a:	a5 9f       	mul	r26, r21
    214c:	90 0d       	add	r25, r0
    214e:	b4 9f       	mul	r27, r20
    2150:	90 0d       	add	r25, r0
    2152:	a4 9f       	mul	r26, r20
    2154:	80 0d       	add	r24, r0
    2156:	91 1d       	adc	r25, r1
    2158:	11 24       	eor	r1, r1
    215a:	08 95       	ret

0000215c <printf>:
    215c:	a0 e0       	ldi	r26, 0x00	; 0
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e4 eb       	ldi	r30, 0xB4	; 180
    2162:	f0 e1       	ldi	r31, 0x10	; 16
    2164:	0c 94 4e 13 	jmp	0x269c	; 0x269c <__prologue_saves__+0x20>
    2168:	fe 01       	movw	r30, r28
    216a:	35 96       	adiw	r30, 0x05	; 5
    216c:	61 91       	ld	r22, Z+
    216e:	71 91       	ld	r23, Z+
    2170:	af 01       	movw	r20, r30
    2172:	80 91 6b 07 	lds	r24, 0x076B
    2176:	90 91 6c 07 	lds	r25, 0x076C
    217a:	0e 94 c2 10 	call	0x2184	; 0x2184 <vfprintf>
    217e:	e2 e0       	ldi	r30, 0x02	; 2
    2180:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__epilogue_restores__+0x20>

00002184 <vfprintf>:
    2184:	ac e0       	ldi	r26, 0x0C	; 12
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e8 ec       	ldi	r30, 0xC8	; 200
    218a:	f0 e1       	ldi	r31, 0x10	; 16
    218c:	0c 94 3e 13 	jmp	0x267c	; 0x267c <__prologue_saves__>
    2190:	7c 01       	movw	r14, r24
    2192:	6b 01       	movw	r12, r22
    2194:	8a 01       	movw	r16, r20
    2196:	fc 01       	movw	r30, r24
    2198:	17 82       	std	Z+7, r1	; 0x07
    219a:	16 82       	std	Z+6, r1	; 0x06
    219c:	83 81       	ldd	r24, Z+3	; 0x03
    219e:	81 ff       	sbrs	r24, 1
    21a0:	c6 c1       	rjmp	.+908    	; 0x252e <vfprintf+0x3aa>
    21a2:	88 24       	eor	r8, r8
    21a4:	83 94       	inc	r8
    21a6:	91 2c       	mov	r9, r1
    21a8:	8c 0e       	add	r8, r28
    21aa:	9d 1e       	adc	r9, r29
    21ac:	f7 01       	movw	r30, r14
    21ae:	93 81       	ldd	r25, Z+3	; 0x03
    21b0:	f6 01       	movw	r30, r12
    21b2:	93 fd       	sbrc	r25, 3
    21b4:	85 91       	lpm	r24, Z+
    21b6:	93 ff       	sbrs	r25, 3
    21b8:	81 91       	ld	r24, Z+
    21ba:	6f 01       	movw	r12, r30
    21bc:	88 23       	and	r24, r24
    21be:	09 f4       	brne	.+2      	; 0x21c2 <vfprintf+0x3e>
    21c0:	b2 c1       	rjmp	.+868    	; 0x2526 <vfprintf+0x3a2>
    21c2:	85 32       	cpi	r24, 0x25	; 37
    21c4:	39 f4       	brne	.+14     	; 0x21d4 <vfprintf+0x50>
    21c6:	93 fd       	sbrc	r25, 3
    21c8:	85 91       	lpm	r24, Z+
    21ca:	93 ff       	sbrs	r25, 3
    21cc:	81 91       	ld	r24, Z+
    21ce:	6f 01       	movw	r12, r30
    21d0:	85 32       	cpi	r24, 0x25	; 37
    21d2:	29 f4       	brne	.+10     	; 0x21de <vfprintf+0x5a>
    21d4:	b7 01       	movw	r22, r14
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	0e 94 b4 12 	call	0x2568	; 0x2568 <fputc>
    21dc:	e7 cf       	rjmp	.-50     	; 0x21ac <vfprintf+0x28>
    21de:	51 2c       	mov	r5, r1
    21e0:	31 2c       	mov	r3, r1
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	20 32       	cpi	r18, 0x20	; 32
    21e6:	a8 f4       	brcc	.+42     	; 0x2212 <vfprintf+0x8e>
    21e8:	8b 32       	cpi	r24, 0x2B	; 43
    21ea:	61 f0       	breq	.+24     	; 0x2204 <vfprintf+0x80>
    21ec:	28 f4       	brcc	.+10     	; 0x21f8 <vfprintf+0x74>
    21ee:	80 32       	cpi	r24, 0x20	; 32
    21f0:	51 f0       	breq	.+20     	; 0x2206 <vfprintf+0x82>
    21f2:	83 32       	cpi	r24, 0x23	; 35
    21f4:	71 f4       	brne	.+28     	; 0x2212 <vfprintf+0x8e>
    21f6:	0b c0       	rjmp	.+22     	; 0x220e <vfprintf+0x8a>
    21f8:	8d 32       	cpi	r24, 0x2D	; 45
    21fa:	39 f0       	breq	.+14     	; 0x220a <vfprintf+0x86>
    21fc:	80 33       	cpi	r24, 0x30	; 48
    21fe:	49 f4       	brne	.+18     	; 0x2212 <vfprintf+0x8e>
    2200:	21 60       	ori	r18, 0x01	; 1
    2202:	28 c0       	rjmp	.+80     	; 0x2254 <vfprintf+0xd0>
    2204:	22 60       	ori	r18, 0x02	; 2
    2206:	24 60       	ori	r18, 0x04	; 4
    2208:	25 c0       	rjmp	.+74     	; 0x2254 <vfprintf+0xd0>
    220a:	28 60       	ori	r18, 0x08	; 8
    220c:	23 c0       	rjmp	.+70     	; 0x2254 <vfprintf+0xd0>
    220e:	20 61       	ori	r18, 0x10	; 16
    2210:	21 c0       	rjmp	.+66     	; 0x2254 <vfprintf+0xd0>
    2212:	27 fd       	sbrc	r18, 7
    2214:	27 c0       	rjmp	.+78     	; 0x2264 <vfprintf+0xe0>
    2216:	38 2f       	mov	r19, r24
    2218:	30 53       	subi	r19, 0x30	; 48
    221a:	3a 30       	cpi	r19, 0x0A	; 10
    221c:	78 f4       	brcc	.+30     	; 0x223c <vfprintf+0xb8>
    221e:	26 ff       	sbrs	r18, 6
    2220:	06 c0       	rjmp	.+12     	; 0x222e <vfprintf+0xaa>
    2222:	fa e0       	ldi	r31, 0x0A	; 10
    2224:	5f 9e       	mul	r5, r31
    2226:	30 0d       	add	r19, r0
    2228:	11 24       	eor	r1, r1
    222a:	53 2e       	mov	r5, r19
    222c:	13 c0       	rjmp	.+38     	; 0x2254 <vfprintf+0xd0>
    222e:	8a e0       	ldi	r24, 0x0A	; 10
    2230:	38 9e       	mul	r3, r24
    2232:	30 0d       	add	r19, r0
    2234:	11 24       	eor	r1, r1
    2236:	33 2e       	mov	r3, r19
    2238:	20 62       	ori	r18, 0x20	; 32
    223a:	0c c0       	rjmp	.+24     	; 0x2254 <vfprintf+0xd0>
    223c:	8e 32       	cpi	r24, 0x2E	; 46
    223e:	21 f4       	brne	.+8      	; 0x2248 <vfprintf+0xc4>
    2240:	26 fd       	sbrc	r18, 6
    2242:	71 c1       	rjmp	.+738    	; 0x2526 <vfprintf+0x3a2>
    2244:	20 64       	ori	r18, 0x40	; 64
    2246:	06 c0       	rjmp	.+12     	; 0x2254 <vfprintf+0xd0>
    2248:	8c 36       	cpi	r24, 0x6C	; 108
    224a:	11 f4       	brne	.+4      	; 0x2250 <vfprintf+0xcc>
    224c:	20 68       	ori	r18, 0x80	; 128
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <vfprintf+0xd0>
    2250:	88 36       	cpi	r24, 0x68	; 104
    2252:	41 f4       	brne	.+16     	; 0x2264 <vfprintf+0xe0>
    2254:	f6 01       	movw	r30, r12
    2256:	93 fd       	sbrc	r25, 3
    2258:	85 91       	lpm	r24, Z+
    225a:	93 ff       	sbrs	r25, 3
    225c:	81 91       	ld	r24, Z+
    225e:	6f 01       	movw	r12, r30
    2260:	81 11       	cpse	r24, r1
    2262:	c0 cf       	rjmp	.-128    	; 0x21e4 <vfprintf+0x60>
    2264:	98 2f       	mov	r25, r24
    2266:	95 54       	subi	r25, 0x45	; 69
    2268:	93 30       	cpi	r25, 0x03	; 3
    226a:	18 f0       	brcs	.+6      	; 0x2272 <vfprintf+0xee>
    226c:	90 52       	subi	r25, 0x20	; 32
    226e:	93 30       	cpi	r25, 0x03	; 3
    2270:	28 f4       	brcc	.+10     	; 0x227c <vfprintf+0xf8>
    2272:	0c 5f       	subi	r16, 0xFC	; 252
    2274:	1f 4f       	sbci	r17, 0xFF	; 255
    2276:	ff e3       	ldi	r31, 0x3F	; 63
    2278:	f9 83       	std	Y+1, r31	; 0x01
    227a:	0d c0       	rjmp	.+26     	; 0x2296 <vfprintf+0x112>
    227c:	83 36       	cpi	r24, 0x63	; 99
    227e:	31 f0       	breq	.+12     	; 0x228c <vfprintf+0x108>
    2280:	83 37       	cpi	r24, 0x73	; 115
    2282:	71 f0       	breq	.+28     	; 0x22a0 <vfprintf+0x11c>
    2284:	83 35       	cpi	r24, 0x53	; 83
    2286:	09 f0       	breq	.+2      	; 0x228a <vfprintf+0x106>
    2288:	5e c0       	rjmp	.+188    	; 0x2346 <vfprintf+0x1c2>
    228a:	23 c0       	rjmp	.+70     	; 0x22d2 <vfprintf+0x14e>
    228c:	f8 01       	movw	r30, r16
    228e:	80 81       	ld	r24, Z
    2290:	89 83       	std	Y+1, r24	; 0x01
    2292:	0e 5f       	subi	r16, 0xFE	; 254
    2294:	1f 4f       	sbci	r17, 0xFF	; 255
    2296:	44 24       	eor	r4, r4
    2298:	43 94       	inc	r4
    229a:	51 2c       	mov	r5, r1
    229c:	54 01       	movw	r10, r8
    229e:	15 c0       	rjmp	.+42     	; 0x22ca <vfprintf+0x146>
    22a0:	38 01       	movw	r6, r16
    22a2:	f2 e0       	ldi	r31, 0x02	; 2
    22a4:	6f 0e       	add	r6, r31
    22a6:	71 1c       	adc	r7, r1
    22a8:	f8 01       	movw	r30, r16
    22aa:	a0 80       	ld	r10, Z
    22ac:	b1 80       	ldd	r11, Z+1	; 0x01
    22ae:	26 ff       	sbrs	r18, 6
    22b0:	03 c0       	rjmp	.+6      	; 0x22b8 <vfprintf+0x134>
    22b2:	65 2d       	mov	r22, r5
    22b4:	70 e0       	ldi	r23, 0x00	; 0
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <vfprintf+0x138>
    22b8:	6f ef       	ldi	r22, 0xFF	; 255
    22ba:	7f ef       	ldi	r23, 0xFF	; 255
    22bc:	c5 01       	movw	r24, r10
    22be:	2c 87       	std	Y+12, r18	; 0x0c
    22c0:	0e 94 a9 12 	call	0x2552	; 0x2552 <strnlen>
    22c4:	2c 01       	movw	r4, r24
    22c6:	83 01       	movw	r16, r6
    22c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    22ca:	6f e7       	ldi	r22, 0x7F	; 127
    22cc:	26 2e       	mov	r2, r22
    22ce:	22 22       	and	r2, r18
    22d0:	18 c0       	rjmp	.+48     	; 0x2302 <vfprintf+0x17e>
    22d2:	38 01       	movw	r6, r16
    22d4:	f2 e0       	ldi	r31, 0x02	; 2
    22d6:	6f 0e       	add	r6, r31
    22d8:	71 1c       	adc	r7, r1
    22da:	f8 01       	movw	r30, r16
    22dc:	a0 80       	ld	r10, Z
    22de:	b1 80       	ldd	r11, Z+1	; 0x01
    22e0:	26 ff       	sbrs	r18, 6
    22e2:	03 c0       	rjmp	.+6      	; 0x22ea <vfprintf+0x166>
    22e4:	65 2d       	mov	r22, r5
    22e6:	70 e0       	ldi	r23, 0x00	; 0
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <vfprintf+0x16a>
    22ea:	6f ef       	ldi	r22, 0xFF	; 255
    22ec:	7f ef       	ldi	r23, 0xFF	; 255
    22ee:	c5 01       	movw	r24, r10
    22f0:	2c 87       	std	Y+12, r18	; 0x0c
    22f2:	0e 94 9e 12 	call	0x253c	; 0x253c <strnlen_P>
    22f6:	2c 01       	movw	r4, r24
    22f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    22fa:	50 e8       	ldi	r21, 0x80	; 128
    22fc:	25 2e       	mov	r2, r21
    22fe:	22 2a       	or	r2, r18
    2300:	83 01       	movw	r16, r6
    2302:	23 fc       	sbrc	r2, 3
    2304:	1c c0       	rjmp	.+56     	; 0x233e <vfprintf+0x1ba>
    2306:	06 c0       	rjmp	.+12     	; 0x2314 <vfprintf+0x190>
    2308:	b7 01       	movw	r22, r14
    230a:	80 e2       	ldi	r24, 0x20	; 32
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0e 94 b4 12 	call	0x2568	; 0x2568 <fputc>
    2312:	3a 94       	dec	r3
    2314:	83 2d       	mov	r24, r3
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	48 16       	cp	r4, r24
    231a:	59 06       	cpc	r5, r25
    231c:	a8 f3       	brcs	.-22     	; 0x2308 <vfprintf+0x184>
    231e:	0f c0       	rjmp	.+30     	; 0x233e <vfprintf+0x1ba>
    2320:	f5 01       	movw	r30, r10
    2322:	27 fc       	sbrc	r2, 7
    2324:	85 91       	lpm	r24, Z+
    2326:	27 fe       	sbrs	r2, 7
    2328:	81 91       	ld	r24, Z+
    232a:	5f 01       	movw	r10, r30
    232c:	b7 01       	movw	r22, r14
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	0e 94 b4 12 	call	0x2568	; 0x2568 <fputc>
    2334:	31 10       	cpse	r3, r1
    2336:	3a 94       	dec	r3
    2338:	f1 e0       	ldi	r31, 0x01	; 1
    233a:	4f 1a       	sub	r4, r31
    233c:	51 08       	sbc	r5, r1
    233e:	41 14       	cp	r4, r1
    2340:	51 04       	cpc	r5, r1
    2342:	71 f7       	brne	.-36     	; 0x2320 <vfprintf+0x19c>
    2344:	ed c0       	rjmp	.+474    	; 0x2520 <vfprintf+0x39c>
    2346:	84 36       	cpi	r24, 0x64	; 100
    2348:	11 f0       	breq	.+4      	; 0x234e <vfprintf+0x1ca>
    234a:	89 36       	cpi	r24, 0x69	; 105
    234c:	41 f5       	brne	.+80     	; 0x239e <vfprintf+0x21a>
    234e:	f8 01       	movw	r30, r16
    2350:	27 ff       	sbrs	r18, 7
    2352:	07 c0       	rjmp	.+14     	; 0x2362 <vfprintf+0x1de>
    2354:	60 81       	ld	r22, Z
    2356:	71 81       	ldd	r23, Z+1	; 0x01
    2358:	82 81       	ldd	r24, Z+2	; 0x02
    235a:	93 81       	ldd	r25, Z+3	; 0x03
    235c:	0c 5f       	subi	r16, 0xFC	; 252
    235e:	1f 4f       	sbci	r17, 0xFF	; 255
    2360:	08 c0       	rjmp	.+16     	; 0x2372 <vfprintf+0x1ee>
    2362:	60 81       	ld	r22, Z
    2364:	71 81       	ldd	r23, Z+1	; 0x01
    2366:	88 27       	eor	r24, r24
    2368:	77 fd       	sbrc	r23, 7
    236a:	80 95       	com	r24
    236c:	98 2f       	mov	r25, r24
    236e:	0e 5f       	subi	r16, 0xFE	; 254
    2370:	1f 4f       	sbci	r17, 0xFF	; 255
    2372:	4f e6       	ldi	r20, 0x6F	; 111
    2374:	b4 2e       	mov	r11, r20
    2376:	b2 22       	and	r11, r18
    2378:	97 ff       	sbrs	r25, 7
    237a:	09 c0       	rjmp	.+18     	; 0x238e <vfprintf+0x20a>
    237c:	90 95       	com	r25
    237e:	80 95       	com	r24
    2380:	70 95       	com	r23
    2382:	61 95       	neg	r22
    2384:	7f 4f       	sbci	r23, 0xFF	; 255
    2386:	8f 4f       	sbci	r24, 0xFF	; 255
    2388:	9f 4f       	sbci	r25, 0xFF	; 255
    238a:	f0 e8       	ldi	r31, 0x80	; 128
    238c:	bf 2a       	or	r11, r31
    238e:	2a e0       	ldi	r18, 0x0A	; 10
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	a4 01       	movw	r20, r8
    2394:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__ultoa_invert>
    2398:	a8 2e       	mov	r10, r24
    239a:	a8 18       	sub	r10, r8
    239c:	43 c0       	rjmp	.+134    	; 0x2424 <vfprintf+0x2a0>
    239e:	85 37       	cpi	r24, 0x75	; 117
    23a0:	31 f4       	brne	.+12     	; 0x23ae <vfprintf+0x22a>
    23a2:	3f ee       	ldi	r19, 0xEF	; 239
    23a4:	b3 2e       	mov	r11, r19
    23a6:	b2 22       	and	r11, r18
    23a8:	2a e0       	ldi	r18, 0x0A	; 10
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	24 c0       	rjmp	.+72     	; 0x23f6 <vfprintf+0x272>
    23ae:	99 ef       	ldi	r25, 0xF9	; 249
    23b0:	b9 2e       	mov	r11, r25
    23b2:	b2 22       	and	r11, r18
    23b4:	8f 36       	cpi	r24, 0x6F	; 111
    23b6:	b9 f0       	breq	.+46     	; 0x23e6 <vfprintf+0x262>
    23b8:	20 f4       	brcc	.+8      	; 0x23c2 <vfprintf+0x23e>
    23ba:	88 35       	cpi	r24, 0x58	; 88
    23bc:	09 f0       	breq	.+2      	; 0x23c0 <vfprintf+0x23c>
    23be:	b3 c0       	rjmp	.+358    	; 0x2526 <vfprintf+0x3a2>
    23c0:	0d c0       	rjmp	.+26     	; 0x23dc <vfprintf+0x258>
    23c2:	80 37       	cpi	r24, 0x70	; 112
    23c4:	21 f0       	breq	.+8      	; 0x23ce <vfprintf+0x24a>
    23c6:	88 37       	cpi	r24, 0x78	; 120
    23c8:	09 f0       	breq	.+2      	; 0x23cc <vfprintf+0x248>
    23ca:	ad c0       	rjmp	.+346    	; 0x2526 <vfprintf+0x3a2>
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <vfprintf+0x24e>
    23ce:	20 e1       	ldi	r18, 0x10	; 16
    23d0:	b2 2a       	or	r11, r18
    23d2:	b4 fe       	sbrs	r11, 4
    23d4:	0b c0       	rjmp	.+22     	; 0x23ec <vfprintf+0x268>
    23d6:	84 e0       	ldi	r24, 0x04	; 4
    23d8:	b8 2a       	or	r11, r24
    23da:	08 c0       	rjmp	.+16     	; 0x23ec <vfprintf+0x268>
    23dc:	24 ff       	sbrs	r18, 4
    23de:	09 c0       	rjmp	.+18     	; 0x23f2 <vfprintf+0x26e>
    23e0:	e6 e0       	ldi	r30, 0x06	; 6
    23e2:	be 2a       	or	r11, r30
    23e4:	06 c0       	rjmp	.+12     	; 0x23f2 <vfprintf+0x26e>
    23e6:	28 e0       	ldi	r18, 0x08	; 8
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	05 c0       	rjmp	.+10     	; 0x23f6 <vfprintf+0x272>
    23ec:	20 e1       	ldi	r18, 0x10	; 16
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <vfprintf+0x272>
    23f2:	20 e1       	ldi	r18, 0x10	; 16
    23f4:	32 e0       	ldi	r19, 0x02	; 2
    23f6:	f8 01       	movw	r30, r16
    23f8:	b7 fe       	sbrs	r11, 7
    23fa:	07 c0       	rjmp	.+14     	; 0x240a <vfprintf+0x286>
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	93 81       	ldd	r25, Z+3	; 0x03
    2404:	0c 5f       	subi	r16, 0xFC	; 252
    2406:	1f 4f       	sbci	r17, 0xFF	; 255
    2408:	06 c0       	rjmp	.+12     	; 0x2416 <vfprintf+0x292>
    240a:	60 81       	ld	r22, Z
    240c:	71 81       	ldd	r23, Z+1	; 0x01
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	0e 5f       	subi	r16, 0xFE	; 254
    2414:	1f 4f       	sbci	r17, 0xFF	; 255
    2416:	a4 01       	movw	r20, r8
    2418:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__ultoa_invert>
    241c:	a8 2e       	mov	r10, r24
    241e:	a8 18       	sub	r10, r8
    2420:	ff e7       	ldi	r31, 0x7F	; 127
    2422:	bf 22       	and	r11, r31
    2424:	b6 fe       	sbrs	r11, 6
    2426:	0b c0       	rjmp	.+22     	; 0x243e <vfprintf+0x2ba>
    2428:	2b 2d       	mov	r18, r11
    242a:	2e 7f       	andi	r18, 0xFE	; 254
    242c:	a5 14       	cp	r10, r5
    242e:	50 f4       	brcc	.+20     	; 0x2444 <vfprintf+0x2c0>
    2430:	b4 fe       	sbrs	r11, 4
    2432:	0a c0       	rjmp	.+20     	; 0x2448 <vfprintf+0x2c4>
    2434:	b2 fc       	sbrc	r11, 2
    2436:	08 c0       	rjmp	.+16     	; 0x2448 <vfprintf+0x2c4>
    2438:	2b 2d       	mov	r18, r11
    243a:	2e 7e       	andi	r18, 0xEE	; 238
    243c:	05 c0       	rjmp	.+10     	; 0x2448 <vfprintf+0x2c4>
    243e:	7a 2c       	mov	r7, r10
    2440:	2b 2d       	mov	r18, r11
    2442:	03 c0       	rjmp	.+6      	; 0x244a <vfprintf+0x2c6>
    2444:	7a 2c       	mov	r7, r10
    2446:	01 c0       	rjmp	.+2      	; 0x244a <vfprintf+0x2c6>
    2448:	75 2c       	mov	r7, r5
    244a:	24 ff       	sbrs	r18, 4
    244c:	0d c0       	rjmp	.+26     	; 0x2468 <vfprintf+0x2e4>
    244e:	fe 01       	movw	r30, r28
    2450:	ea 0d       	add	r30, r10
    2452:	f1 1d       	adc	r31, r1
    2454:	80 81       	ld	r24, Z
    2456:	80 33       	cpi	r24, 0x30	; 48
    2458:	11 f4       	brne	.+4      	; 0x245e <vfprintf+0x2da>
    245a:	29 7e       	andi	r18, 0xE9	; 233
    245c:	09 c0       	rjmp	.+18     	; 0x2470 <vfprintf+0x2ec>
    245e:	22 ff       	sbrs	r18, 2
    2460:	06 c0       	rjmp	.+12     	; 0x246e <vfprintf+0x2ea>
    2462:	73 94       	inc	r7
    2464:	73 94       	inc	r7
    2466:	04 c0       	rjmp	.+8      	; 0x2470 <vfprintf+0x2ec>
    2468:	82 2f       	mov	r24, r18
    246a:	86 78       	andi	r24, 0x86	; 134
    246c:	09 f0       	breq	.+2      	; 0x2470 <vfprintf+0x2ec>
    246e:	73 94       	inc	r7
    2470:	23 fd       	sbrc	r18, 3
    2472:	14 c0       	rjmp	.+40     	; 0x249c <vfprintf+0x318>
    2474:	20 ff       	sbrs	r18, 0
    2476:	0f c0       	rjmp	.+30     	; 0x2496 <vfprintf+0x312>
    2478:	5a 2c       	mov	r5, r10
    247a:	73 14       	cp	r7, r3
    247c:	60 f4       	brcc	.+24     	; 0x2496 <vfprintf+0x312>
    247e:	53 0c       	add	r5, r3
    2480:	57 18       	sub	r5, r7
    2482:	73 2c       	mov	r7, r3
    2484:	08 c0       	rjmp	.+16     	; 0x2496 <vfprintf+0x312>
    2486:	b7 01       	movw	r22, r14
    2488:	80 e2       	ldi	r24, 0x20	; 32
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	2c 87       	std	Y+12, r18	; 0x0c
    248e:	0e 94 b4 12 	call	0x2568	; 0x2568 <fputc>
    2492:	73 94       	inc	r7
    2494:	2c 85       	ldd	r18, Y+12	; 0x0c
    2496:	73 14       	cp	r7, r3
    2498:	b0 f3       	brcs	.-20     	; 0x2486 <vfprintf+0x302>
    249a:	04 c0       	rjmp	.+8      	; 0x24a4 <vfprintf+0x320>
    249c:	73 14       	cp	r7, r3
    249e:	10 f4       	brcc	.+4      	; 0x24a4 <vfprintf+0x320>
    24a0:	37 18       	sub	r3, r7
    24a2:	01 c0       	rjmp	.+2      	; 0x24a6 <vfprintf+0x322>
    24a4:	31 2c       	mov	r3, r1
    24a6:	24 ff       	sbrs	r18, 4
    24a8:	12 c0       	rjmp	.+36     	; 0x24ce <vfprintf+0x34a>
    24aa:	b7 01       	movw	r22, r14
    24ac:	80 e3       	ldi	r24, 0x30	; 48
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	2c 87       	std	Y+12, r18	; 0x0c
    24b2:	0e 94 b4 12 	call	0x2568	; 0x2568 <fputc>
    24b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    24b8:	22 ff       	sbrs	r18, 2
    24ba:	1e c0       	rjmp	.+60     	; 0x24f8 <vfprintf+0x374>
    24bc:	21 ff       	sbrs	r18, 1
    24be:	03 c0       	rjmp	.+6      	; 0x24c6 <vfprintf+0x342>
    24c0:	88 e5       	ldi	r24, 0x58	; 88
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <vfprintf+0x346>
    24c6:	88 e7       	ldi	r24, 0x78	; 120
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	b7 01       	movw	r22, r14
    24cc:	0c c0       	rjmp	.+24     	; 0x24e6 <vfprintf+0x362>
    24ce:	82 2f       	mov	r24, r18
    24d0:	86 78       	andi	r24, 0x86	; 134
    24d2:	91 f0       	breq	.+36     	; 0x24f8 <vfprintf+0x374>
    24d4:	21 fd       	sbrc	r18, 1
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <vfprintf+0x358>
    24d8:	80 e2       	ldi	r24, 0x20	; 32
    24da:	01 c0       	rjmp	.+2      	; 0x24de <vfprintf+0x35a>
    24dc:	8b e2       	ldi	r24, 0x2B	; 43
    24de:	27 fd       	sbrc	r18, 7
    24e0:	8d e2       	ldi	r24, 0x2D	; 45
    24e2:	b7 01       	movw	r22, r14
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0e 94 b4 12 	call	0x2568	; 0x2568 <fputc>
    24ea:	06 c0       	rjmp	.+12     	; 0x24f8 <vfprintf+0x374>
    24ec:	b7 01       	movw	r22, r14
    24ee:	80 e3       	ldi	r24, 0x30	; 48
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	0e 94 b4 12 	call	0x2568	; 0x2568 <fputc>
    24f6:	5a 94       	dec	r5
    24f8:	a5 14       	cp	r10, r5
    24fa:	c0 f3       	brcs	.-16     	; 0x24ec <vfprintf+0x368>
    24fc:	aa 94       	dec	r10
    24fe:	f4 01       	movw	r30, r8
    2500:	ea 0d       	add	r30, r10
    2502:	f1 1d       	adc	r31, r1
    2504:	b7 01       	movw	r22, r14
    2506:	80 81       	ld	r24, Z
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	0e 94 b4 12 	call	0x2568	; 0x2568 <fputc>
    250e:	a1 10       	cpse	r10, r1
    2510:	f5 cf       	rjmp	.-22     	; 0x24fc <vfprintf+0x378>
    2512:	06 c0       	rjmp	.+12     	; 0x2520 <vfprintf+0x39c>
    2514:	b7 01       	movw	r22, r14
    2516:	80 e2       	ldi	r24, 0x20	; 32
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	0e 94 b4 12 	call	0x2568	; 0x2568 <fputc>
    251e:	3a 94       	dec	r3
    2520:	31 10       	cpse	r3, r1
    2522:	f8 cf       	rjmp	.-16     	; 0x2514 <vfprintf+0x390>
    2524:	43 ce       	rjmp	.-890    	; 0x21ac <vfprintf+0x28>
    2526:	f7 01       	movw	r30, r14
    2528:	26 81       	ldd	r18, Z+6	; 0x06
    252a:	37 81       	ldd	r19, Z+7	; 0x07
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <vfprintf+0x3ae>
    252e:	2f ef       	ldi	r18, 0xFF	; 255
    2530:	3f ef       	ldi	r19, 0xFF	; 255
    2532:	c9 01       	movw	r24, r18
    2534:	2c 96       	adiw	r28, 0x0c	; 12
    2536:	e2 e1       	ldi	r30, 0x12	; 18
    2538:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <__epilogue_restores__>

0000253c <strnlen_P>:
    253c:	fc 01       	movw	r30, r24
    253e:	05 90       	lpm	r0, Z+
    2540:	61 50       	subi	r22, 0x01	; 1
    2542:	70 40       	sbci	r23, 0x00	; 0
    2544:	01 10       	cpse	r0, r1
    2546:	d8 f7       	brcc	.-10     	; 0x253e <strnlen_P+0x2>
    2548:	80 95       	com	r24
    254a:	90 95       	com	r25
    254c:	8e 0f       	add	r24, r30
    254e:	9f 1f       	adc	r25, r31
    2550:	08 95       	ret

00002552 <strnlen>:
    2552:	fc 01       	movw	r30, r24
    2554:	61 50       	subi	r22, 0x01	; 1
    2556:	70 40       	sbci	r23, 0x00	; 0
    2558:	01 90       	ld	r0, Z+
    255a:	01 10       	cpse	r0, r1
    255c:	d8 f7       	brcc	.-10     	; 0x2554 <strnlen+0x2>
    255e:	80 95       	com	r24
    2560:	90 95       	com	r25
    2562:	8e 0f       	add	r24, r30
    2564:	9f 1f       	adc	r25, r31
    2566:	08 95       	ret

00002568 <fputc>:
    2568:	0f 93       	push	r16
    256a:	1f 93       	push	r17
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	8c 01       	movw	r16, r24
    2572:	eb 01       	movw	r28, r22
    2574:	8b 81       	ldd	r24, Y+3	; 0x03
    2576:	81 fd       	sbrc	r24, 1
    2578:	03 c0       	rjmp	.+6      	; 0x2580 <fputc+0x18>
    257a:	0f ef       	ldi	r16, 0xFF	; 255
    257c:	1f ef       	ldi	r17, 0xFF	; 255
    257e:	1a c0       	rjmp	.+52     	; 0x25b4 <fputc+0x4c>
    2580:	82 ff       	sbrs	r24, 2
    2582:	0d c0       	rjmp	.+26     	; 0x259e <fputc+0x36>
    2584:	2e 81       	ldd	r18, Y+6	; 0x06
    2586:	3f 81       	ldd	r19, Y+7	; 0x07
    2588:	8c 81       	ldd	r24, Y+4	; 0x04
    258a:	9d 81       	ldd	r25, Y+5	; 0x05
    258c:	28 17       	cp	r18, r24
    258e:	39 07       	cpc	r19, r25
    2590:	64 f4       	brge	.+24     	; 0x25aa <fputc+0x42>
    2592:	e8 81       	ld	r30, Y
    2594:	f9 81       	ldd	r31, Y+1	; 0x01
    2596:	01 93       	st	Z+, r16
    2598:	f9 83       	std	Y+1, r31	; 0x01
    259a:	e8 83       	st	Y, r30
    259c:	06 c0       	rjmp	.+12     	; 0x25aa <fputc+0x42>
    259e:	e8 85       	ldd	r30, Y+8	; 0x08
    25a0:	f9 85       	ldd	r31, Y+9	; 0x09
    25a2:	80 2f       	mov	r24, r16
    25a4:	09 95       	icall
    25a6:	89 2b       	or	r24, r25
    25a8:	41 f7       	brne	.-48     	; 0x257a <fputc+0x12>
    25aa:	8e 81       	ldd	r24, Y+6	; 0x06
    25ac:	9f 81       	ldd	r25, Y+7	; 0x07
    25ae:	01 96       	adiw	r24, 0x01	; 1
    25b0:	9f 83       	std	Y+7, r25	; 0x07
    25b2:	8e 83       	std	Y+6, r24	; 0x06
    25b4:	c8 01       	movw	r24, r16
    25b6:	df 91       	pop	r29
    25b8:	cf 91       	pop	r28
    25ba:	1f 91       	pop	r17
    25bc:	0f 91       	pop	r16
    25be:	08 95       	ret

000025c0 <__ultoa_invert>:
    25c0:	fa 01       	movw	r30, r20
    25c2:	aa 27       	eor	r26, r26
    25c4:	28 30       	cpi	r18, 0x08	; 8
    25c6:	51 f1       	breq	.+84     	; 0x261c <__ultoa_invert+0x5c>
    25c8:	20 31       	cpi	r18, 0x10	; 16
    25ca:	81 f1       	breq	.+96     	; 0x262c <__ultoa_invert+0x6c>
    25cc:	e8 94       	clt
    25ce:	6f 93       	push	r22
    25d0:	6e 7f       	andi	r22, 0xFE	; 254
    25d2:	6e 5f       	subi	r22, 0xFE	; 254
    25d4:	7f 4f       	sbci	r23, 0xFF	; 255
    25d6:	8f 4f       	sbci	r24, 0xFF	; 255
    25d8:	9f 4f       	sbci	r25, 0xFF	; 255
    25da:	af 4f       	sbci	r26, 0xFF	; 255
    25dc:	b1 e0       	ldi	r27, 0x01	; 1
    25de:	3e d0       	rcall	.+124    	; 0x265c <__ultoa_invert+0x9c>
    25e0:	b4 e0       	ldi	r27, 0x04	; 4
    25e2:	3c d0       	rcall	.+120    	; 0x265c <__ultoa_invert+0x9c>
    25e4:	67 0f       	add	r22, r23
    25e6:	78 1f       	adc	r23, r24
    25e8:	89 1f       	adc	r24, r25
    25ea:	9a 1f       	adc	r25, r26
    25ec:	a1 1d       	adc	r26, r1
    25ee:	68 0f       	add	r22, r24
    25f0:	79 1f       	adc	r23, r25
    25f2:	8a 1f       	adc	r24, r26
    25f4:	91 1d       	adc	r25, r1
    25f6:	a1 1d       	adc	r26, r1
    25f8:	6a 0f       	add	r22, r26
    25fa:	71 1d       	adc	r23, r1
    25fc:	81 1d       	adc	r24, r1
    25fe:	91 1d       	adc	r25, r1
    2600:	a1 1d       	adc	r26, r1
    2602:	20 d0       	rcall	.+64     	; 0x2644 <__ultoa_invert+0x84>
    2604:	09 f4       	brne	.+2      	; 0x2608 <__ultoa_invert+0x48>
    2606:	68 94       	set
    2608:	3f 91       	pop	r19
    260a:	2a e0       	ldi	r18, 0x0A	; 10
    260c:	26 9f       	mul	r18, r22
    260e:	11 24       	eor	r1, r1
    2610:	30 19       	sub	r19, r0
    2612:	30 5d       	subi	r19, 0xD0	; 208
    2614:	31 93       	st	Z+, r19
    2616:	de f6       	brtc	.-74     	; 0x25ce <__ultoa_invert+0xe>
    2618:	cf 01       	movw	r24, r30
    261a:	08 95       	ret
    261c:	46 2f       	mov	r20, r22
    261e:	47 70       	andi	r20, 0x07	; 7
    2620:	40 5d       	subi	r20, 0xD0	; 208
    2622:	41 93       	st	Z+, r20
    2624:	b3 e0       	ldi	r27, 0x03	; 3
    2626:	0f d0       	rcall	.+30     	; 0x2646 <__ultoa_invert+0x86>
    2628:	c9 f7       	brne	.-14     	; 0x261c <__ultoa_invert+0x5c>
    262a:	f6 cf       	rjmp	.-20     	; 0x2618 <__ultoa_invert+0x58>
    262c:	46 2f       	mov	r20, r22
    262e:	4f 70       	andi	r20, 0x0F	; 15
    2630:	40 5d       	subi	r20, 0xD0	; 208
    2632:	4a 33       	cpi	r20, 0x3A	; 58
    2634:	18 f0       	brcs	.+6      	; 0x263c <__ultoa_invert+0x7c>
    2636:	49 5d       	subi	r20, 0xD9	; 217
    2638:	31 fd       	sbrc	r19, 1
    263a:	40 52       	subi	r20, 0x20	; 32
    263c:	41 93       	st	Z+, r20
    263e:	02 d0       	rcall	.+4      	; 0x2644 <__ultoa_invert+0x84>
    2640:	a9 f7       	brne	.-22     	; 0x262c <__ultoa_invert+0x6c>
    2642:	ea cf       	rjmp	.-44     	; 0x2618 <__ultoa_invert+0x58>
    2644:	b4 e0       	ldi	r27, 0x04	; 4
    2646:	a6 95       	lsr	r26
    2648:	97 95       	ror	r25
    264a:	87 95       	ror	r24
    264c:	77 95       	ror	r23
    264e:	67 95       	ror	r22
    2650:	ba 95       	dec	r27
    2652:	c9 f7       	brne	.-14     	; 0x2646 <__ultoa_invert+0x86>
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	61 05       	cpc	r22, r1
    2658:	71 05       	cpc	r23, r1
    265a:	08 95       	ret
    265c:	9b 01       	movw	r18, r22
    265e:	ac 01       	movw	r20, r24
    2660:	0a 2e       	mov	r0, r26
    2662:	06 94       	lsr	r0
    2664:	57 95       	ror	r21
    2666:	47 95       	ror	r20
    2668:	37 95       	ror	r19
    266a:	27 95       	ror	r18
    266c:	ba 95       	dec	r27
    266e:	c9 f7       	brne	.-14     	; 0x2662 <__ultoa_invert+0xa2>
    2670:	62 0f       	add	r22, r18
    2672:	73 1f       	adc	r23, r19
    2674:	84 1f       	adc	r24, r20
    2676:	95 1f       	adc	r25, r21
    2678:	a0 1d       	adc	r26, r0
    267a:	08 95       	ret

0000267c <__prologue_saves__>:
    267c:	2f 92       	push	r2
    267e:	3f 92       	push	r3
    2680:	4f 92       	push	r4
    2682:	5f 92       	push	r5
    2684:	6f 92       	push	r6
    2686:	7f 92       	push	r7
    2688:	8f 92       	push	r8
    268a:	9f 92       	push	r9
    268c:	af 92       	push	r10
    268e:	bf 92       	push	r11
    2690:	cf 92       	push	r12
    2692:	df 92       	push	r13
    2694:	ef 92       	push	r14
    2696:	ff 92       	push	r15
    2698:	0f 93       	push	r16
    269a:	1f 93       	push	r17
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	ca 1b       	sub	r28, r26
    26a6:	db 0b       	sbc	r29, r27
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	de bf       	out	0x3e, r29	; 62
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	cd bf       	out	0x3d, r28	; 61
    26b2:	09 94       	ijmp

000026b4 <__epilogue_restores__>:
    26b4:	2a 88       	ldd	r2, Y+18	; 0x12
    26b6:	39 88       	ldd	r3, Y+17	; 0x11
    26b8:	48 88       	ldd	r4, Y+16	; 0x10
    26ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    26bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    26be:	7d 84       	ldd	r7, Y+13	; 0x0d
    26c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    26c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    26c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    26c6:	b9 84       	ldd	r11, Y+9	; 0x09
    26c8:	c8 84       	ldd	r12, Y+8	; 0x08
    26ca:	df 80       	ldd	r13, Y+7	; 0x07
    26cc:	ee 80       	ldd	r14, Y+6	; 0x06
    26ce:	fd 80       	ldd	r15, Y+5	; 0x05
    26d0:	0c 81       	ldd	r16, Y+4	; 0x04
    26d2:	1b 81       	ldd	r17, Y+3	; 0x03
    26d4:	aa 81       	ldd	r26, Y+2	; 0x02
    26d6:	b9 81       	ldd	r27, Y+1	; 0x01
    26d8:	ce 0f       	add	r28, r30
    26da:	d1 1d       	adc	r29, r1
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	f8 94       	cli
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	cd bf       	out	0x3d, r28	; 61
    26e6:	ed 01       	movw	r28, r26
    26e8:	08 95       	ret

000026ea <_exit>:
    26ea:	f8 94       	cli

000026ec <__stop_program>:
    26ec:	ff cf       	rjmp	.-2      	; 0x26ec <__stop_program>
